// Code generated by go-bindata.
// sources:
// 0_create_users_table.up.sql
// 0_drop_users_table.down.sql
// 1_create_events_table.up.sql
// 1_drop_events_table.down.sql
// 2_create_matches_table.up.sql
// 2_drop_matches_table.down.sql
// 3_create_alliances_table.up.sql
// 3_drop_alliances_table.down.sql
// 4_create_reports_table.up.sql
// 4_drop_reports_table.down.sql
// 5_add_event_type.up.sql
// 5_remove_event_type.down.sql
// 6_add_bluewon.down.sql
// 6_remove_bluewon.up.sql
// 7_add_photos_table.up.sql
// 7_remove_photos_table.down.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0_create_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\x56\xd0\xe0\xe2\x04\x31\xf2\x12\x73\x53\x15\x42\x5c\x23\x42\xc0\x2a\xfc\x42\x7d\x7c\x14\x42\xfd\x3c\x03\x43\x5d\x75\xb8\x38\x33\x12\x8b\x33\x52\x53\x02\x12\x8b\x8b\xcb\xf3\x8b\x52\x50\x55\x71\x69\x02\x02\x00\x00\xff\xff\xe1\x96\xd7\xd2\x62\x00\x00\x00")

func _0_create_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_create_users_tableUpSql,
		"0_create_users_table.up.sql",
	)
}

func _0_create_users_tableUpSql() (*asset, error) {
	bytes, err := _0_create_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_create_users_table.up.sql", size: 98, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0_drop_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\xbd\x6d\xc5\x8d\x11\x00\x00\x00")

func _0_drop_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_drop_users_tableDownSql,
		"0_drop_users_table.down.sql",
	)
}

func _0_drop_users_tableDownSql() (*asset, error) {
	bytes, err := _0_drop_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_drop_users_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_events_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8b\x4d\x0a\xc2\x30\x10\x85\xd7\x99\x53\xbc\xa5\x42\x2f\x11\x65\x84\x60\x12\x4b\xf2\x84\xd6\x5d\xc1\x01\x41\xac\x60\x83\xe0\xed\x45\x44\xb7\xdf\xcf\xb6\xa8\xa7\x82\x7e\x13\x15\x61\x87\x7c\x20\x74\x08\x95\x15\xf6\xb4\xb9\x2d\x58\x89\xbb\xda\x0b\xd4\x81\xe8\x4b\x48\xbe\x8c\xd8\xeb\xd8\x89\x9b\xa7\x9b\x7d\xf9\xe7\xca\xc7\x18\x3b\x71\xcb\xe5\xfe\x68\xf9\x67\x3a\x71\xe7\xa9\x19\x18\x92\x56\xfa\xd4\xf3\xf4\x8f\x65\xfd\x0e\x00\x00\xff\xff\x50\xda\x81\x7d\x7d\x00\x00\x00")

func _1_create_events_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_events_tableUpSql,
		"1_create_events_table.up.sql",
	)
}

func _1_create_events_tableUpSql() (*asset, error) {
	bytes, err := _1_create_events_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_events_table.up.sql", size: 125, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_drop_events_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x06\x04\x00\x00\xff\xff\x27\xe5\x89\x64\x11\x00\x00\x00")

func _1_drop_events_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_drop_events_tableDownSql,
		"1_drop_events_table.down.sql",
	)
}

func _1_drop_events_tableDownSql() (*asset, error) {
	bytes, err := _1_drop_events_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_drop_events_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_create_matches_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x4d\x6a\xc3\x30\x10\x46\xd7\xd2\x29\x66\x69\x83\x2e\xa1\x84\x71\x10\x91\xa5\x20\x4d\x69\xd2\x9d\x2b\x0f\x34\xf8\xaf\xd8\x72\xc1\xb7\x2f\x2e\xf5\xa6\x74\xfb\xde\xf7\xc1\x3b\x07\xd4\x84\x40\xfa\x64\x11\x4c\x05\xce\x13\xe0\xdd\x44\x8a\x30\x34\x39\x7d\xf0\x02\x85\x14\x1d\x6f\x40\x78\x27\xb8\x05\x53\xeb\xf0\x80\x2b\x3e\x94\x14\xfc\xc5\x63\xbe\x1e\x6e\xbf\xba\x17\x6b\x95\x14\x9f\x33\xb7\xcf\x94\xb9\xa5\xe7\xc0\x40\xa6\xc6\x48\xba\xbe\xd1\x9b\x92\xa2\x49\x79\x6d\xfa\x7f\xc4\x7b\xbf\xf2\xeb\x34\xc2\xc9\x7b\x8b\xda\x29\x29\x66\x6e\x63\x9a\x66\x06\xe3\x08\x2f\x18\x7e\x47\x7f\x59\xe5\x03\x9a\x8b\xdb\xa3\x8a\x23\xa9\x84\x80\x15\x06\x74\x67\x8c\xf0\x03\x97\xa2\xe3\xad\x94\xe5\x77\x00\x00\x00\xff\xff\x95\xc6\xa5\x34\xf2\x00\x00\x00")

func _2_create_matches_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_create_matches_tableUpSql,
		"2_create_matches_table.up.sql",
	)
}

func _2_create_matches_tableUpSql() (*asset, error) {
	bytes, err := _2_create_matches_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_create_matches_table.up.sql", size: 242, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_drop_matches_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x06\x04\x00\x00\xff\xff\xed\x06\x12\x35\x12\x00\x00\x00")

func _2_drop_matches_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_drop_matches_tableDownSql,
		"2_drop_matches_table.down.sql",
	)
}

func _2_drop_matches_tableDownSql() (*asset, error) {
	bytes, err := _2_drop_matches_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_drop_matches_table.down.sql", size: 18, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_create_alliances_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x41\x0a\x83\x30\x14\x44\xd7\xe6\x14\xb3\x34\xe0\x25\x54\xc6\x12\x0c\x09\x8d\x11\xec\xd2\xca\x87\x4a\xd5\x45\xad\x0b\x6f\x5f\xb0\xb4\x14\xba\x9d\x79\xef\x95\x81\x79\x24\x62\x5e\x58\xc2\x54\x70\x3e\x82\x9d\x69\x62\x83\x7e\x9a\xc6\x7e\x19\x64\x45\xaa\x92\xb9\x7f\x0e\xb7\x5a\x76\x44\x76\xf1\xa0\x5c\x6b\x6d\xa6\x92\x71\x2d\xa6\x4d\x50\x78\x6f\x99\xbb\xdf\x67\xd9\xe6\xab\x3c\xfe\x84\xca\x07\x9a\x93\x43\xcd\x4b\xfa\xa9\x6a\x04\x56\x0c\x74\x25\x1b\x1c\xa3\xac\xe9\x5d\x76\x9d\xa9\xa4\x75\xe6\xdc\xf2\x8b\x66\x78\x77\xb5\xd2\xaf\x00\x00\x00\xff\xff\x80\x51\xbd\xfc\xbc\x00\x00\x00")

func _3_create_alliances_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_create_alliances_tableUpSql,
		"3_create_alliances_table.up.sql",
	)
}

func _3_create_alliances_tableUpSql() (*asset, error) {
	bytes, err := _3_create_alliances_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_create_alliances_table.up.sql", size: 188, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_drop_alliances_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xcc\xc9\xc9\x4c\xcc\x4b\x4e\x2d\x06\x04\x00\x00\xff\xff\x17\xe1\x40\xdc\x14\x00\x00\x00")

func _3_drop_alliances_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_drop_alliances_tableDownSql,
		"3_drop_alliances_table.down.sql",
	)
}

func _3_drop_alliances_tableDownSql() (*asset, error) {
	bytes, err := _3_drop_alliances_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_drop_alliances_table.down.sql", size: 20, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_create_reports_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x6a\x86\x30\x10\x84\xcf\xe6\x29\xf6\x98\x40\x5e\x42\x7f\xd6\x12\x0c\x09\x8d\x11\xec\x31\x94\x85\x96\x56\x5b\x92\x58\xf0\xed\x8b\x4a\x40\x6b\x2f\x21\xcc\x7c\x3b\x33\x0f\x87\xb5\x47\xf0\x75\xa3\x11\x54\x0b\xc6\x7a\xc0\x51\xf5\xbe\x87\x48\xdf\x5f\x31\x27\xe0\xac\x3a\xbe\x14\xc1\xe3\xe8\x77\xc6\x0c\x5a\x4b\x56\xd1\x0f\xcd\xb9\xa3\xf5\x66\x4c\x21\xbf\xbe\xfd\x67\xbc\xa7\xe6\x73\x21\x68\xac\xd5\x58\x9b\xb3\x93\x29\x4c\x37\x3c\xe5\x90\xd3\x4d\x1d\x8c\x7a\x1e\x90\x97\x76\x09\xa5\x4e\xc2\x96\x22\x24\x03\x68\xad\x43\xf5\x64\xa0\xc3\x17\x5e\xf6\x0b\x70\xd8\xa2\x43\xf3\xc0\x1e\x96\x44\x31\xf1\xed\x9d\xc3\x44\x42\xb2\xea\x7c\x52\xb2\x2f\x27\xbb\x98\xf8\x07\xad\x7f\xf1\x32\xe0\x82\xef\x22\x1d\x3c\x13\xbf\x01\x00\x00\xff\xff\xf1\xac\xe6\x8d\x6b\x01\x00\x00")

func _4_create_reports_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_create_reports_tableUpSql,
		"4_create_reports_table.up.sql",
	)
}

func _4_create_reports_tableUpSql() (*asset, error) {
	bytes, err := _4_create_reports_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_create_reports_table.up.sql", size: 363, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_drop_reports_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\xb6\x06\x04\x00\x00\xff\xff\x55\x5c\x72\x90\x13\x00\x00\x00")

func _4_drop_reports_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_drop_reports_tableDownSql,
		"4_drop_reports_table.down.sql",
	)
}

func _4_drop_reports_tableDownSql() (*asset, error) {
	bytes, err := _4_drop_reports_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_drop_reports_table.down.sql", size: 19, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_add_event_typeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x83\x88\x84\x54\x16\xa4\x2a\x78\xfa\x85\xb8\xba\xbb\x06\x29\xf8\xf9\x87\x28\xf8\x85\xfa\xf8\x00\x02\x00\x00\xff\xff\x47\xcd\xa1\xbe\x38\x00\x00\x00")

func _5_add_event_typeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_add_event_typeUpSql,
		"5_add_event_type.up.sql",
	)
}

func _5_add_event_typeUpSql() (*asset, error) {
	bytes, err := _5_add_event_typeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_add_event_type.up.sql", size: 56, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_remove_event_typeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x83\x08\x85\x54\x16\xa4\x02\x02\x00\x00\xff\xff\xfa\x1d\x58\x8e\x28\x00\x00\x00")

func _5_remove_event_typeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_remove_event_typeDownSql,
		"5_remove_event_type.down.sql",
	)
}

func _5_remove_event_typeDownSql() (*asset, error) {
	bytes, err := _5_remove_event_typeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_remove_event_type.down.sql", size: 40, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_add_bluewonDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x53\x70\xf2\xf7\xf7\x71\x75\xf4\x03\x04\x00\x00\xff\xff\x08\x2a\x0a\x8b\x2e\x00\x00\x00")

func _6_add_bluewonDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_add_bluewonDownSql,
		"6_add_bluewon.down.sql",
	)
}

func _6_add_bluewonDownSql() (*asset, error) {
	bytes, err := _6_add_bluewonDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_add_bluewon.down.sql", size: 46, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_remove_bluewonUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x03\x04\x00\x00\xff\xff\xc2\xb9\xb0\x4c\x27\x00\x00\x00")

func _6_remove_bluewonUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_remove_bluewonUpSql,
		"6_remove_bluewon.up.sql",
	)
}

func _6_remove_bluewonUpSql() (*asset, error) {
	bytes, err := _6_remove_bluewonUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_remove_bluewon.up.sql", size: 39, mode: os.FileMode(436), modTime: time.Unix(1515960277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_add_photos_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xc8\xc8\x2f\xc9\x2f\x56\xd0\xe0\xe2\x2c\x49\x4d\xcc\x55\x08\x71\x8d\x08\x01\x4b\xfb\x85\xfa\xf8\xe8\x70\x71\x96\x16\xe5\xa0\x8b\x29\x28\x28\x28\x84\xfa\x79\x06\x86\xba\x6a\x80\xb4\xe8\x28\x94\x16\xe5\x68\x72\x69\x02\x02\x00\x00\xff\xff\x7a\x9d\xf7\x09\x64\x00\x00\x00")

func _7_add_photos_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_add_photos_tableUpSql,
		"7_add_photos_table.up.sql",
	)
}

func _7_add_photos_tableUpSql() (*asset, error) {
	bytes, err := _7_add_photos_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_add_photos_table.up.sql", size: 100, mode: os.FileMode(436), modTime: time.Unix(1515984903, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_remove_photos_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xc8\xc8\x2f\xc9\x2f\x06\x04\x00\x00\xff\xff\xb4\x52\x78\x3f\x11\x00\x00\x00")

func _7_remove_photos_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_remove_photos_tableDownSql,
		"7_remove_photos_table.down.sql",
	)
}

func _7_remove_photos_tableDownSql() (*asset, error) {
	bytes, err := _7_remove_photos_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_remove_photos_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1515984916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x5d\x6f\xdb\x3a\xd2\xbe\xb6\x7e\x85\x4e\x80\x73\x60\xbf\xc8\x9b\x88\xfa\x56\x80\xde\x9c\xb6\x0b\xf4\x62\x7b\x80\x3d\x3d\x57\xcb\x45\x40\x51\x64\x2a\xac\x6d\xa5\xb2\xdd\xb2\x2d\xf2\xdf\x17\x0f\x87\x4a\x1c\x5b\x92\xbd\xae\xd1\xec\x85\x6c\x7d\x71\x38\x43\xce\x3c\xcf\x0c\xa9\xeb\x6b\xff\x75\x53\x29\xff\x4e\x2d\x55\x2b\xd6\xaa\xf2\xcb\xaf\xfe\x5d\xf3\xff\x65\xbd\xac\xc4\x5a\x5c\x79\xd7\xd7\xfe\xaa\xd9\xb4\x52\xad\x6e\x70\x1e\xdc\xca\x56\x89\xb5\xba\xdd\xac\x54\xbb\xba\x5d\x8b\x72\xae\xae\x36\xf7\x57\xab\x4f\x73\x7a\x5c\xb5\xcd\xfd\xb3\x87\x55\xf3\x65\xd9\x3d\x66\x5d\x6b\xf5\x59\x2d\xd7\xfb\xcd\x19\x35\x7f\xf6\x74\xbb\x7d\xd8\xb5\x5f\x88\xb5\xfc\xa8\xf6\x05\x84\x24\xe0\xf9\xe3\x6d\x09\x51\x27\x41\xcc\xe7\xb5\x58\xca\x1e\x19\x11\xc9\xd8\x7d\x61\x5b\x4a\xdc\x49\x69\xd5\x7d\xd3\xf6\x18\x12\x93\x8c\xe7\x8f\xb7\x25\x24\xb7\xa2\xaa\xc8\xd0\xdb\xf5\xd7\xfb\xed\xb6\xc9\x6d\xab\x16\xcd\x67\xb5\xfd\x74\xbb\x69\x6a\x9b\x96\xf3\x8d\xfa\xd2\x2c\x77\x9e\xb8\x96\xdd\xc3\x27\xa1\x99\x6d\x74\xff\xb1\x59\x37\xfb\xda\x66\x5d\xbb\x67\xcf\xb7\x25\x77\xee\x70\xd7\xe0\xea\xcd\x1f\xfe\xfb\x3f\x3e\xf8\x6f\xdf\xbc\xfb\xf0\x8b\xe7\xdd\x0b\xf9\x6f\x71\xa7\xfc\x45\x7d\xd7\x8a\x75\xdd\x2c\x57\x9e\x57\x2f\x60\xb8\x3f\xf5\x26\x17\xe5\xd7\xb5\x5a\x5d\x78\x93\x0b\xd9\x2c\xee\x5b\xb5\x5a\x5d\xdf\x7d\xab\xef\x71\x43\x2f\xd6\xf8\xab\x1b\xfa\xbd\xae\x9b\xcd\xba\x9e\xe3\xa2\xb1\x0d\xee\xc5\xfa\xe3\xb5\xae\xe7\x0a\x27\xb8\xb1\x5a\xb7\xf5\xf2\xce\x3e\x5b\xd7\x0b\x75\xe1\xcd\x3c\x4f\x6f\x96\xb2\x53\xef\x1f\x4a\x54\x53\x9c\xf8\xff\xfc\x17\xba\xbd\xf4\x97\x62\xa1\x7c\x6a\x36\xf3\xa7\xdd\x5d\xd5\xb6\x4d\x3b\xf3\xbf\x7b\x93\xbb\x6f\xf6\xca\xbf\x79\xe5\x43\xab\xab\xf7\xea\x0b\x84\xa8\x76\x6a\xd5\xc6\xf5\xef\x1b\xad\x55\x6b\xc5\xce\x66\xde\xa4\xd6\xb6\xc1\x2f\xaf\xfc\x65\x3d\x87\x88\x49\xab\xd6\x9b\x76\x89\xcb\x4b\x5f\x2f\xd6\x57\x6f\x21\x5d\x4f\x2f\x20\xc8\xff\xf5\xd3\x8d\xff\xeb\xe7\x0b\xd2\xc4\xf6\x35\xf3\x26\x0f\x9e\x37\xf9\x2c\x5a\xbf\xdc\x68\x9f\xfa\xa1\x4e\xbc\xc9\x2d\xa9\xf3\xca\xaf\x9b\xab\xd7\xcd\xfd\xd7\xe9\x6f\xe5\x46\x5f\xfa\x77\xdf\x66\xde\x44\xce\xdf\x76\x9a\x5e\xbd\x9e\x37\x2b\x35\x9d\x79\xe7\xd2\x07\x62\x48\xfe\x80\x20\xd5\xb6\xa4\xb7\xbb\x59\x6e\xf4\xd5\xef\x50\x7d\x3a\xbb\xc4\x1b\xde\x83\xe7\xc1\x53\x7d\xb1\x5a\xa9\x35\x86\x7c\x23\xd7\x90\x62\xed\x73\xf3\xe1\x4d\xea\xa5\x6e\x7c\xbf\x59\x5d\xfd\xad\x9e\xab\x77\x4b\xdd\x3c\xb6\x73\x53\xd8\xdd\xdf\x92\x60\xe7\xd0\xf7\xdd\x34\x7a\x93\x55\xfd\xcd\x5e\xd7\xcb\x75\x1a\x7b\x93\x05\xe0\xcb\x7f\x14\xfa\xf7\xa6\x52\xf6\xe6\x87\x7a\xa1\x7c\xb8\xc9\x15\xce\xd0\x8f\x75\x95\xa9\xae\x77\xfb\x9a\xf9\xef\xc5\x42\x4d\x67\xae\x07\xf4\xe9\xac\xd4\xf5\x15\x7a\xf7\x1e\x46\xda\xfe\x59\x7f\x43\x5b\xab\xcd\xf3\xa6\x50\x74\xb4\x29\x74\x9d\xce\xb6\x35\x7f\x2e\x00\xa6\x1d\x12\x00\xe3\xa6\xb3\x27\x43\xf7\x24\x38\xeb\x87\x85\xbc\x5b\xbd\xa9\xdb\xe9\xcc\x2f\x9b\x66\xbe\xdd\x5a\xcc\x57\x07\x2c\xff\xba\x22\xc3\x55\xab\x85\x54\xdf\x1f\xb6\x5a\x3b\x97\x80\x97\xdf\xde\xf6\x91\xc6\x5f\xf7\x7f\x7e\x9a\xfb\xaf\x9c\x67\x4c\x2f\xb8\x61\x9a\x9b\xbc\xe4\x26\xc8\xb9\x09\x82\xfe\x43\x6b\x6e\xb2\x90\x9b\x40\xd1\x7f\x96\x70\x13\x48\x6e\x32\xc6\x4d\x92\x50\x5b\x9c\x67\x31\x37\x3a\x7c\xba\xaf\x03\xba\x97\x44\x74\xae\x23\x6e\x02\xcd\x4d\x82\x77\x03\x6e\xf2\x8a\xee\x43\x16\x64\x07\x05\x37\x49\xca\x4d\x98\x73\x13\x56\xdc\xc4\x8a\xfe\x43\x41\xf7\xab\x80\x1b\x85\x03\xba\xc4\xdc\x44\x8c\xfa\x63\xe8\x33\xa2\x7e\x58\xc2\x4d\x1c\x72\x93\x48\x6e\xc2\x88\xce\x65\x40\x32\xb4\xa4\xeb\xac\xe2\x26\x93\xdc\xb0\x98\xae\x75\xc5\x4d\x04\x1d\xf0\x3e\xe4\x54\x64\x63\x99\x73\x13\xe1\x88\xa8\x0f\x8c\x13\xce\x93\x90\xfa\x0a\xc2\xa7\xfb\x38\x64\x49\x36\xe2\xdc\xbe\x13\xd0\x38\x60\x3c\xd2\x82\xde\xb7\xc7\xd6\xb8\xe2\x50\x8c\x9b\x02\xf6\x65\xdc\x54\x21\x37\x69\xb8\x3d\xfe\x17\x1d\xde\x0e\xcf\xa8\xc3\x84\x3e\xac\xed\x90\x63\x0b\xab\xbd\xc9\x64\xc4\x3b\x2e\xbd\xc9\xe4\x62\x24\xe1\xb8\xb8\xf4\x26\xb3\xc7\xc0\x1e\x96\x03\x75\xfe\xcf\xe2\xd2\xb6\x3a\x16\x98\x1e\xd1\xff\xa0\x45\x87\x90\xf6\x11\x20\x2d\xc4\xdd\xbc\xda\x0d\x97\xef\x00\x92\x1b\x7f\xdc\x1e\x1f\x90\x71\xe3\x17\xf9\xa5\x8f\xd8\xbf\xd9\x86\x86\x69\x1c\xa5\x33\x7b\x1f\x11\x7d\x43\x11\xff\xd7\xb2\x36\x53\x96\xb0\xa4\x48\x83\x30\xcb\x2e\xfd\x60\xf6\xe0\x4d\x04\xfa\xff\xcd\x5a\xfc\xdd\x9a\x79\xe3\x3b\x6b\xa1\xdc\x8d\xfd\x7d\x78\x9c\x10\x71\xb9\x1b\xad\xbb\x39\xdc\x9b\xe6\xcb\xf2\x87\xa2\xb5\xa0\xe8\xb0\x11\x17\x0c\x47\x69\x5f\xb4\x95\x29\x37\x41\x4a\x51\xb6\xeb\xad\x65\xc5\x4d\x5a\x71\x23\x13\x8a\x60\xc6\x86\xbc\x75\xc0\xa2\x93\xbc\x75\x40\x96\xf3\xd6\xc1\xfc\x77\xcf\x5b\x07\xe4\x1c\xe9\xad\xe3\x16\x9d\xcf\x5b\x47\xec\x71\xde\xca\xb2\x97\xf4\xd6\xde\x92\xe2\x74\x72\x01\xf8\xe2\xbd\xb8\xe2\x26\x10\xdc\xc8\x90\x9b\x28\xe0\x86\x81\x24\x12\x02\xc6\xa2\x20\xd0\x2d\x25\x37\xc2\x81\x7c\xa8\xc9\xfd\x52\xb8\x62\xcc\x4d\x1a\x10\x20\xc7\x25\xb9\x38\xee\x55\x29\x01\xba\x84\x9b\x32\x6e\x62\xc6\x8d\x90\xf4\x6e\x1e\x39\x42\x81\xfb\x43\x66\xcc\x4d\x09\x10\xd6\xdc\x48\x4d\x61\x20\x72\x6e\x44\xc6\x4d\x8e\x90\x51\xdc\x30\x47\x32\x29\xe3\x26\xcf\x88\x48\x42\x47\x74\xb0\xb3\x48\xe8\xb9\x4e\xb9\x29\x21\xaf\xa0\xb0\x4a\x72\x6e\xf2\x82\x9b\xb2\xe4\xa6\x12\xdc\x04\xf8\x8f\xb9\xc9\x19\x37\x2a\x27\x9d\xe3\x9c\x9b\x52\x71\x93\x4b\x6e\xaa\x9c\x1b\x55\xd2\x3f\xda\x15\x25\xe9\x81\x7f\x10\x98\x2e\xb8\x51\x19\x37\x12\xe3\x95\x71\xc3\x40\x54\x25\x85\x35\x88\x48\x41\x07\xc5\x4d\x9a\xd3\xbb\x69\xc6\x4d\x24\xe8\x39\xda\x89\x82\x1b\x56\x50\xbb\x22\x24\x82\xd5\x82\x74\x02\x89\x69\xe8\xa6\x69\x6c\x41\x90\x96\xa0\x77\xa0\x00\xb0\x02\x5b\x60\x83\x25\xd5\xaa\x1f\x0a\x86\xdd\xe5\x04\x2c\x18\x16\x66\xc1\x60\xac\xda\xdd\x41\x83\x61\x49\x47\xc1\xc1\x41\xab\xce\x85\x07\xe3\x26\x75\x80\x10\x26\x2f\x8b\x08\x7b\x8b\x08\x3f\x8b\xc0\xe2\x8e\xc0\x90\x82\x81\xc0\x4a\x6e\xc2\x62\x98\xc0\xc2\x8c\xa2\x03\x51\x95\xc6\xc3\x04\x36\x6c\xd2\x49\x5e\x3b\x24\xcc\x79\xed\xf0\x1a\xcc\x9e\xd7\x0e\x49\x3a\xd2\x6b\x0f\x58\x75\x3e\xaf\x1d\x33\xe9\x7f\x82\xc6\xfa\x57\xb6\x4e\xe7\xb1\x14\x3c\xa6\x88\xc7\x52\xe0\x72\xf4\xc4\x63\xf1\x56\x82\x0f\xef\x4c\x53\x2a\x0a\xc0\x41\xa1\xe2\x46\x30\xe2\x2b\x78\x35\xde\x2f\x18\xf1\x1c\xb8\xc5\xca\x2b\xa8\x6d\xe1\x3c\x1c\x51\x11\x21\x12\xc0\x4f\x9a\x78\x02\x51\x03\x9e\x03\x87\x81\x1b\x21\x57\x27\xdc\x88\xd4\x45\x0d\xf8\x04\xf7\x32\x7a\x0f\x7c\x11\x64\x8e\x87\x50\x0c\x05\xc4\x01\x5d\x54\xc4\x28\x8a\x12\x6e\xa4\xe3\x3d\x70\x65\x55\x11\x4f\xe6\x82\x6c\x83\x0e\x51\xe1\x38\x29\xa0\x02\x07\x9c\x8d\xe2\x8a\x41\x6f\x4d\x72\xb3\x9c\x22\x0f\x45\x15\x64\x82\xcb\xc1\x6f\x68\x93\x07\x64\x53\xa4\xb8\x29\x62\x6a\x8b\x62\x0d\x29\x66\x1a\x11\x27\x32\x70\x99\xe2\xa6\x04\x2f\x0b\x6e\x58\xc6\x4d\x5a\x3a\xbe\x8d\xb9\x29\x34\x15\x67\xb0\x1d\xdc\x5d\x38\xee\xc5\x18\x5a\x9e\x0c\x48\x0f\x8c\x85\x4c\x1d\xd7\x0a\x92\x5d\x31\xe2\x55\xf0\xa0\x40\xfe\x00\x7b\x0a\x4a\x73\x31\x1e\x19\xf2\x01\xcc\x4d\x49\xfd\x03\x7d\xa0\x3b\x6c\x47\xae\x22\x0b\x7a\x96\x3b\x6e\xc7\xfc\x3e\xce\xb1\x22\x1b\x0a\x41\xd7\x40\x25\x15\x91\x2f\xd9\xfc\x25\xa7\xbc\x22\xce\xa8\x9f\xa4\x20\x74\x0a\x5c\x1b\x2b\x13\xdc\x1f\xd1\x98\xa3\xa8\x05\x77\x63\xbe\x30\x6e\xc8\x35\x02\x37\xbf\xe0\x78\xe4\x0e\x76\x1e\xd0\x3e\x23\x7b\xd0\x9f\xa8\x68\x4c\x20\x3b\xcb\xf6\x7d\x17\x07\xc6\x12\x63\x83\x31\x8b\x1c\xca\xf6\x21\xe3\x48\xdc\x9c\x00\x8d\x23\xd2\x2c\x36\x8e\xae\x3f\xef\x80\xe3\x88\xac\xa3\xd0\xf1\xb0\x65\xe7\x82\xc7\x03\x56\x39\x7c\x0c\xe3\xf0\x65\x01\x72\x7f\x65\xff\x67\xd1\xba\xcc\x09\xf8\x42\x49\x01\x09\x10\xea\xa8\x7e\x88\xda\x95\x7b\x86\x22\x20\x4a\xe8\xbf\xdf\x81\x07\xed\x3a\xc9\x81\x07\xa5\x39\x07\x1e\xd9\x1f\xd9\x73\xe0\x41\x59\x47\x3a\xf0\x21\xcb\xce\xe7\xc0\xa3\x56\x75\x04\xff\xa2\xab\x2a\x43\x1b\x4f\x3f\x40\xf1\x31\x41\x2c\xca\x48\x94\xaa\x79\x47\xf1\x31\xd1\x22\x28\x5e\xa5\x74\x5d\x46\x04\xa3\xa0\xcd\x10\x94\x17\x13\xbc\x5a\xaf\x94\x14\x09\xdd\x0a\x8a\x92\x44\xef\x28\xe7\x50\x56\xc6\x28\xc5\x12\x2a\x4b\x01\xdd\x28\x17\x41\xa5\x09\xe8\x2f\xa0\xd2\xd2\xf6\x21\x28\x25\x00\x5d\x29\x07\xe1\xb6\x1c\x03\x05\xc5\xb4\x96\x98\x28\x2a\x3f\x41\x55\xd0\x21\x0b\x88\x6a\x73\x97\x4e\x20\xb5\xc0\x7b\xb0\x05\x54\x04\xda\x81\x9e\xb6\xdc\x75\x49\xb2\xd5\x43\x10\x45\x82\x56\x41\x55\x28\x09\x41\xb7\x09\x28\x32\x25\xfb\xf1\xaf\x91\xba\x04\xb4\x06\x0b\x8a\x06\x8d\x82\x76\x0b\x17\xdd\xa1\xbb\x46\x74\x27\x2e\x35\x80\x6d\x45\x57\x1e\x6b\xa2\xb2\xaa\xa0\xb1\x14\x25\x2d\x11\xa0\x9c\x05\xed\x61\x8c\x90\xb6\x40\xcf\xc2\xad\xd9\x4a\x57\x00\x80\xae\x41\x8f\x48\xbf\x80\x10\x28\x6b\xed\x5a\x75\x4c\x73\xc0\x4a\x6e\x98\x24\x3a\x15\x92\x1b\x55\xb8\xf5\xde\x94\xc6\x02\x6d\x45\x4c\xeb\xbf\xe8\xbb\x92\x6e\x29\xa1\x24\xfa\x86\xae\xa0\xcf\x32\xa1\xf9\x42\xea\xd5\x47\xa5\xa0\xe6\x84\xd1\x6a\x19\x52\x99\x52\xf6\x23\xd1\xa8\x87\x9e\x80\x45\xa3\xf2\x2c\x1a\x1d\xd8\x8c\xdd\xc1\xa3\x51\x79\x47\x21\xd2\x31\x16\x9e\x0b\x93\x0e\xda\xf6\x88\x4a\x2f\x0c\x4b\x7d\x9b\xdd\x3f\xb3\x5e\x96\x92\xb2\x56\x1c\xc8\xf2\x71\x6d\x57\xa0\xd4\x38\xc1\x22\xeb\x56\x8c\x32\xe9\xca\x6d\xa1\xf4\xbb\xf5\x88\x85\x27\xb9\xf5\x88\x3c\xe7\xd6\xa3\x1f\x10\xec\xb9\xf5\x88\xbc\x23\xdd\xfa\xb0\x85\xe7\x73\xeb\x03\xb6\x75\xd9\x62\xf0\x92\x5e\xdd\xff\x7d\xc6\x8f\x57\xd3\xa8\x54\x01\xe7\x79\xba\xb5\x2a\x1c\x53\x95\x07\x88\x46\xa5\xa5\x01\xdf\x39\xf9\x25\xe8\xce\x6e\xf3\x69\x5a\xfd\x1d\xa2\xdb\x88\x51\x45\x84\x6a\xb5\x48\x89\x2a\x12\x57\x05\x82\x2e\xb5\x5b\x19\xb6\x2b\xd3\x82\x64\x83\xce\x6c\x65\xcd\x28\x66\x32\x49\x55\x74\xe4\xb6\x36\x73\x47\x0d\xa8\xe6\xec\xf6\x67\x42\x54\x83\x3e\x41\xbd\xa0\x71\x4b\xad\x82\x2a\x52\x50\x04\x2a\x74\xbb\xea\x9b\x51\x6c\x56\x8e\xe6\xa1\x9f\x5d\xab\x0a\x88\xaa\x22\x57\xad\x22\xe6\x30\x26\xa8\xea\x94\xa3\x23\xe9\x68\x0e\x54\x8c\x38\xb6\xdb\xa5\x8c\x74\x02\x35\xda\x4a\x38\xa2\xbe\x40\x63\x88\x79\xd8\x60\xab\x69\x45\x2b\xbc\xa0\x5c\xbb\xba\xee\x52\x98\x2c\xa2\x77\xd2\x9c\xfa\x47\x3a\x82\x71\x41\xa5\x8c\xd4\x06\xd4\x1b\x3a\xfc\x88\x32\xa2\x68\x54\x97\x05\xb0\x21\x22\x7a\x67\x15\xa5\x4b\xb0\x17\x15\x3c\x9e\xa1\x2a\x05\xdd\x06\xae\x3a\x07\xe6\x20\x35\xc1\x1c\x84\x21\xa5\x2d\xa8\x5e\x6d\xbf\x15\xd1\xbb\xd5\x3b\xa6\xb4\x42\x46\x84\x43\x98\x67\xcc\x3b\xc6\x14\x29\x4d\x95\xbb\xea\x3d\xa2\x15\x6c\x8c\xaf\xed\xd3\xa5\x26\x76\xbb\x98\xd1\x9c\x82\xea\x21\x27\x76\x5b\xc0\x25\xaa\x64\x41\xf3\x99\xb8\xeb\xd0\xad\x15\x22\x25\x81\x6f\xe9\x9c\xd2\x0e\xe8\x04\xdf\x82\xac\x28\xa4\xf9\x41\x2a\x85\xf4\x0b\xfa\x33\xb7\x9d\xcc\x22\x1a\xdf\x80\xed\xe3\xa8\x76\xbb\x10\x18\x67\xf8\x24\xfc\xea\xe9\xbd\x27\x1c\x1d\x89\xa9\x13\x50\x74\x44\x9a\xc5\xd0\xd1\x2f\xac\x76\x10\x74\x44\xd6\x51\xf8\x79\xd8\xb2\x73\xa1\xe7\x01\xab\x1c\x76\x46\x69\xf4\xb2\xe0\xb9\xff\xed\xda\xcf\xdc\x01\x06\xc0\x81\xf8\xa5\x5b\x96\x0a\xdd\x32\xd6\xd8\x4e\x30\xda\x22\xc7\x47\x5f\x08\x6c\x38\x7c\x5f\x32\x30\x62\xdb\x49\x4e\x3c\x28\xcd\x39\xf1\xc8\x57\x80\x7b\x4e\x3c\x28\xeb\x48\x27\x3e\x64\xd9\xf9\x9c\x78\xd4\xaa\x2e\xaf\x2d\x5e\xd2\x87\x77\x3f\xaf\xfc\xb1\xaf\x8d\x74\x4c\x1e\x0c\x2f\x0d\x2a\x82\xe5\xff\x76\x0b\x08\x34\x98\xb9\xcd\x59\xfb\xae\xfb\xf2\x08\xb4\xa1\x33\x17\x21\x09\x1d\xa8\x7e\xf3\x9c\x52\x0b\x50\x35\x4b\xa9\x12\x44\x24\xa0\xea\x43\x65\x99\xbb\xaf\x82\xec\xc2\x71\x49\x91\x61\xd3\x0f\xb7\xc9\x0a\x0a\x0f\x1d\x55\xe0\x5d\xb4\xd1\x9d\xad\x3d\x5f\xfe\x20\x4d\x80\xbe\x82\x11\x0d\x47\x79\x7f\x04\xf5\x8e\xec\x09\xb1\xd3\x2b\xc7\x46\xcd\xc0\xa7\xb1\x3b\xf1\xd2\xdb\xfe\xa8\x48\x19\xb3\xe0\x5c\x31\x32\x68\x83\x8b\x8e\x24\x7d\xd9\xe8\xd8\xfb\xc2\xf8\x47\x01\xfe\x9c\x21\xb2\x4b\x16\x63\x61\x12\x38\xf7\xde\x0e\x93\xa1\x8f\xdb\x10\x02\xac\xfb\xfe\x41\x51\x78\xf4\xbb\xf8\xd0\xf0\x9c\xe4\xe7\x43\xc2\x9c\xb3\x0f\x7f\xec\xbd\xe7\xf1\x43\x92\x8e\x74\xfb\xbe\xe6\xff\x09\x00\x00\xff\xff\xc3\x1d\x66\x1d\x00\x30\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 24576, mode: os.FileMode(436), modTime: time.Unix(1515984942, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0_create_users_table.up.sql": _0_create_users_tableUpSql,
	"0_drop_users_table.down.sql": _0_drop_users_tableDownSql,
	"1_create_events_table.up.sql": _1_create_events_tableUpSql,
	"1_drop_events_table.down.sql": _1_drop_events_tableDownSql,
	"2_create_matches_table.up.sql": _2_create_matches_tableUpSql,
	"2_drop_matches_table.down.sql": _2_drop_matches_tableDownSql,
	"3_create_alliances_table.up.sql": _3_create_alliances_tableUpSql,
	"3_drop_alliances_table.down.sql": _3_drop_alliances_tableDownSql,
	"4_create_reports_table.up.sql": _4_create_reports_tableUpSql,
	"4_drop_reports_table.down.sql": _4_drop_reports_tableDownSql,
	"5_add_event_type.up.sql": _5_add_event_typeUpSql,
	"5_remove_event_type.down.sql": _5_remove_event_typeDownSql,
	"6_add_bluewon.down.sql": _6_add_bluewonDownSql,
	"6_remove_bluewon.up.sql": _6_remove_bluewonUpSql,
	"7_add_photos_table.up.sql": _7_add_photos_tableUpSql,
	"7_remove_photos_table.down.sql": _7_remove_photos_tableDownSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0_create_users_table.up.sql": &bintree{_0_create_users_tableUpSql, map[string]*bintree{}},
	"0_drop_users_table.down.sql": &bintree{_0_drop_users_tableDownSql, map[string]*bintree{}},
	"1_create_events_table.up.sql": &bintree{_1_create_events_tableUpSql, map[string]*bintree{}},
	"1_drop_events_table.down.sql": &bintree{_1_drop_events_tableDownSql, map[string]*bintree{}},
	"2_create_matches_table.up.sql": &bintree{_2_create_matches_tableUpSql, map[string]*bintree{}},
	"2_drop_matches_table.down.sql": &bintree{_2_drop_matches_tableDownSql, map[string]*bintree{}},
	"3_create_alliances_table.up.sql": &bintree{_3_create_alliances_tableUpSql, map[string]*bintree{}},
	"3_drop_alliances_table.down.sql": &bintree{_3_drop_alliances_tableDownSql, map[string]*bintree{}},
	"4_create_reports_table.up.sql": &bintree{_4_create_reports_tableUpSql, map[string]*bintree{}},
	"4_drop_reports_table.down.sql": &bintree{_4_drop_reports_tableDownSql, map[string]*bintree{}},
	"5_add_event_type.up.sql": &bintree{_5_add_event_typeUpSql, map[string]*bintree{}},
	"5_remove_event_type.down.sql": &bintree{_5_remove_event_typeDownSql, map[string]*bintree{}},
	"6_add_bluewon.down.sql": &bintree{_6_add_bluewonDownSql, map[string]*bintree{}},
	"6_remove_bluewon.up.sql": &bintree{_6_remove_bluewonUpSql, map[string]*bintree{}},
	"7_add_photos_table.up.sql": &bintree{_7_add_photos_tableUpSql, map[string]*bintree{}},
	"7_remove_photos_table.down.sql": &bintree{_7_remove_photos_tableDownSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

