// Code generated by go-bindata.
// sources:
// 0_create_users_table.up.sql
// 0_drop_users_table.down.sql
// 10_add_reports_delete_cascade.up.sql
// 10_remove_reports_delete_cascade.down.sql
// 1_create_events_table.up.sql
// 1_drop_events_table.down.sql
// 2_create_matches_table.up.sql
// 2_drop_matches_table.down.sql
// 3_create_alliances_table.up.sql
// 3_drop_alliances_table.down.sql
// 4_create_reports_table.up.sql
// 4_drop_reports_table.down.sql
// 5_add_event_type.up.sql
// 5_remove_event_type.down.sql
// 6_add_bluewon.down.sql
// 6_remove_bluewon.up.sql
// 7_add_photos_table.up.sql
// 7_remove_photos_table.down.sql
// 8_add_isdmin.up.sql
// 8_remove_isadmin.down.sql
// 9_add_reports_cascade.up.sql
// 9_remove_reports_cascade.down.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0_create_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\x56\xd0\xe0\xe2\x04\x31\xf2\x12\x73\x53\x15\x42\x5c\x23\x42\xc0\x2a\xfc\x42\x7d\x7c\x14\x42\xfd\x3c\x03\x43\x5d\x75\xb8\x38\x33\x12\x8b\x33\x52\x53\x02\x12\x8b\x8b\xcb\xf3\x8b\x52\x50\x55\x71\x69\x02\x02\x00\x00\xff\xff\xe1\x96\xd7\xd2\x62\x00\x00\x00")

func _0_create_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_create_users_tableUpSql,
		"0_create_users_table.up.sql",
	)
}

func _0_create_users_tableUpSql() (*asset, error) {
	bytes, err := _0_create_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_create_users_table.up.sql", size: 98, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0_drop_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\xbd\x6d\xc5\x8d\x11\x00\x00\x00")

func _0_drop_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_drop_users_tableDownSql,
		"0_drop_users_table.down.sql",
	)
}

func _0_drop_users_tableDownSql() (*asset, error) {
	bytes, err := _0_drop_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_drop_users_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __10_add_reports_delete_cascadeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcb\xbd\xaa\x02\x31\x14\xc4\xf1\xfe\x3e\xc5\x94\xbb\xcf\x70\xab\x63\xce\xac\x2c\x86\x64\x39\x89\x85\xd5\x62\x11\x1b\xf1\x83\x44\x0b\xdf\x5e\x16\x59\x6c\x6c\x66\xe0\x07\x7f\xf1\x99\x86\x2c\x1b\x4f\xd4\x72\xbf\xd5\x47\x83\x5a\x9c\xe0\x62\x48\xd9\x64\x0c\x79\xf5\xf9\xf3\xa5\xce\xa7\x73\x79\xfd\xff\xfd\x4a\x45\x15\x43\x34\x8e\xdb\x80\x1d\x0f\xdd\x9a\xf4\x30\x0e\x34\x06\xc7\x84\x67\x2b\xb5\x75\xcb\x5e\x8f\x97\xd2\x23\x06\xec\x27\x95\x4c\x38\x49\x4e\x94\x8b\x28\x3d\xbf\xf2\x0e\x00\x00\xff\xff\xcf\x01\x46\xde\xa7\x00\x00\x00")

func _10_add_reports_delete_cascadeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__10_add_reports_delete_cascadeUpSql,
		"10_add_reports_delete_cascade.up.sql",
	)
}

func _10_add_reports_delete_cascadeUpSql() (*asset, error) {
	bytes, err := _10_add_reports_delete_cascadeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10_add_reports_delete_cascade.up.sql", size: 167, mode: os.FileMode(436), modTime: time.Unix(1517204604, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __10_remove_reports_delete_cascadeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x0b\x0e\x09\x72\xf4\xf4\x0b\x81\x89\xc7\x43\xe8\xd4\xa2\xf8\xb4\xec\xd4\x4a\x6b\x2e\x6c\x5a\x1d\x5d\x5c\x14\xdc\xfc\x83\x5c\x3d\xdd\xfd\x14\xbc\x5d\x23\x35\x60\x5a\x34\x15\x82\x5c\xdd\x5c\x83\x5c\xfd\x9c\x5d\x83\x15\x4a\x8b\x53\x8b\x8a\x35\x40\x64\x5e\x62\x6e\xaa\xa6\x82\xbf\x9f\x42\x68\x80\x8b\x63\x88\xab\x82\xb3\x63\xb0\xb3\xa3\x8b\x2b\x20\x00\x00\xff\xff\xd6\xa5\x2c\xc4\x95\x00\x00\x00")

func _10_remove_reports_delete_cascadeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__10_remove_reports_delete_cascadeDownSql,
		"10_remove_reports_delete_cascade.down.sql",
	)
}

func _10_remove_reports_delete_cascadeDownSql() (*asset, error) {
	bytes, err := _10_remove_reports_delete_cascadeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10_remove_reports_delete_cascade.down.sql", size: 149, mode: os.FileMode(436), modTime: time.Unix(1517204621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_events_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8b\x4d\x0a\xc2\x30\x10\x85\xd7\x99\x53\xbc\xa5\x42\x2f\x11\x65\x84\x60\x12\x4b\xf2\x84\xd6\x5d\xc1\x01\x41\xac\x60\x83\xe0\xed\x45\x44\xb7\xdf\xcf\xb6\xa8\xa7\x82\x7e\x13\x15\x61\x87\x7c\x20\x74\x08\x95\x15\xf6\xb4\xb9\x2d\x58\x89\xbb\xda\x0b\xd4\x81\xe8\x4b\x48\xbe\x8c\xd8\xeb\xd8\x89\x9b\xa7\x9b\x7d\xf9\xe7\xca\xc7\x18\x3b\x71\xcb\xe5\xfe\x68\xf9\x67\x3a\x71\xe7\xa9\x19\x18\x92\x56\xfa\xd4\xf3\xf4\x8f\x65\xfd\x0e\x00\x00\xff\xff\x50\xda\x81\x7d\x7d\x00\x00\x00")

func _1_create_events_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_events_tableUpSql,
		"1_create_events_table.up.sql",
	)
}

func _1_create_events_tableUpSql() (*asset, error) {
	bytes, err := _1_create_events_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_events_table.up.sql", size: 125, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_drop_events_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x06\x04\x00\x00\xff\xff\x27\xe5\x89\x64\x11\x00\x00\x00")

func _1_drop_events_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_drop_events_tableDownSql,
		"1_drop_events_table.down.sql",
	)
}

func _1_drop_events_tableDownSql() (*asset, error) {
	bytes, err := _1_drop_events_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_drop_events_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_create_matches_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x4d\x6a\xc3\x30\x10\x46\xd7\xd2\x29\x66\x69\x83\x2e\xa1\x84\x71\x10\x91\xa5\x20\x4d\x69\xd2\x9d\x2b\x0f\x34\xf8\xaf\xd8\x72\xc1\xb7\x2f\x2e\xf5\xa6\x74\xfb\xde\xf7\xc1\x3b\x07\xd4\x84\x40\xfa\x64\x11\x4c\x05\xce\x13\xe0\xdd\x44\x8a\x30\x34\x39\x7d\xf0\x02\x85\x14\x1d\x6f\x40\x78\x27\xb8\x05\x53\xeb\xf0\x80\x2b\x3e\x94\x14\xfc\xc5\x63\xbe\x1e\x6e\xbf\xba\x17\x6b\x95\x14\x9f\x33\xb7\xcf\x94\xb9\xa5\xe7\xc0\x40\xa6\xc6\x48\xba\xbe\xd1\x9b\x92\xa2\x49\x79\x6d\xfa\x7f\xc4\x7b\xbf\xf2\xeb\x34\xc2\xc9\x7b\x8b\xda\x29\x29\x66\x6e\x63\x9a\x66\x06\xe3\x08\x2f\x18\x7e\x47\x7f\x59\xe5\x03\x9a\x8b\xdb\xa3\x8a\x23\xa9\x84\x80\x15\x06\x74\x67\x8c\xf0\x03\x97\xa2\xe3\xad\x94\xe5\x77\x00\x00\x00\xff\xff\x95\xc6\xa5\x34\xf2\x00\x00\x00")

func _2_create_matches_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_create_matches_tableUpSql,
		"2_create_matches_table.up.sql",
	)
}

func _2_create_matches_tableUpSql() (*asset, error) {
	bytes, err := _2_create_matches_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_create_matches_table.up.sql", size: 242, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_drop_matches_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x06\x04\x00\x00\xff\xff\xed\x06\x12\x35\x12\x00\x00\x00")

func _2_drop_matches_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_drop_matches_tableDownSql,
		"2_drop_matches_table.down.sql",
	)
}

func _2_drop_matches_tableDownSql() (*asset, error) {
	bytes, err := _2_drop_matches_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_drop_matches_table.down.sql", size: 18, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_create_alliances_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x41\x0a\x83\x30\x14\x44\xd7\xe6\x14\xb3\x34\xe0\x25\x54\xc6\x12\x0c\x09\x8d\x11\xec\xd2\xca\x87\x4a\xd5\x45\xad\x0b\x6f\x5f\xb0\xb4\x14\xba\x9d\x79\xef\x95\x81\x79\x24\x62\x5e\x58\xc2\x54\x70\x3e\x82\x9d\x69\x62\x83\x7e\x9a\xc6\x7e\x19\x64\x45\xaa\x92\xb9\x7f\x0e\xb7\x5a\x76\x44\x76\xf1\xa0\x5c\x6b\x6d\xa6\x92\x71\x2d\xa6\x4d\x50\x78\x6f\x99\xbb\xdf\x67\xd9\xe6\xab\x3c\xfe\x84\xca\x07\x9a\x93\x43\xcd\x4b\xfa\xa9\x6a\x04\x56\x0c\x74\x25\x1b\x1c\xa3\xac\xe9\x5d\x76\x9d\xa9\xa4\x75\xe6\xdc\xf2\x8b\x66\x78\x77\xb5\xd2\xaf\x00\x00\x00\xff\xff\x80\x51\xbd\xfc\xbc\x00\x00\x00")

func _3_create_alliances_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_create_alliances_tableUpSql,
		"3_create_alliances_table.up.sql",
	)
}

func _3_create_alliances_tableUpSql() (*asset, error) {
	bytes, err := _3_create_alliances_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_create_alliances_table.up.sql", size: 188, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_drop_alliances_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xcc\xc9\xc9\x4c\xcc\x4b\x4e\x2d\x06\x04\x00\x00\xff\xff\x17\xe1\x40\xdc\x14\x00\x00\x00")

func _3_drop_alliances_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_drop_alliances_tableDownSql,
		"3_drop_alliances_table.down.sql",
	)
}

func _3_drop_alliances_tableDownSql() (*asset, error) {
	bytes, err := _3_drop_alliances_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_drop_alliances_table.down.sql", size: 20, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_create_reports_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x6a\x86\x30\x10\x84\xcf\xe6\x29\xf6\x98\x40\x5e\x42\x7f\xd6\x12\x0c\x09\x8d\x11\xec\x31\x94\x85\x96\x56\x5b\x92\x58\xf0\xed\x8b\x4a\x40\x6b\x2f\x21\xcc\x7c\x3b\x33\x0f\x87\xb5\x47\xf0\x75\xa3\x11\x54\x0b\xc6\x7a\xc0\x51\xf5\xbe\x87\x48\xdf\x5f\x31\x27\xe0\xac\x3a\xbe\x14\xc1\xe3\xe8\x77\xc6\x0c\x5a\x4b\x56\xd1\x0f\xcd\xb9\xa3\xf5\x66\x4c\x21\xbf\xbe\xfd\x67\xbc\xa7\xe6\x73\x21\x68\xac\xd5\x58\x9b\xb3\x93\x29\x4c\x37\x3c\xe5\x90\xd3\x4d\x1d\x8c\x7a\x1e\x90\x97\x76\x09\xa5\x4e\xc2\x96\x22\x24\x03\x68\xad\x43\xf5\x64\xa0\xc3\x17\x5e\xf6\x0b\x70\xd8\xa2\x43\xf3\xc0\x1e\x96\x44\x31\xf1\xed\x9d\xc3\x44\x42\xb2\xea\x7c\x52\xb2\x2f\x27\xbb\x98\xf8\x07\xad\x7f\xf1\x32\xe0\x82\xef\x22\x1d\x3c\x13\xbf\x01\x00\x00\xff\xff\xf1\xac\xe6\x8d\x6b\x01\x00\x00")

func _4_create_reports_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_create_reports_tableUpSql,
		"4_create_reports_table.up.sql",
	)
}

func _4_create_reports_tableUpSql() (*asset, error) {
	bytes, err := _4_create_reports_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_create_reports_table.up.sql", size: 363, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_drop_reports_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\xb6\x06\x04\x00\x00\xff\xff\x55\x5c\x72\x90\x13\x00\x00\x00")

func _4_drop_reports_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_drop_reports_tableDownSql,
		"4_drop_reports_table.down.sql",
	)
}

func _4_drop_reports_tableDownSql() (*asset, error) {
	bytes, err := _4_drop_reports_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_drop_reports_table.down.sql", size: 19, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_add_event_typeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x83\x88\x84\x54\x16\xa4\x2a\x78\xfa\x85\xb8\xba\xbb\x06\x29\xf8\xf9\x87\x28\xf8\x85\xfa\xf8\x00\x02\x00\x00\xff\xff\x47\xcd\xa1\xbe\x38\x00\x00\x00")

func _5_add_event_typeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_add_event_typeUpSql,
		"5_add_event_type.up.sql",
	)
}

func _5_add_event_typeUpSql() (*asset, error) {
	bytes, err := _5_add_event_typeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_add_event_type.up.sql", size: 56, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_remove_event_typeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x83\x08\x85\x54\x16\xa4\x02\x02\x00\x00\xff\xff\xfa\x1d\x58\x8e\x28\x00\x00\x00")

func _5_remove_event_typeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_remove_event_typeDownSql,
		"5_remove_event_type.down.sql",
	)
}

func _5_remove_event_typeDownSql() (*asset, error) {
	bytes, err := _5_remove_event_typeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_remove_event_type.down.sql", size: 40, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_add_bluewonDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x53\x70\xf2\xf7\xf7\x71\x75\xf4\x03\x04\x00\x00\xff\xff\x08\x2a\x0a\x8b\x2e\x00\x00\x00")

func _6_add_bluewonDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_add_bluewonDownSql,
		"6_add_bluewon.down.sql",
	)
}

func _6_add_bluewonDownSql() (*asset, error) {
	bytes, err := _6_add_bluewonDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_add_bluewon.down.sql", size: 46, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_remove_bluewonUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x03\x04\x00\x00\xff\xff\xc2\xb9\xb0\x4c\x27\x00\x00\x00")

func _6_remove_bluewonUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_remove_bluewonUpSql,
		"6_remove_bluewon.up.sql",
	)
}

func _6_remove_bluewonUpSql() (*asset, error) {
	bytes, err := _6_remove_bluewonUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_remove_bluewon.up.sql", size: 39, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_add_photos_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xc8\xc8\x2f\xc9\x2f\x56\xd0\xe0\xe2\x2c\x49\x4d\xcc\x55\x08\x71\x8d\x08\x01\x4b\xfb\x85\xfa\xf8\xe8\x70\x71\x96\x16\xe5\xa0\x8b\x29\x28\x28\x28\x84\xfa\x79\x06\x86\xba\x6a\x80\xb4\xe8\x28\x94\x16\xe5\x68\x72\x69\x02\x02\x00\x00\xff\xff\x7a\x9d\xf7\x09\x64\x00\x00\x00")

func _7_add_photos_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_add_photos_tableUpSql,
		"7_add_photos_table.up.sql",
	)
}

func _7_add_photos_tableUpSql() (*asset, error) {
	bytes, err := _7_add_photos_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_add_photos_table.up.sql", size: 100, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_remove_photos_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xc8\xc8\x2f\xc9\x2f\x06\x04\x00\x00\xff\xff\xb4\x52\x78\x3f\x11\x00\x00\x00")

func _7_remove_photos_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_remove_photos_tableDownSql,
		"7_remove_photos_table.down.sql",
	)
}

func _7_remove_photos_tableDownSql() (*asset, error) {
	bytes, err := _7_remove_photos_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_remove_photos_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __8_add_isdminUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\x85\x30\x0c\x05\xd0\x55\xee\x2a\xe9\x6b\xde\xd7\x35\x01\x49\x06\x10\xac\x50\x50\x3f\x0c\xee\xef\x11\x86\xae\x08\x69\x54\xbc\x35\x9e\x82\xf4\x8e\x9f\x33\x17\xc3\x2c\xd9\xaf\x79\xa3\xb9\x53\xc5\x60\x1e\xb0\x24\xd1\xf5\x2f\xc9\xc0\xb1\x9d\x35\xbe\x00\x00\x00\xff\xff\xe7\x70\xa1\xca\x43\x00\x00\x00")

func _8_add_isdminUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__8_add_isdminUpSql,
		"8_add_isdmin.up.sql",
	)
}

func _8_add_isdminUpSql() (*asset, error) {
	bytes, err := _8_add_isdminUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "8_add_isdmin.up.sql", size: 67, mode: os.FileMode(436), modTime: time.Unix(1516750373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __8_remove_isadminDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x2c\x76\x4c\xc9\xcd\xcc\x03\x04\x00\x00\xff\xff\x54\xf1\x61\xd5\x25\x00\x00\x00")

func _8_remove_isadminDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__8_remove_isadminDownSql,
		"8_remove_isadmin.down.sql",
	)
}

func _8_remove_isadminDownSql() (*asset, error) {
	bytes, err := _8_remove_isadminDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "8_remove_isadmin.down.sql", size: 37, mode: os.FileMode(436), modTime: time.Unix(1516750373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __9_add_reports_cascadeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x0b\x0e\x09\x72\xf4\xf4\x0b\x81\x89\xc7\x43\xe8\xd4\xa2\xf8\xb4\xec\xd4\x4a\x6b\x2e\x6c\x5a\x1d\x5d\x5c\x14\xdc\xfc\x83\x5c\x3d\xdd\xfd\x14\xbc\x5d\x23\x35\x60\x5a\x34\x15\x82\x5c\xdd\x5c\x83\x5c\xfd\x9c\x5d\x83\x15\x4a\x8b\x53\x8b\x8a\x35\x40\x64\x5e\x62\x6e\xaa\xa6\x82\xbf\x9f\x42\x68\x80\x8b\x63\x88\xab\x82\xb3\x63\xb0\xb3\xa3\x8b\x2b\x20\x00\x00\xff\xff\xd6\xa5\x2c\xc4\x95\x00\x00\x00")

func _9_add_reports_cascadeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__9_add_reports_cascadeUpSql,
		"9_add_reports_cascade.up.sql",
	)
}

func _9_add_reports_cascadeUpSql() (*asset, error) {
	bytes, err := _9_add_reports_cascadeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "9_add_reports_cascade.up.sql", size: 149, mode: os.FileMode(436), modTime: time.Unix(1517181275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __9_remove_reports_cascadeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x0b\x0e\x09\x72\xf4\xf4\x0b\x81\x89\xc7\x43\xe8\xd4\xa2\xf8\xb4\xec\xd4\x4a\x6b\x2e\x6c\x5a\x1d\x5d\x5c\x14\xdc\xfc\x83\x5c\x3d\xdd\xfd\x14\xbc\x5d\x23\x35\x60\x5a\x34\x15\x82\x5c\xdd\x5c\x83\x5c\xfd\x9c\x5d\x83\x15\x4a\x8b\x53\x8b\x8a\x35\x40\x64\x5e\x62\x6e\xaa\x26\x20\x00\x00\xff\xff\x47\x73\x6b\x93\x83\x00\x00\x00")

func _9_remove_reports_cascadeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__9_remove_reports_cascadeDownSql,
		"9_remove_reports_cascade.down.sql",
	)
}

func _9_remove_reports_cascadeDownSql() (*asset, error) {
	bytes, err := _9_remove_reports_cascadeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "9_remove_reports_cascade.down.sql", size: 131, mode: os.FileMode(436), modTime: time.Unix(1517181275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6f\xe3\x36\x12\x7f\xb6\xfe\x0a\x35\x40\x0b\xfb\x90\x4b\xf4\xfd\x11\x60\x5f\xda\xed\x01\x7d\xb8\x16\xb8\xb6\x4f\xc7\x43\x40\x51\x54\x2a\x9c\x63\x67\x6d\x67\x97\xbb\x8b\xfd\xdf\x0f\x3f\xce\x28\x71\x6c\x51\x56\xbc\x46\xd2\x3b\xdc\x83\x12\x5b\x12\x87\x1c\x72\xe6\xf7\x9b\xe1\x87\x2f\x2f\xfd\x1f\x96\xb5\xf6\x6f\xf4\x42\xaf\xe4\x46\xd7\x7e\xf5\xd1\xbf\x59\xfe\xb5\x6a\x17\xb5\xdc\xc8\x0b\xef\xf2\xd2\x5f\x2f\xef\x57\x4a\xaf\xaf\xf0\x39\xb8\x56\x2b\x2d\x37\xfa\xfa\x7e\xad\x57\xeb\xeb\x8d\xac\xe6\xfa\xe2\xfe\xee\x62\xfd\x6e\x4e\x8f\xeb\xd5\xf2\xee\xc9\xc3\x7a\xf9\x61\xd1\x3d\x0e\x83\x6b\x59\xd7\xd7\x2b\x7d\xb7\x5c\x6d\xd6\xd7\xb5\x9e\xeb\x8d\xbe\x56\x72\xad\x64\xbd\x2d\x26\x0c\xae\x57\xfa\x76\xf9\x5e\xbb\x5e\x7d\x22\xb4\x6b\x92\x7e\xaf\x17\x9b\xfd\x36\x85\xd4\xa6\x27\x4f\xb7\xcb\x47\x5d\xf9\x5b\xb9\x51\x7f\xe8\x7d\x01\x11\x09\x78\xfa\x78\x5b\x42\xdc\x49\x90\xf3\x79\x2b\x17\xaa\x47\x46\x4c\x32\x76\x5f\xd8\x96\x92\x74\x52\x3a\x9d\x77\x65\x24\x24\xe3\xe9\xe3\x6d\x09\xa9\xed\x5d\xab\xe8\xf5\xe6\xe3\xdd\x76\xd9\xb4\xeb\xd0\xad\xa7\xdb\x45\x33\x5b\xb4\x9a\xdf\xeb\x0f\xcb\xc5\xce\x13\x2e\xd9\x3d\x7c\x14\x9a\xdb\x42\x77\x7f\x2c\x37\xcb\xfd\xd6\xe6\x5d\xb9\x27\xcf\xb7\x25\x17\xb6\x78\xbb\xae\x6f\xdb\x6d\xa9\x45\x57\xb0\x5d\x4b\xfb\x68\xbb\x4c\xf9\xc4\x80\xf6\x2d\xa7\xdc\x35\x9c\x3e\x8b\xe9\x8c\xfb\x66\x89\x6f\x6f\x7f\xf1\x7f\xfe\xe5\x37\xff\xc7\xb7\x3f\xfd\xf6\x8d\xe7\xdd\x49\xf5\x6f\x79\xa3\xfd\xdb\xf6\x66\x25\x37\xed\x72\xb1\xf6\xbc\xf6\x16\xb2\xfc\xa9\x37\x39\xab\x3e\x6e\xf4\xfa\xcc\x9b\x9c\xa9\xe5\xed\xdd\x4a\xaf\xd7\x97\x37\x9f\xda\x3b\xdc\x68\x6e\x37\xf8\xd7\x2e\xe9\xef\x65\xbb\xbc\xdf\xb4\x73\x7c\x59\xda\x02\x77\x72\xf3\xc7\x65\xd3\xce\x35\x3e\xe0\xc6\x7a\xb3\x6a\x17\x37\xf6\xd9\xa6\xbd\xd5\x67\xde\xcc\xf3\x9a\xfb\x85\xea\x9a\xf7\x0f\x2d\xeb\x29\x3e\xf8\xff\xfc\x17\xaa\x3d\xf7\x17\xf2\x56\xfb\x54\x6c\xe6\x4f\xbb\xbb\x7a\xb5\x5a\xae\x66\xfe\x67\x6f\x72\xf3\xc9\x7e\xf3\xaf\xde\xf8\x68\xd5\xc5\xcf\xfa\x03\x84\xe8\xd5\xd4\x36\x1b\xdf\xbf\xbf\x6f\x1a\xbd\xb2\x62\x67\x33\x6f\xd2\x36\xb6\xc0\x37\x6f\xfc\x45\x3b\x87\x88\xc9\x4a\x6f\xee\x57\x0b\x7c\x3d\xf7\x9b\xdb\xcd\xc5\x8f\x90\xde\x4c\xcf\x20\xc8\xff\xf6\xdd\x95\xff\xed\xfb\x33\x6a\x89\xad\x6b\xe6\x4d\xbe\x78\xde\xe4\xbd\x5c\xf9\xd5\x7d\xe3\x53\x3d\x54\x89\x37\xb9\xa6\xe6\xbc\xf1\xdb\xe5\xc5\x0f\xcb\xbb\x8f\xd3\xef\xaa\xfb\xe6\xdc\xbf\xf9\x34\xf3\x26\x6a\xfe\x63\xd7\xd2\x8b\x1f\xe6\xcb\xb5\x9e\xce\xbc\x53\xb5\x07\x62\x48\xbe\x43\x90\x5e\xad\xa8\xdd\x7c\xb3\xba\x6f\x2e\xbe\x47\xd3\xa7\xb3\x73\xbc\xe1\x7d\xf1\x3c\xb8\x88\x2f\xd7\x6b\xbd\x41\x97\xdf\xab\x0d\xa4\x58\xfd\x78\x3c\xbc\x49\xbb\x68\x96\xbe\xbf\x5c\x5f\xfc\xad\x9d\xeb\x9f\x16\xcd\xf2\xa1\x1c\x0f\x61\x77\x7f\x4b\x82\x1d\x43\xdf\xe7\x61\xf4\x26\xeb\xf6\x93\xfd\xde\x2e\x36\x59\xe2\x4d\x6e\x01\xc6\xfe\x83\xd0\xbf\x2f\x6b\x6d\x6f\xfe\xd6\xde\x6a\x1f\x66\x72\x81\x4f\xa8\xc7\x9a\xca\xb4\x69\x77\xeb\x9a\xf9\x3f\xcb\x5b\x3d\x9d\x71\x0d\xa8\x93\xb5\x6c\xda\x0b\xd4\xee\x7d\x19\x28\xfb\x6b\xfb\x09\x65\x6d\x6b\x9e\x16\x45\x43\x07\x8b\xa2\xad\xd3\xd9\x76\xcb\x9f\x0a\x80\x6a\x87\x04\x40\xb9\xe9\xec\x51\xd1\x3d\x09\xac\xbd\x5b\xc8\x4f\xeb\xb7\xed\x6a\x3a\xf3\xab\xe5\x72\xbe\x5d\x5a\xce\xd7\x07\x34\xff\xb8\x26\xc5\xf5\xaa\x91\x4a\x7f\xfe\xb2\x55\x9a\x4d\x02\x56\x7e\x7d\xdd\x47\x81\xbf\xdf\xfd\xfa\x6e\xee\xbf\x61\xcb\x98\x9e\x09\x13\x36\xc2\x14\x95\x30\x41\x21\x4c\x10\xf4\x5f\x4d\x23\x4c\x1e\x09\x13\x68\xfa\x9f\xa7\xc2\x04\x4a\x98\x3c\x14\x26\x4d\xa9\x2c\x3e\xe7\x89\x30\x4d\xf4\x78\xbf\x09\xe8\x5e\x1a\xd3\xe7\x26\x16\x26\x68\x84\x49\xf1\x6e\x20\x4c\x51\xd3\x7d\xc8\x82\xec\xa0\x14\x26\xcd\x84\x89\x0a\x61\xa2\x5a\x98\x44\xd3\xff\x48\xd2\xfd\x3a\x10\x46\xe3\x42\x5b\x12\x61\xe2\x90\xea\x0b\x51\x67\x4c\xf5\x84\xa9\x30\x49\x24\x4c\xaa\x84\x89\x62\xfa\xac\x02\x92\xd1\x28\xfa\x9e\xd7\xc2\xe4\x4a\x98\x30\xa1\xef\x4d\x2d\x4c\x8c\x36\xe0\x7d\xc8\xa9\x49\xc7\xaa\x10\x26\xc6\x15\x53\x1d\xe8\x27\x7c\x4e\x23\xaa\x2b\x88\x1e\xef\xe3\x52\x15\xe9\x88\xcf\xf6\x9d\x80\xfa\x01\xfd\x91\x95\xf4\xbe\xbd\xb6\xfa\x15\x97\x0e\x85\x29\xa1\x5f\x2e\x4c\x1d\x09\x93\x45\xdb\xfd\x7f\xd6\xe1\xad\x7b\x44\x19\x13\xfa\xb0\xb6\x43\x8e\x2d\xac\xf6\x26\x93\x01\xeb\x38\xf7\x26\x93\xb3\x81\xf0\xe9\xec\xdc\x9b\xcc\x1e\x1c\xdb\x2d\x07\xcd\xf9\x8b\xc5\xa5\xed\xe6\x58\x60\x7a\x40\xff\x83\x1a\x1d\x42\xda\x07\x80\xb4\x10\x77\xf5\x66\xd7\x5d\x3e\x03\x48\xae\xfc\x61\x7d\x7c\x40\xc6\x95\x5f\x16\xe7\x3e\x7c\xff\x6a\x1b\x1a\xa6\x49\x9c\xcd\xec\x7d\x78\xf4\x15\x79\xfc\xef\x8b\xd6\x4c\xc3\x34\xcc\xb2\x3c\x0f\xe3\xe0\xdc\x0f\x66\x5f\xbc\x89\x44\xfd\xdf\x59\x8d\x3f\x5b\x35\xaf\x7c\xd6\x16\x8d\xbb\xb2\x7f\xbf\x3c\x0c\x88\x3c\xdf\xf5\xd6\xdd\x88\xf4\xed\xf2\xc3\xe2\xab\xbc\xb5\x24\xef\xb0\x1e\x17\xb8\xbd\xb4\xcf\xdb\xaa\x4c\x98\x20\x23\x2f\xdb\xb5\xd6\xaa\x16\x26\xab\x85\x51\x29\x79\x70\x18\xba\xac\xd5\xa1\xd1\x51\xd6\xea\x90\xc5\xd6\xea\x8c\xe6\xf7\xac\xd5\x21\x67\xa4\xb5\x0e\x6b\x74\x3a\x6b\x1d\xd0\x87\xad\x35\xcc\x5f\xd3\x5a\x07\x13\xa4\xe3\x49\x26\x53\x04\xa2\x30\x31\x29\x09\x2c\x01\xf2\x00\x6a\x05\xb3\x05\xe0\x6b\x61\x62\x4d\xe6\x57\x26\xc2\x54\x00\xde\x86\x08\x45\x56\xc2\x64\xb1\x30\x4a\x0b\x23\x41\x00\x4a\x98\x22\x13\x26\x03\x59\x94\xc2\x14\xb8\x52\x61\xea\x94\x40\x16\xa6\x1b\x56\x24\xb7\x00\xf8\xc3\xdc\x2b\x61\x6a\xb8\x8c\x16\x26\xcc\x84\x49\x4b\x6a\x97\xbd\x32\x22\xa0\x20\x17\x26\x6f\xa8\x5c\x59\x52\x1d\xa8\x0b\xb2\x92\x46\x98\x3a\x21\x17\xac\x1a\xaa\x2b\xc9\x49\x7e\x2a\x85\x29\x15\xc9\x40\xfd\x49\x21\x4c\x5d\x52\xfb\x2c\xa1\xc2\x65\x41\x9c\x25\x11\x89\x4c\x59\x97\x9c\x08\xce\x3e\xaf\xd9\x15\xe1\xb2\x52\x98\x24\x65\xd2\x8b\x85\x89\x13\x61\x0a\x2d\x4c\x0d\x42\x0a\x84\x09\x6b\x72\xff\xba\x16\xa6\x04\x01\xa2\x1f\x02\x22\x5b\xbc\x0b\x17\x57\x68\x5b\x22\x4c\x96\x0b\x13\xa1\xef\x53\x22\x3f\x8c\x03\xfa\xa0\x68\x84\x29\x99\x98\x40\xa8\x28\xa3\xd1\xb7\xb9\x30\x25\xea\x55\x44\x92\x49\x49\x10\x82\x31\xc1\x58\x03\x56\xe2\x9a\xfa\xa0\xe1\xe0\x61\x17\x4a\x30\x6e\x41\x28\x4c\x02\xf2\x63\x3d\xfb\xa0\xe4\xb0\xb9\x1d\x81\x29\x87\x85\x5a\x70\x19\x33\x17\xb0\x83\x32\x87\x25\x8f\x82\x9b\xd1\x5a\x9f\x0a\x77\xc6\xa9\xda\x01\x50\xf6\x6c\x04\xca\xa3\x20\xc9\x82\xe4\x54\x08\x34\x38\xf5\xf2\xb5\xec\x09\x57\x01\x83\x82\x25\x83\x9a\xe2\xb9\x21\x06\x85\x2b\x82\x3d\x15\xd8\xb4\x21\x16\x8d\x38\x9e\x05\x34\xed\xb2\x31\xee\x35\x99\x30\x4d\x4e\x90\xd3\xc5\xbf\x5d\xdd\x0d\x43\x51\x11\x12\x6c\xc1\x4d\xe1\xe2\xba\x20\x78\x91\x78\xaf\x10\xa6\x4a\xc8\x1d\x71\x0f\x6d\xc8\xe0\x7a\x9a\xe0\x0a\x70\x03\x08\x40\x3c\x9b\x72\xbc\x5b\x2b\x8a\x83\x2d\x1c\x29\x72\x51\xc0\x03\xe0\x04\xcf\x2b\x45\xef\xc3\xd5\x63\xc0\x64\x40\x72\x00\x17\x80\x99\x82\x63\xeb\x9a\x65\x76\x72\x50\xbe\xe4\xb2\x45\x17\x87\x4b\x8e\x85\x39\x26\x2e\x24\xc9\x4c\x02\x82\x3c\xc0\x0b\x60\x30\xd3\x04\xf7\x32\x23\xf9\x80\x8c\xb2\xa1\xd8\x3c\x2b\x08\xca\x0a\x86\xf6\xa2\x20\x98\xb7\xef\xc5\x74\xaf\x0a\xe8\xb3\xe4\x7a\x00\x63\x51\xb0\x0f\x37\x75\x46\x90\x0a\xa8\x06\x9d\x00\xbe\x1c\x70\x33\xc6\xb6\x8e\xc3\x9c\x31\x92\x3b\xe0\x19\x37\xb9\xb8\x8f\x3e\x63\xea\x18\x0b\x41\xcf\xe8\x89\x13\xe2\xd0\x58\xcd\x3b\x30\x4a\xca\xa3\xc0\x28\x0a\x4f\x03\x46\x7d\x53\xbb\xc7\x87\x41\xc8\x45\xf1\x5e\x02\xfa\x96\xc2\xa8\x88\x68\x3b\x0c\x38\x7c\xc9\x29\xec\x80\x5f\xc1\x5f\x25\xe7\xbc\xc0\x1d\x84\x34\x59\xca\x94\x1e\x50\x7e\x9a\x54\x84\x3d\xb8\x07\x1f\x80\x8f\xaa\x90\xa9\x37\xa4\x50\x09\xef\xc2\x6f\x6d\x7e\x5d\x53\x58\x81\x70\xa8\xca\x29\x1c\x02\x55\x23\x2b\x90\x05\xd1\x34\xfc\x2f\x47\x88\xc4\xbe\x9e\x01\xa7\x72\xca\xab\x23\xce\xfb\xa1\x67\xc9\xe1\x09\xb0\x0e\x58\x55\x95\x84\x93\x69\x41\xb8\x86\xf0\xad\x96\x1c\x76\x25\x84\x77\xc0\x38\xb4\x19\xe1\x51\x85\x10\x04\x78\x53\x08\xa3\x2b\xfa\x8f\x72\x65\x45\xed\xc0\x7f\xe4\xf3\x08\x99\x74\x2e\x8c\x92\x84\x95\x21\xc2\x8f\x8a\x30\x1a\xa1\x8c\x4e\x29\x74\x04\x9e\xe0\x5d\x84\x3b\xb1\xa4\xe7\x28\x27\x4b\x61\xc2\x92\xca\x95\x11\xe1\x76\x23\xa9\x4d\x08\xc5\x80\xc7\x08\x85\xd0\xb7\xc0\xba\xbe\x70\x06\xb8\x0e\x5d\xa0\x83\x9d\x63\xa8\x1d\xf8\xe2\x34\x97\x63\x20\xc5\x29\x8c\x50\x64\x60\xd5\x61\x17\x38\x9c\x92\xc6\x61\xc5\x21\xad\x4e\x06\x0f\x83\x2a\x75\x88\x10\xa5\xaf\x9a\x20\xed\x2f\xe6\xbc\x54\x3e\x9f\x74\xf9\x3c\x12\xa3\x9a\xd9\xb0\x74\xe7\xf3\x08\xe4\xe1\x1d\x05\x27\x22\xae\x7c\xde\xad\xd2\x51\x56\xeb\x12\xc6\x56\xeb\x5e\x0b\xdb\xb3\x5a\x97\xa4\x91\x56\x7b\x40\xab\xd3\x59\xed\x90\x4a\x7f\x8a\xac\xbe\x7f\x85\xf1\xeb\xd2\x79\xa4\xa3\xe0\xb1\x0c\xb8\x1c\x3f\xf2\x58\xb2\x35\xdf\x09\xeb\x44\x6a\x9d\x95\xc4\x41\x88\x5f\x65\x48\x7c\x05\xab\xc6\xfb\x65\xc8\xb1\x5b\xc0\xf2\x4a\x2a\x5b\xb2\x85\xc3\x2b\x10\xa3\x22\x26\x96\x0d\xf1\x04\xbc\x06\x3c\x07\x0e\xb3\x31\xb9\xa6\xf4\x1a\x71\xa6\xf5\x9a\x8a\xd2\x4e\xc4\xe0\x78\x0f\x7c\x81\xd4\xde\xf2\x50\x42\x71\x2a\x38\xa0\xf3\x0a\xa4\xba\x01\xa7\xe4\x21\x73\x25\xe2\x60\xf0\xa4\x8d\x6d\x03\x6a\x43\x5c\x32\x27\x05\x34\x85\x01\xce\x46\x6c\x8d\x58\x3c\x6b\x48\x6e\x5e\x90\xe7\x55\x05\xc9\x04\x97\x83\xdf\x50\x06\xf1\x2e\x74\x8a\x39\x9d\x46\x59\xc4\xec\x2a\xe5\x78\x17\xf5\x6b\x8a\x9b\x11\x2b\x57\x88\xf3\x73\x8a\xfd\x4b\xae\x0b\xf1\x73\x1c\x93\xee\xe0\xee\x92\xb9\x17\x7d\x68\x79\x32\xa0\x76\xa0\x2f\x54\xc6\x5c\x2b\x49\x76\x1d\x12\xaf\x82\x07\x91\x67\x20\xb5\xcf\x4b\x9a\xf5\x43\x7f\xe4\x0d\xc5\xcf\x79\xf5\x98\xde\xa3\xed\xd0\x1d\xb1\x8a\x2a\xe9\x59\xc1\xdc\x8e\xf1\x7d\x18\x63\x4d\x3a\x94\x92\xbe\xdb\xe9\x84\x98\x6c\xc9\xc6\x2f\x05\xc5\x15\x09\x4f\xb1\xa4\x25\xa1\x53\xc0\x65\xac\xcc\x8a\x63\x7d\x49\x79\x0a\xb8\x1b\xe3\x65\xa7\x3c\x52\x92\x99\xf3\x94\x06\x62\x07\x3b\x0e\x31\x4d\x63\x40\x1f\xd4\x27\x6b\xea\x13\xc8\xce\xf3\x7d\xdb\xc5\x85\xbe\x54\x9c\x33\xc4\x8c\xb2\x7d\xc8\x38\xe0\x37\x47\x40\xe3\x80\x34\x8b\x8d\x83\xfb\x00\x76\xc0\x71\x40\xd6\x28\x74\x3c\xac\xd9\xa9\xe0\xf1\x80\x56\x8c\x8f\x51\x12\xbd\x2e\x40\xee\xef\xb0\x78\x29\x5a\x57\x05\x01\x1f\x92\x57\x38\x24\x40\xa8\xa3\x7a\x17\xb5\x6b\x7e\x86\x24\x00\x89\x77\xe8\x34\x60\xa7\x5e\x47\x19\xb0\x53\x1a\x1b\xf0\xc0\x3e\x95\x3d\x03\x76\xca\x1a\x69\xc0\x87\x34\x3b\x9d\x01\x0f\x6a\xd5\x11\xfc\xab\x2e\x32\xb9\x36\x00\x7d\x05\xc5\x27\x04\xb1\x48\x23\x91\xaa\x16\x1d\xc5\x27\x44\x8b\xa0\x78\x9d\xf1\xd4\x12\xcf\x50\x83\x36\x23\x50\x5e\x42\xf0\x6a\xad\x52\x91\x27\x74\x0b\x4a\x76\x4a\x2b\xa2\x74\x0e\x69\x65\x22\x79\x26\x3d\x25\xe8\x46\xba\x08\x2a\x4d\x1b\x9e\xfe\x61\x9a\x04\x85\x21\x24\x00\x5d\x69\x86\x70\x9b\x8e\x81\x82\x12\x9a\x6e\x4a\x35\xa5\x9f\xa0\x2a\xb4\x21\x0f\x88\x6a\x0b\x0e\x27\x10\x5a\xe0\x3d\xe8\x02\x2a\x02\xed\xa0\x9d\x36\xdd\xe5\x20\xd9\xb6\x43\x12\x45\x82\x56\x41\x55\x48\x09\x41\xb7\x29\x28\x32\x23\xfd\xf1\xbf\x41\xe8\x12\xd0\x34\x19\x28\x1a\x34\x0a\xda\x2d\xd9\xbb\x23\xfe\x0e\xef\x4e\x39\x34\x80\x6e\x65\x97\x1e\x37\x44\x65\x75\x49\x7d\x29\x2b\x9a\x22\x40\x3a\x0b\xda\x43\x1f\x21\x6c\x41\x3b\x4b\x5e\xc2\x56\x9c\x00\x80\xae\x41\x8f\x08\xbf\x80\x10\x48\x6b\xed\x4a\x43\x42\x63\x10\x56\xc2\x84\x8a\xe8\x54\x2a\x61\x74\xc9\xcb\xdf\x19\xf5\x05\xca\xca\x84\x56\x04\x50\xb7\x9d\x3e\xe4\x25\x6f\xd0\x37\xda\x0a\xfa\xac\x52\x1a\x2f\x84\x5e\x7d\x54\x0a\x6a\x4e\x43\x5a\xd9\x41\x28\x53\xa9\x7e\x24\x1a\xb4\xd0\x23\xb0\x68\x50\x9e\x45\xa3\x03\x9b\xe2\x76\xf0\x68\x50\xde\x28\x44\x1a\xa3\xe1\xa9\x30\xe9\xa0\x6e\x0f\xa8\xf4\xca\xb0\xd4\xb7\xe9\xf0\x25\xf3\x65\xa5\x28\x6a\xc5\x85\x28\x1f\xdf\xed\x0c\x94\x1e\x26\x58\x44\xdd\x3a\xa4\x48\xba\xe6\x19\xf6\x7e\xb3\x1e\xd0\xf0\x28\xb3\x1e\x90\xc7\x66\x3d\xb8\x91\x73\xcf\xac\x07\xe4\x8d\x34\xeb\xc3\x1a\x9e\xce\xac\x0f\xe8\xd6\x45\x8b\xc1\x6b\x5a\x75\xff\x3e\xd9\xaf\xcf\xa6\x91\xa9\x02\xce\x8b\x6c\x6b\x56\x38\xa1\x2c\x0f\x10\x8d\x4c\xab\x01\x7c\x17\x64\x97\xa0\x3b\xbb\xeb\x89\x57\x40\x5c\x74\x1b\x87\xbc\x78\x9b\xd2\x6e\x24\x50\x45\xca\x59\x20\xe8\xb2\xe1\x99\x61\x3b\x33\x2d\x79\x15\xa7\xe2\xcc\x3a\x24\x9f\xc9\x15\x65\xd1\x31\xef\xf4\x2a\x98\x1a\x90\xcd\xd9\xdd\x60\x29\x51\x0d\xea\x4c\x79\x85\xcb\x52\xab\xa4\x8c\x14\x14\x81\x0c\xdd\xce\xfa\xe6\xbc\x40\xce\x34\x8f\xf6\xd9\xb9\xaa\x80\xa8\x2a\xe6\x6c\xd5\x6e\x0e\x08\x29\xab\xd3\x4c\x47\x8a\x69\x0e\x54\x0c\x3f\xb6\xbb\xc7\x42\x6a\x13\xa8\xd1\x66\xc2\x31\xd5\x05\x1a\x83\xcf\x43\x07\x9b\x4d\x6b\x9a\xe1\x05\xe5\xda\xd9\x75\x0e\x61\xf2\x98\xde\xc9\x0a\xaa\x1f\xe1\x08\xfa\x05\x99\x32\x42\x1b\x50\x6f\xc4\xf8\x11\xe7\x44\xd1\xc8\x2e\x4b\x60\x43\x4c\xf4\x1e\xd6\x14\x2e\x41\x5f\x64\xf0\x78\x86\xac\x14\x74\x1b\x70\x76\x0e\xcc\x41\x68\x82\x31\x88\x22\x0a\x5b\x90\xbd\xda\x7a\x6b\xa2\x77\xdb\xee\x84\xc2\x0a\x15\x13\x0e\x61\x9c\x31\xee\xe8\x53\x84\x34\x75\xc1\xd9\x7b\x4c\x33\xd8\xe8\x5f\x5b\x27\x87\x26\x76\xf7\x5c\x48\x63\x0a\xaa\x57\xbc\x01\x02\xb6\x52\x21\x4b\x96\x34\x9e\x29\x7f\x8f\x78\xae\x10\x21\x09\x6c\xab\x29\x28\xec\x40\x9b\xba\xcd\x10\x71\x44\xe3\x83\x50\x0a\xe1\x17\xda\x1f\xf2\xee\xba\x30\xa6\xfe\x0d\xc2\x7d\x1c\x6d\x78\x15\x02\xfd\x0c\x9b\x84\x5d\x3d\xbe\xf7\x88\xa3\x03\x3e\x75\x04\x8a\x0e\x48\xb3\x18\x3a\xb8\xd3\x7d\x07\x41\x07\x64\x8d\xc2\xcf\xc3\x9a\x9d\x0a\x3d\x0f\x68\xc5\xd8\x19\x67\xf1\xeb\x82\xe7\xfe\x19\x82\x97\xdc\x10\xe7\x5a\xce\x1f\xda\x18\x87\xb2\x88\xf1\x51\x17\x1c\x1b\x06\xdf\x17\x0c\x0c\xe8\x76\x94\x11\x3b\xa5\xb1\x11\x0f\x9c\xc6\xd8\x33\x62\xa7\xac\x91\x46\x7c\x48\xb3\xd3\x19\xf1\xa0\x56\x5d\x5c\xfb\xec\x55\xe1\x53\xda\xf0\xee\x31\x97\xaf\xdb\x7c\xfd\x9c\x0d\x29\xae\x25\xa0\x6e\x33\x4a\xce\x13\xeb\xdd\x46\xec\x87\x8d\x28\xdd\xfe\xb3\x94\xb2\xdf\xa2\xa0\xd0\x02\x54\x1d\x66\x94\x09\xc2\x13\x90\xf5\x21\xb3\x2c\x78\x93\xb4\x9d\x38\xae\xc8\x33\x6c\xf8\xc1\x8b\xac\xa0\xf0\x88\xa9\x02\xef\xa2\x4c\xd3\xe9\xda\xb3\x11\x1a\x61\x02\xda\x2b\x43\xa2\xe1\xb8\xe8\xf7\xa0\xde\x9e\x3d\xc2\x77\x7a\xe5\x58\xaf\x71\x1c\x51\xda\xf1\x97\xde\xf2\xa3\x3c\x65\x48\x83\x53\xf9\x88\x53\x07\xf6\x8e\x34\x7b\x5d\xef\xd8\x3b\xe9\xf5\x92\x7b\xb6\x0e\xb9\xc8\xe0\x7e\xad\x1d\x37\x09\xd8\xbc\xb7\xdd\xc4\xb5\xd7\xbf\xe9\xf6\x64\x15\x14\xcd\x47\x4e\x13\x77\x75\xcf\x51\x76\xee\x12\xc6\xc6\xee\x3e\x74\xb7\x67\xf1\x2e\x49\x23\xcd\xfe\x80\x56\xa7\xb3\xfd\x21\x95\xd8\x01\x92\x57\xcd\x0f\x9f\x1c\x65\x7c\x49\xd3\x1f\x5a\x49\x78\x0e\x43\xa4\x31\x4f\x9e\x70\x6c\x64\xb7\x2b\xd5\x94\x88\xe2\xc2\x73\x5b\x36\xa2\xb2\xb8\x6c\x7b\x52\x6e\x6f\xdc\x1f\x47\xd9\xa5\x40\xc9\xf3\xc9\xbc\x9d\xb1\xcf\x45\xfa\x3a\xf0\x08\xe7\xe8\x13\x63\xdd\xa2\xff\xac\xe9\x8e\x43\xf4\x95\x1e\xe5\x0a\x03\xad\x3f\x95\x13\xb8\x14\xe8\xcc\xff\x55\xf1\x7f\xf7\xbc\xee\xcb\x45\x47\x63\xec\x7f\x2c\xfc\x1f\xf2\x01\x97\x8d\x2b\x5e\x37\xa8\x02\x9e\x7c\x70\xec\x7c\xef\xed\xa5\xa3\x8c\xbc\x47\x0e\x5b\x79\xef\xb9\xe9\x3d\x33\xef\x29\x3f\xd2\xce\xdd\x1a\x9c\xce\xd0\x1d\x3a\x74\xc9\xec\xab\xe6\x01\xfb\xc7\xcf\xff\x7b\x8e\x61\xaa\xe2\x31\x07\x56\x25\xfd\xdf\x3d\x8a\xd9\xf9\x11\x6c\x5f\xa9\xa7\x6d\x81\x6c\xab\x53\xc8\xeb\x51\xd5\xd3\x4c\xc0\x4e\xd8\x05\xf4\x6e\x99\x51\xf8\xa4\x53\x9a\xd8\x2a\x38\x24\xb3\x07\xd4\xf8\x42\x36\x62\xb7\xa0\xf0\x86\xb6\x22\xa3\xec\xc3\x4e\x88\xf2\x3a\xa0\xe6\x77\xcb\xe4\x51\x5e\xc6\xdb\x81\x86\x8e\x61\xe6\xbc\x76\xd8\xf9\x78\xe6\x98\xcc\x77\x8c\xe7\x11\x5e\xe9\x90\x64\xfd\xd2\xf9\xa3\x05\x3b\x9e\xe9\x90\x31\xca\x37\x87\x35\x39\x95\x77\x0e\x68\xd2\xe5\xe9\xc1\xab\x46\x62\xbd\x3f\x01\xf1\x92\xb3\x4d\x7d\x5e\xe6\x3c\x7e\x99\x10\xbb\x21\x07\x8f\x1b\xf7\x76\xcd\x21\xa5\x8e\x32\x55\xb7\x38\xb6\xd7\xa1\xdf\xd1\xd8\x33\x5a\xb7\xb4\x91\x96\x7b\x50\xbb\xd3\x99\xef\xb0\x62\x7f\x8a\xad\x9b\xdb\xbf\x51\x72\x3c\xbb\xc0\xde\x54\xc0\x4b\x25\x7c\x56\x32\xee\x98\x21\x25\xd4\x87\xcd\x6a\x4d\x11\xba\x2e\x69\xaa\xbe\xd6\xb4\xd3\x23\x4e\x19\xe9\x19\x9d\x43\x5e\xaa\xb1\x07\xe1\x03\xb2\x57\xc8\x42\x79\xcd\xb6\x0b\x04\x97\x9a\xda\x06\x74\x4e\xf9\x10\x12\x64\x95\xbc\x2b\xa3\xe1\x73\x8d\xdd\xa6\xc6\x30\xa7\xe5\x0a\x30\x4f\x5d\xd2\xae\x83\x9c\x97\x74\x2a\x3e\x18\xa1\xf8\xf0\x52\xa8\x29\xca\x8a\x12\xd2\x0b\x51\x5b\xe7\x67\xd0\xb5\x0a\x09\xf5\x63\x5e\x76\xea\xdb\xbd\xa0\x73\x3e\x5f\x1a\x52\xa4\x97\x38\x66\x76\xf7\x46\xe1\x08\x47\xdb\x93\x61\xbd\xab\xe7\x37\x68\x76\x5c\x6a\xaf\xdc\x28\x3f\x72\xb5\xf8\x54\xce\xd3\xdb\x6e\xf6\x98\xe7\x1f\x20\xcc\xf2\x34\x88\xf3\xf8\x44\x1e\xf3\xf4\xe7\x7b\x5e\xfa\xc0\x60\xdf\x0f\x5c\x3c\x37\xf3\xb0\x9c\xa1\x78\xb7\x51\xb7\x85\x81\xa3\x30\x57\xe6\x91\xf2\x39\xea\x2c\xa4\x25\xcc\xc8\x71\x08\xce\xd1\x3f\x47\x59\x74\xaf\x24\xb6\x6b\xc7\x8f\x28\xed\x59\x77\xaf\x8c\x91\x36\x3e\xa4\xc9\xe9\x2c\xdd\xa9\x49\x97\x85\xbc\xaa\xbd\xf7\xfe\x22\xd5\xcb\x25\xdd\xff\x3f\x23\xfb\xbf\x75\x46\xd6\x6d\x4e\x47\x20\x84\x5b\x98\x05\x89\xf2\x5a\xfe\x27\x00\x00\xff\xff\xbf\x6e\x6a\x2a\x00\x50\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 36864, mode: os.FileMode(436), modTime: time.Unix(1517204633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0_create_users_table.up.sql": _0_create_users_tableUpSql,
	"0_drop_users_table.down.sql": _0_drop_users_tableDownSql,
	"10_add_reports_delete_cascade.up.sql": _10_add_reports_delete_cascadeUpSql,
	"10_remove_reports_delete_cascade.down.sql": _10_remove_reports_delete_cascadeDownSql,
	"1_create_events_table.up.sql": _1_create_events_tableUpSql,
	"1_drop_events_table.down.sql": _1_drop_events_tableDownSql,
	"2_create_matches_table.up.sql": _2_create_matches_tableUpSql,
	"2_drop_matches_table.down.sql": _2_drop_matches_tableDownSql,
	"3_create_alliances_table.up.sql": _3_create_alliances_tableUpSql,
	"3_drop_alliances_table.down.sql": _3_drop_alliances_tableDownSql,
	"4_create_reports_table.up.sql": _4_create_reports_tableUpSql,
	"4_drop_reports_table.down.sql": _4_drop_reports_tableDownSql,
	"5_add_event_type.up.sql": _5_add_event_typeUpSql,
	"5_remove_event_type.down.sql": _5_remove_event_typeDownSql,
	"6_add_bluewon.down.sql": _6_add_bluewonDownSql,
	"6_remove_bluewon.up.sql": _6_remove_bluewonUpSql,
	"7_add_photos_table.up.sql": _7_add_photos_tableUpSql,
	"7_remove_photos_table.down.sql": _7_remove_photos_tableDownSql,
	"8_add_isdmin.up.sql": _8_add_isdminUpSql,
	"8_remove_isadmin.down.sql": _8_remove_isadminDownSql,
	"9_add_reports_cascade.up.sql": _9_add_reports_cascadeUpSql,
	"9_remove_reports_cascade.down.sql": _9_remove_reports_cascadeDownSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0_create_users_table.up.sql": &bintree{_0_create_users_tableUpSql, map[string]*bintree{}},
	"0_drop_users_table.down.sql": &bintree{_0_drop_users_tableDownSql, map[string]*bintree{}},
	"10_add_reports_delete_cascade.up.sql": &bintree{_10_add_reports_delete_cascadeUpSql, map[string]*bintree{}},
	"10_remove_reports_delete_cascade.down.sql": &bintree{_10_remove_reports_delete_cascadeDownSql, map[string]*bintree{}},
	"1_create_events_table.up.sql": &bintree{_1_create_events_tableUpSql, map[string]*bintree{}},
	"1_drop_events_table.down.sql": &bintree{_1_drop_events_tableDownSql, map[string]*bintree{}},
	"2_create_matches_table.up.sql": &bintree{_2_create_matches_tableUpSql, map[string]*bintree{}},
	"2_drop_matches_table.down.sql": &bintree{_2_drop_matches_tableDownSql, map[string]*bintree{}},
	"3_create_alliances_table.up.sql": &bintree{_3_create_alliances_tableUpSql, map[string]*bintree{}},
	"3_drop_alliances_table.down.sql": &bintree{_3_drop_alliances_tableDownSql, map[string]*bintree{}},
	"4_create_reports_table.up.sql": &bintree{_4_create_reports_tableUpSql, map[string]*bintree{}},
	"4_drop_reports_table.down.sql": &bintree{_4_drop_reports_tableDownSql, map[string]*bintree{}},
	"5_add_event_type.up.sql": &bintree{_5_add_event_typeUpSql, map[string]*bintree{}},
	"5_remove_event_type.down.sql": &bintree{_5_remove_event_typeDownSql, map[string]*bintree{}},
	"6_add_bluewon.down.sql": &bintree{_6_add_bluewonDownSql, map[string]*bintree{}},
	"6_remove_bluewon.up.sql": &bintree{_6_remove_bluewonUpSql, map[string]*bintree{}},
	"7_add_photos_table.up.sql": &bintree{_7_add_photos_tableUpSql, map[string]*bintree{}},
	"7_remove_photos_table.down.sql": &bintree{_7_remove_photos_tableDownSql, map[string]*bintree{}},
	"8_add_isdmin.up.sql": &bintree{_8_add_isdminUpSql, map[string]*bintree{}},
	"8_remove_isadmin.down.sql": &bintree{_8_remove_isadminDownSql, map[string]*bintree{}},
	"9_add_reports_cascade.up.sql": &bintree{_9_add_reports_cascadeUpSql, map[string]*bintree{}},
	"9_remove_reports_cascade.down.sql": &bintree{_9_remove_reports_cascadeDownSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

