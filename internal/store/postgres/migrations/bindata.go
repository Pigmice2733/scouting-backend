// Code generated by go-bindata.
// sources:
// 0_create_users_table.up.sql
// 0_drop_users_table.down.sql
// 10_add_reports_delete_cascade.up.sql
// 10_remove_reports_delete_cascade.down.sql
// 11_add_lat_long.up.sql
// 11_drop_lat_long.down.sql
// 12_add_end_date_rename_start_date.up.sql
// 12_drop_end_date_rename_start_date.down.sql
// 13_add_notes_field.up.sql
// 13_remove_notes_field.down.sql
// 14_add_youtube_url_table.up.sql
// 14_remove_youtube_url.down.sql
// 15_add_is_blue_reports.down.sql
// 15_remove_is_blue_reports.up.sql
// 1_create_events_table.up.sql
// 1_drop_events_table.down.sql
// 2_create_matches_table.up.sql
// 2_drop_matches_table.down.sql
// 3_create_alliances_table.up.sql
// 3_drop_alliances_table.down.sql
// 4_create_reports_table.up.sql
// 4_drop_reports_table.down.sql
// 5_add_event_type.up.sql
// 5_remove_event_type.down.sql
// 6_add_bluewon.down.sql
// 6_remove_bluewon.up.sql
// 7_add_photos_table.up.sql
// 7_remove_photos_table.down.sql
// 8_add_isdmin.up.sql
// 8_remove_isadmin.down.sql
// 9_add_reports_cascade.up.sql
// 9_remove_reports_cascade.down.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0_create_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\x56\xd0\xe0\xe5\xe2\x04\xb1\xf2\x12\x73\x53\x15\x42\x5c\x23\x42\xc0\x4a\xfc\x42\x7d\x7c\x14\x42\xfd\x3c\x03\x43\x5d\x75\x78\xb9\x38\x33\x12\x8b\x33\x52\x53\x02\x12\x8b\x8b\xcb\xf3\x8b\x52\x50\x95\xf1\x72\x69\x02\x02\x00\x00\xff\xff\x68\x63\x4e\x5a\x65\x00\x00\x00")

func _0_create_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_create_users_tableUpSql,
		"0_create_users_table.up.sql",
	)
}

func _0_create_users_tableUpSql() (*asset, error) {
	bytes, err := _0_create_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_create_users_table.up.sql", size: 101, mode: os.FileMode(438), modTime: time.Unix(1514577584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0_drop_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\xbd\x6d\xc5\x8d\x11\x00\x00\x00")

func _0_drop_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_drop_users_tableDownSql,
		"0_drop_users_table.down.sql",
	)
}

func _0_drop_users_tableDownSql() (*asset, error) {
	bytes, err := _0_drop_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_drop_users_table.down.sql", size: 17, mode: os.FileMode(438), modTime: time.Unix(1514577584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __10_add_reports_delete_cascadeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcb\xbd\x0a\xc2\x30\x14\xc5\xf1\x5d\xf0\x1d\xce\xd8\x3e\x83\xd3\x35\xf7\x54\x8a\x25\x29\x37\x71\x70\x2a\x0e\x71\x11\x3f\x48\x74\xf0\xed\xa5\x48\x71\x71\x39\x07\x7e\xf0\x97\x21\xd1\x90\x64\x3b\x10\x25\x3f\xee\xe5\x59\xa1\x16\x46\xb8\xe0\x63\x32\xe9\x7d\x5a\x7c\xfa\x7e\x2e\xd3\xf9\x92\xdf\x9b\xf5\xea\x5f\x2b\xaa\xe8\x82\xb1\xdf\x79\xec\x79\x6c\x96\xa6\x85\xb1\xa3\xd1\x3b\x46\xbc\x6a\x2e\xb5\x99\xf7\x76\xba\xe6\x16\xc1\xe3\x30\xaa\x24\xc2\x49\x74\xa2\x9c\x45\x39\xf0\x27\x9f\x00\x00\x00\xff\xff\xd8\x28\xf8\xdd\xa8\x00\x00\x00")

func _10_add_reports_delete_cascadeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__10_add_reports_delete_cascadeUpSql,
		"10_add_reports_delete_cascade.up.sql",
	)
}

func _10_add_reports_delete_cascadeUpSql() (*asset, error) {
	bytes, err := _10_add_reports_delete_cascadeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10_add_reports_delete_cascade.up.sql", size: 168, mode: os.FileMode(438), modTime: time.Unix(1519689196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __10_remove_reports_delete_cascadeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcb\xbd\x0a\xc2\x40\x10\xc4\xf1\x5e\xf0\x1d\xa6\x4c\x9e\xc1\x6a\xbd\x9b\x48\x30\xdc\x85\xcd\x5a\x58\x05\x8b\xb5\x11\x3f\xb8\xd3\xc2\xb7\x17\x91\x74\x36\x33\xf0\x87\x9f\x0c\x46\x85\xc9\x76\x20\x8a\x3f\xee\xe5\x59\x11\x35\x8f\x08\x39\x4d\xa6\xd2\x27\x5b\xfa\xfc\x7b\x2f\xf3\xf9\xe2\xef\xcd\x7a\xf5\xcf\x4a\x8c\xe8\xb2\xb2\xdf\x25\xec\x79\x6c\x16\xd3\x42\xd9\x51\x99\x02\x27\xbc\xaa\x97\xda\x7c\xf7\x76\xba\x7a\x8b\x9c\x70\x18\xa3\x18\x11\x64\x0a\x12\xf9\x09\x00\x00\xff\xff\x29\x43\x4d\x2e\x96\x00\x00\x00")

func _10_remove_reports_delete_cascadeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__10_remove_reports_delete_cascadeDownSql,
		"10_remove_reports_delete_cascade.down.sql",
	)
}

func _10_remove_reports_delete_cascadeDownSql() (*asset, error) {
	bytes, err := _10_remove_reports_delete_cascadeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10_remove_reports_delete_cascade.down.sql", size: 150, mode: os.FileMode(438), modTime: time.Unix(1519689196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __11_add_lat_longUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x49\x2c\x51\x28\x4a\x4d\xcc\xb1\xe6\xe5\x22\xa0\x30\x3f\x2f\x1d\xa6\x12\x10\x00\x00\xff\xff\xc1\x8d\x93\x0d\x53\x00\x00\x00")

func _11_add_lat_longUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__11_add_lat_longUpSql,
		"11_add_lat_long.up.sql",
	)
}

func _11_add_lat_longUpSql() (*asset, error) {
	bytes, err := _11_add_lat_longUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "11_add_lat_long.up.sql", size: 83, mode: os.FileMode(438), modTime: time.Unix(1519689196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __11_drop_lat_longDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x49\x2c\xb1\xe6\xe5\x22\xa4\x28\x3f\x2f\xdd\x9a\x97\x0b\x10\x00\x00\xff\xff\x2e\x53\x8b\x5d\x4b\x00\x00\x00")

func _11_drop_lat_longDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__11_drop_lat_longDownSql,
		"11_drop_lat_long.down.sql",
	)
}

func _11_drop_lat_longDownSql() (*asset, error) {
	bytes, err := _11_drop_lat_longDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "11_drop_lat_long.down.sql", size: 75, mode: os.FileMode(438), modTime: time.Unix(1519689196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __12_add_end_date_rename_start_dateUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xcd\x4b\x71\x49\x2c\x49\x55\x08\xf1\xf4\x75\x0d\x0e\x71\xf4\x0d\x08\x89\x52\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\xb1\xe6\xe5\x02\x04\x00\x00\xff\xff\xd5\x45\x9f\x5c\x3d\x00\x00\x00")

func _12_add_end_date_rename_start_dateUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__12_add_end_date_rename_start_dateUpSql,
		"12_add_end_date_rename_start_date.up.sql",
	)
}

func _12_add_end_date_rename_start_dateUpSql() (*asset, error) {
	bytes, err := _12_add_end_date_rename_start_dateUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "12_add_end_date_rename_start_date.up.sql", size: 61, mode: os.FileMode(438), modTime: time.Unix(1519689196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __12_drop_end_date_rename_start_dateDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xcd\x4b\x71\x49\x2c\x49\xb5\xe6\xe5\x02\x04\x00\x00\xff\xff\x2c\x14\xb0\x86\x29\x00\x00\x00")

func _12_drop_end_date_rename_start_dateDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__12_drop_end_date_rename_start_dateDownSql,
		"12_drop_end_date_rename_start_date.down.sql",
	)
}

func _12_drop_end_date_rename_start_dateDownSql() (*asset, error) {
	bytes, err := _12_drop_end_date_rename_start_dateDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "12_drop_end_date_rename_start_date.down.sql", size: 41, mode: os.FileMode(438), modTime: time.Unix(1519689196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __13_add_notes_fieldUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\xcb\x2f\x49\x2d\x56\x08\x71\x8d\x08\x01\x04\x00\x00\xff\xff\xfe\xf0\xf7\xb7\x29\x00\x00\x00")

func _13_add_notes_fieldUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__13_add_notes_fieldUpSql,
		"13_add_notes_field.up.sql",
	)
}

func _13_add_notes_fieldUpSql() (*asset, error) {
	bytes, err := _13_add_notes_fieldUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "13_add_notes_field.up.sql", size: 41, mode: os.FileMode(438), modTime: time.Unix(1520147936, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __13_remove_notes_fieldDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\xcb\x2f\x49\x2d\x06\x04\x00\x00\xff\xff\xd9\x75\x26\xc9\x25\x00\x00\x00")

func _13_remove_notes_fieldDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__13_remove_notes_fieldDownSql,
		"13_remove_notes_field.down.sql",
	)
}

func _13_remove_notes_fieldDownSql() (*asset, error) {
	bytes, err := _13_remove_notes_fieldDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "13_remove_notes_field.down.sql", size: 37, mode: os.FileMode(438), modTime: time.Unix(1520147936, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __14_add_youtube_url_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xa8\xcc\x2f\x2d\x29\x4d\x4a\x0d\x0d\xf2\x51\x08\x71\x8d\x08\x01\x04\x00\x00\xff\xff\x90\x0a\x4c\xbe\x2e\x00\x00\x00")

func _14_add_youtube_url_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__14_add_youtube_url_tableUpSql,
		"14_add_youtube_url_table.up.sql",
	)
}

func _14_add_youtube_url_tableUpSql() (*asset, error) {
	bytes, err := _14_add_youtube_url_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "14_add_youtube_url_table.up.sql", size: 46, mode: os.FileMode(438), modTime: time.Unix(1520147936, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __14_remove_youtube_urlDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xa8\xcc\x2f\x2d\x29\x4d\x4a\x0d\x0d\xf2\x01\x04\x00\x00\xff\xff\x16\xd5\x03\x4c\x2a\x00\x00\x00")

func _14_remove_youtube_urlDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__14_remove_youtube_urlDownSql,
		"14_remove_youtube_url.down.sql",
	)
}

func _14_remove_youtube_urlDownSql() (*asset, error) {
	bytes, err := _14_remove_youtube_urlDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "14_remove_youtube_url.down.sql", size: 42, mode: os.FileMode(438), modTime: time.Unix(1520147936, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __15_add_is_blue_reportsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\x80\x30\x0c\x05\xd0\x55\xfe\x2a\xa9\x8d\xa7\x6f\x02\x92\x0e\xe0\xa1\x82\x50\x50\x1a\xdd\xdf\x27\x0c\xdd\x11\x52\xa8\x98\xfd\xb9\xe7\x9b\x90\x5a\xb1\x38\xdb\x66\xb8\xb2\x8c\xaf\xa3\xb8\x53\xc5\x60\x1e\xb0\x46\xa2\xea\x2a\x8d\x81\xf3\x18\xd9\xff\x00\x00\x00\xff\xff\x9b\x96\x86\xb6\x44\x00\x00\x00")

func _15_add_is_blue_reportsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__15_add_is_blue_reportsDownSql,
		"15_add_is_blue_reports.down.sql",
	)
}

func _15_add_is_blue_reportsDownSql() (*asset, error) {
	bytes, err := _15_add_is_blue_reportsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "15_add_is_blue_reports.down.sql", size: 68, mode: os.FileMode(438), modTime: time.Unix(1520398063, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __15_remove_is_blue_reportsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x2c\x76\xca\x29\x4d\xe5\xe5\x02\x04\x00\x00\xff\xff\x0c\x67\xd8\xb6\x28\x00\x00\x00")

func _15_remove_is_blue_reportsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__15_remove_is_blue_reportsUpSql,
		"15_remove_is_blue_reports.up.sql",
	)
}

func _15_remove_is_blue_reportsUpSql() (*asset, error) {
	bytes, err := _15_remove_is_blue_reportsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "15_remove_is_blue_reports.up.sql", size: 40, mode: os.FileMode(438), modTime: time.Unix(1520397899, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_events_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x2d\x4b\xcd\x2b\x29\x56\xd0\xe0\xe5\xe2\xcc\x4e\xad\x54\x08\x71\x8d\x08\x51\x08\x08\xf2\xf4\x75\x0c\x8a\x54\xf0\x76\x8d\xd4\xe1\xe5\xe2\xcc\x4b\xcc\x4d\x85\x48\x80\xf4\xf9\x85\xfa\xf8\x80\x44\x8b\x33\xf2\x8b\x4a\xfc\x60\x52\x20\x91\x94\xc4\x92\x54\x85\x10\x4f\x5f\xd7\xe0\x10\x47\xdf\x80\x90\x28\xb8\x72\x5e\x2e\x4d\x40\x00\x00\x00\xff\xff\xd4\x32\x45\x65\x82\x00\x00\x00")

func _1_create_events_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_events_tableUpSql,
		"1_create_events_table.up.sql",
	)
}

func _1_create_events_tableUpSql() (*asset, error) {
	bytes, err := _1_create_events_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_events_table.up.sql", size: 130, mode: os.FileMode(438), modTime: time.Unix(1514577584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_drop_events_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x06\x04\x00\x00\xff\xff\x27\xe5\x89\x64\x11\x00\x00\x00")

func _1_drop_events_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_drop_events_tableDownSql,
		"1_drop_events_table.down.sql",
	)
}

func _1_drop_events_tableDownSql() (*asset, error) {
	bytes, err := _1_drop_events_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_drop_events_table.down.sql", size: 17, mode: os.FileMode(438), modTime: time.Unix(1514577584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_create_matches_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xcf\x6a\x84\x30\x10\xc7\xf1\xf3\x0a\xbe\xc3\x1c\x15\xfa\x12\xd9\x65\x5c\x82\x31\x91\x64\x4a\xb5\x37\x1b\x07\x2a\xfe\x2b\x1a\x0b\xbe\x7d\x49\xc1\x53\x7b\xfd\x7e\x66\xe0\xf7\xb0\x28\x08\x81\xc4\x5d\x21\xc8\x02\xb4\x21\xc0\x46\x3a\x72\x30\x77\xc1\x7f\xf2\x0e\x59\x9a\xdc\x46\x3e\x81\xb0\x21\xa8\xad\xac\x84\x6d\xa1\xc4\xf6\x25\x4d\x6e\xfc\xcd\x4b\x28\x2f\x8c\xcf\xfa\x55\xa9\x28\x5f\x1b\xf7\x83\x0f\xdc\xd3\x30\x33\x90\xac\xd0\x91\xa8\x6a\x7a\x8f\xd8\xf9\x70\x74\xd3\x7f\xf2\x31\x1d\xfc\xb6\x2e\x70\x37\x46\xa1\xd0\x31\x6d\xdc\x3b\xbf\x6e\x0c\x52\x13\x3e\xd1\x5e\x67\x7f\x62\x61\x2c\xca\xa7\x8e\xdb\xb2\x6b\x58\x0e\x16\x0b\xb4\xa8\x1f\xe8\xe0\x37\xee\xd9\xc8\x67\x9e\x26\xf9\x4f\x00\x00\x00\xff\xff\x29\xff\xf9\xa3\xfb\x00\x00\x00")

func _2_create_matches_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_create_matches_tableUpSql,
		"2_create_matches_table.up.sql",
	)
}

func _2_create_matches_tableUpSql() (*asset, error) {
	bytes, err := _2_create_matches_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_create_matches_table.up.sql", size: 251, mode: os.FileMode(438), modTime: time.Unix(1514577584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_drop_matches_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x06\x04\x00\x00\xff\xff\xed\x06\x12\x35\x12\x00\x00\x00")

func _2_drop_matches_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_drop_matches_tableDownSql,
		"2_drop_matches_table.down.sql",
	)
}

func _2_drop_matches_tableDownSql() (*asset, error) {
	bytes, err := _2_drop_matches_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_drop_matches_table.down.sql", size: 18, mode: os.FileMode(438), modTime: time.Unix(1514577584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_create_alliances_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x41\xca\x83\x30\x18\x44\xd7\x0a\xde\x61\x96\x06\xbc\x84\xca\xf8\x13\x0c\x09\x7f\x8c\x60\x97\x56\x3e\xa8\x54\x5d\xd4\xba\xf0\xf6\xa5\x96\x16\x4a\xb7\x33\xef\xbd\xd2\x33\x0f\x44\xc8\x0b\x43\xe8\x0a\xd6\x05\xb0\xd3\x4d\x68\xd0\x4f\xd3\xd8\x2f\x83\xac\x48\x93\x38\x9a\xfb\xfb\x70\xa9\x65\x47\x60\x17\x0e\xcc\xb6\xc6\x64\x49\x1c\x8d\x6b\x31\x6d\x82\xc2\x39\xc3\xdc\x7e\x5d\xcb\x36\x9f\xe5\xf6\xab\x54\xce\x53\xff\x59\xd4\x3c\xa5\xef\xb0\x82\x67\x45\x4f\x5b\xb2\xc1\x31\xca\x9a\x5e\x65\x57\x4f\xa1\xb5\xfa\xbf\xe5\x87\xcd\xf0\x2a\xab\x24\x56\x8f\x00\x00\x00\xff\xff\x36\x10\xd8\xc5\xc2\x00\x00\x00")

func _3_create_alliances_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_create_alliances_tableUpSql,
		"3_create_alliances_table.up.sql",
	)
}

func _3_create_alliances_tableUpSql() (*asset, error) {
	bytes, err := _3_create_alliances_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_create_alliances_table.up.sql", size: 194, mode: os.FileMode(438), modTime: time.Unix(1514577584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_drop_alliances_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xcc\xc9\xc9\x4c\xcc\x4b\x4e\x2d\x06\x04\x00\x00\xff\xff\x17\xe1\x40\xdc\x14\x00\x00\x00")

func _3_drop_alliances_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_drop_alliances_tableDownSql,
		"3_drop_alliances_table.down.sql",
	)
}

func _3_drop_alliances_tableDownSql() (*asset, error) {
	bytes, err := _3_drop_alliances_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_drop_alliances_table.down.sql", size: 20, mode: os.FileMode(438), modTime: time.Unix(1514577584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_create_reports_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x6a\xc5\x20\x14\x44\xd7\x11\xfc\x87\xbb\x34\xe0\x4f\x24\x8f\x9b\x22\x4f\x94\x1a\x03\xaf\x4b\x29\x17\x5a\xda\xa4\x45\x4d\x21\x7f\x5f\x92\x20\x34\xd8\x8d\xc8\xcc\x9c\x71\xbc\x39\xec\x3c\x82\xef\x7a\x8d\xa0\x06\x30\xd6\x03\x3e\xd4\xe8\x47\x88\xf4\xfd\x15\x73\x02\xc1\x59\x73\xde\x29\x82\xc7\x87\x3f\x42\x66\xd2\x5a\x72\xd6\xd0\x0f\x2d\xf9\x4e\x5b\xed\xcc\x21\xbf\xbe\xfd\xeb\xbc\xa7\xfe\x73\x25\xe8\xad\xd5\xd8\x99\x8b\x95\x29\xcc\x35\x90\x72\xc8\xa9\x96\x27\xa3\x9e\x27\x14\x65\x82\x84\xf2\xa4\x84\xbd\xa7\x95\x9c\x01\x0c\xd6\xa1\x7a\x32\x70\xc7\x17\x51\xbe\xd1\x82\xc3\x01\x1d\x9a\x1b\x8e\xb0\x26\x8a\x49\xec\xe7\x12\x66\xda\xa1\xe6\x2f\x53\xda\x2f\xcc\x21\x26\xf1\x41\x5b\x95\x2f\x1b\x2e\xf9\x43\xa4\x13\xe0\xac\xfd\x0d\x00\x00\xff\xff\xbc\xe6\xeb\x0a\x76\x01\x00\x00")

func _4_create_reports_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_create_reports_tableUpSql,
		"4_create_reports_table.up.sql",
	)
}

func _4_create_reports_tableUpSql() (*asset, error) {
	bytes, err := _4_create_reports_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_create_reports_table.up.sql", size: 374, mode: os.FileMode(438), modTime: time.Unix(1514577584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_drop_reports_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\xb6\x06\x04\x00\x00\xff\xff\x55\x5c\x72\x90\x13\x00\x00\x00")

func _4_drop_reports_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_drop_reports_tableDownSql,
		"4_drop_reports_table.down.sql",
	)
}

func _4_drop_reports_tableDownSql() (*asset, error) {
	bytes, err := _4_drop_reports_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_drop_reports_table.down.sql", size: 19, mode: os.FileMode(438), modTime: time.Unix(1514577584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_add_event_typeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x83\x88\x84\x54\x16\xa4\x2a\x78\xfa\x85\xb8\xba\xbb\x06\x29\xf8\xf9\x87\x28\xf8\x85\xfa\xf8\x00\x02\x00\x00\xff\xff\x47\xcd\xa1\xbe\x38\x00\x00\x00")

func _5_add_event_typeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_add_event_typeUpSql,
		"5_add_event_type.up.sql",
	)
}

func _5_add_event_typeUpSql() (*asset, error) {
	bytes, err := _5_add_event_typeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_add_event_type.up.sql", size: 56, mode: os.FileMode(438), modTime: time.Unix(1515219258, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_remove_event_typeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x83\x08\x85\x54\x16\xa4\x02\x02\x00\x00\xff\xff\xfa\x1d\x58\x8e\x28\x00\x00\x00")

func _5_remove_event_typeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_remove_event_typeDownSql,
		"5_remove_event_type.down.sql",
	)
}

func _5_remove_event_typeDownSql() (*asset, error) {
	bytes, err := _5_remove_event_typeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_remove_event_type.down.sql", size: 40, mode: os.FileMode(438), modTime: time.Unix(1515219258, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_add_bluewonDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x53\x70\xf2\xf7\xf7\x71\x75\xf4\x03\x04\x00\x00\xff\xff\x08\x2a\x0a\x8b\x2e\x00\x00\x00")

func _6_add_bluewonDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_add_bluewonDownSql,
		"6_add_bluewon.down.sql",
	)
}

func _6_add_bluewonDownSql() (*asset, error) {
	bytes, err := _6_add_bluewonDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_add_bluewon.down.sql", size: 46, mode: os.FileMode(438), modTime: time.Unix(1515219258, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_remove_bluewonUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x03\x04\x00\x00\xff\xff\xc2\xb9\xb0\x4c\x27\x00\x00\x00")

func _6_remove_bluewonUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_remove_bluewonUpSql,
		"6_remove_bluewon.up.sql",
	)
}

func _6_remove_bluewonUpSql() (*asset, error) {
	bytes, err := _6_remove_bluewonUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_remove_bluewon.up.sql", size: 39, mode: os.FileMode(438), modTime: time.Unix(1515219258, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_add_photos_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xc8\xc8\x2f\xc9\x2f\x56\xd0\xe0\xe5\xe2\x2c\x49\x4d\xcc\x55\x08\x71\x8d\x08\x01\xcb\xfb\x85\xfa\xf8\xe8\xf0\x72\x71\x96\x16\xe5\x60\x08\x2a\x28\x28\x28\x84\xfa\x79\x06\x86\xba\x6a\x80\x34\xe9\x28\x94\x16\xe5\x68\xf2\x72\x69\x02\x02\x00\x00\xff\xff\xc8\x4f\x32\xd2\x68\x00\x00\x00")

func _7_add_photos_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_add_photos_tableUpSql,
		"7_add_photos_table.up.sql",
	)
}

func _7_add_photos_tableUpSql() (*asset, error) {
	bytes, err := _7_add_photos_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_add_photos_table.up.sql", size: 104, mode: os.FileMode(438), modTime: time.Unix(1516148013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_remove_photos_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xc8\xc8\x2f\xc9\x2f\x06\x04\x00\x00\xff\xff\xb4\x52\x78\x3f\x11\x00\x00\x00")

func _7_remove_photos_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_remove_photos_tableDownSql,
		"7_remove_photos_table.down.sql",
	)
}

func _7_remove_photos_tableDownSql() (*asset, error) {
	bytes, err := _7_remove_photos_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_remove_photos_table.down.sql", size: 17, mode: os.FileMode(438), modTime: time.Unix(1516148013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __8_add_isdminUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\x85\x30\x0c\x05\xd0\x55\xee\x2a\xe9\x6b\xde\xd7\x35\x01\x49\x06\x10\xac\x50\x50\x3f\x0c\xee\xef\x11\x86\xae\x08\x69\x54\xbc\x35\x9e\x82\xf4\x8e\x9f\x33\x17\xc3\x2c\xd9\xaf\x79\xa3\xb9\x53\xc5\x60\x1e\xb0\x24\xd1\xf5\x2f\xc9\xc0\xb1\x9d\x35\xbe\x00\x00\x00\xff\xff\xe7\x70\xa1\xca\x43\x00\x00\x00")

func _8_add_isdminUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__8_add_isdminUpSql,
		"8_add_isdmin.up.sql",
	)
}

func _8_add_isdminUpSql() (*asset, error) {
	bytes, err := _8_add_isdminUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "8_add_isdmin.up.sql", size: 67, mode: os.FileMode(438), modTime: time.Unix(1519689196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __8_remove_isadminDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x2c\x76\x4c\xc9\xcd\xcc\x03\x04\x00\x00\xff\xff\x54\xf1\x61\xd5\x25\x00\x00\x00")

func _8_remove_isadminDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__8_remove_isadminDownSql,
		"8_remove_isadmin.down.sql",
	)
}

func _8_remove_isadminDownSql() (*asset, error) {
	bytes, err := _8_remove_isadminDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "8_remove_isadmin.down.sql", size: 37, mode: os.FileMode(438), modTime: time.Unix(1519689196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __9_add_reports_cascadeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcb\xbd\x0a\xc2\x40\x10\xc4\xf1\x5e\xf0\x1d\xa6\x4c\x9e\xc1\x6a\xbd\x9b\x48\x30\xdc\x85\xcd\x5a\x58\x05\x8b\xb5\x11\x3f\xb8\xd3\xc2\xb7\x17\x91\x74\x36\x33\xf0\x87\x9f\x0c\x46\x85\xc9\x76\x20\x8a\x3f\xee\xe5\x59\x11\x35\x8f\x08\x39\x4d\xa6\xd2\x27\x5b\xfa\xfc\x7b\x2f\xf3\xf9\xe2\xef\xcd\x7a\xf5\xcf\x4a\x8c\xe8\xb2\xb2\xdf\x25\xec\x79\x6c\x16\xd3\x42\xd9\x51\x99\x02\x27\xbc\xaa\x97\xda\x7c\xf7\x76\xba\x7a\x8b\x9c\x70\x18\xa3\x18\x11\x64\x0a\x12\xf9\x09\x00\x00\xff\xff\x29\x43\x4d\x2e\x96\x00\x00\x00")

func _9_add_reports_cascadeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__9_add_reports_cascadeUpSql,
		"9_add_reports_cascade.up.sql",
	)
}

func _9_add_reports_cascadeUpSql() (*asset, error) {
	bytes, err := _9_add_reports_cascadeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "9_add_reports_cascade.up.sql", size: 150, mode: os.FileMode(438), modTime: time.Unix(1519689196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __9_remove_reports_cascadeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x0b\x0e\x09\x72\xf4\xf4\x0b\x81\x89\xc7\x43\xe8\xd4\xa2\xf8\xb4\xec\xd4\x4a\x6b\x5e\x2e\x6c\x7a\x1d\x5d\x5c\x14\xdc\xfc\x83\x5c\x3d\xdd\xfd\x14\xbc\x5d\x23\x35\x60\x7a\x34\x15\x82\x5c\xdd\x5c\x83\x5c\xfd\x9c\x5d\x83\x15\x4a\x8b\x53\x8b\x8a\x35\x40\x64\x5e\x62\x6e\xaa\x26\x20\x00\x00\xff\xff\xa8\x10\xfe\x72\x84\x00\x00\x00")

func _9_remove_reports_cascadeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__9_remove_reports_cascadeDownSql,
		"9_remove_reports_cascade.down.sql",
	)
}

func _9_remove_reports_cascadeDownSql() (*asset, error) {
	bytes, err := _9_remove_reports_cascadeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "9_remove_reports_cascade.down.sql", size: 132, mode: os.FileMode(438), modTime: time.Unix(1519689196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5d\xdd\x6f\xe3\x38\x92\x7f\x8e\xff\x0a\x6d\x80\x5d\x24\x87\xbe\xb4\xbe\x3f\x02\xf4\xcb\xce\xcc\x01\xf3\x70\xb3\xc0\xed\xec\xd3\xf1\x60\x48\x22\x95\x31\xce\xb1\x33\xb6\x33\xc3\xee\x41\xff\xef\x8b\x1f\xab\x98\x28\xb2\x28\xcb\x8a\x90\x4c\x3f\x38\xb1\x65\xb1\xc8\xa2\xea\x57\x1f\x64\x15\xfd\xf1\xa3\xf7\xdd\x56\x2a\xef\x4e\x6d\xd4\xae\x3c\x28\xe9\x55\x9f\xbd\xbb\xed\x7f\x56\xab\x8d\x2c\x0f\xe5\xcd\xe2\xe3\x47\x6f\xbf\x7d\xdc\xd5\x6a\x7f\x8b\xf7\xfe\xb2\xde\xa9\xf2\xa0\x96\x8f\x7b\xb5\xdb\x2f\x0f\x65\xb5\x56\x37\x8f\x0f\x37\xfb\x5f\xd7\xf4\xb5\xdc\x6d\x1f\x5e\x7c\x29\xb7\xbf\x6f\xec\xd7\x81\xbf\x2c\xa5\x5c\xee\xd4\xc3\x76\x77\xd8\x2f\xa5\x5a\xab\x83\x5a\xd6\xe5\xbe\x2e\x65\x9b\x4c\xe0\x2f\x77\xea\x7e\xfb\x9b\x72\xdd\xfa\x82\x68\x60\x88\xae\xcb\xc3\x72\xbd\xdd\xdc\xb5\xc9\x04\x34\x9c\xa7\xaf\x5e\x34\x0b\x4d\x33\xb5\x91\x4b\x09\x86\x76\x6a\x53\xde\xab\xe5\xfe\x50\xee\x0e\xe6\x4a\x9b\x50\x48\x84\x06\x6e\x7e\x41\x3a\x32\xa4\x37\xdb\x83\xda\x2f\x9b\x95\x5a\xcb\x36\xad\xc8\xf2\xd6\xfe\xfe\x45\xf3\xd8\x34\xff\xbc\x7d\x3c\x3c\x56\x6a\xf9\xb8\x5b\x1f\xcd\x73\x10\x5b\x22\xad\xbb\x5e\x12\x49\x0c\x91\xd5\x7e\x59\xad\x1f\x9f\xe6\xb1\x7b\x0b\x13\xe9\xde\xd5\xea\xc8\x3e\x6f\xf5\x9b\xda\x1c\x8e\x1f\x38\xcf\xf0\x8b\x6f\xdb\x7d\x84\xb6\xfd\x7d\x79\xa8\x7f\x51\xc7\x04\x78\x66\x5f\x7e\xdd\xa6\x10\x59\x0a\xe5\x7a\xbd\x2a\x37\x75\x0f\x8d\x88\x68\x74\x6f\x68\x53\x89\x2d\x15\x2b\x50\x5d\x1a\x31\xd1\x78\xf9\x75\x9b\x02\xcd\xa7\x61\x74\x79\xf8\xfc\xd0\x6e\xfb\x34\x8f\xad\x6f\xdb\x4d\x53\xd3\x14\x33\xfc\xfb\x76\xd3\xf9\x86\x5b\xda\x2f\x9f\x89\x66\xa6\xd1\xc3\x2f\xdb\xc3\xf6\x78\xb4\x99\x6d\xf7\xe2\xfb\x36\xe5\x9c\x1f\xbf\xbc\x5f\xb5\xa9\xe6\xcf\x8f\xbc\x34\x5f\xb5\xdb\x14\x2f\xd0\x79\x0c\xcb\xa2\x8b\xca\x3e\x38\x5a\xcd\x71\xb7\xc5\xa7\xef\xff\xe1\xfd\xf4\x8f\x9f\xbd\x1f\xbe\xff\xf1\xe7\xbf\x2c\x16\x0f\x65\xfd\xff\xe5\x9d\xf2\xee\x57\x77\xbb\xf2\xb0\xda\x6e\xf6\x8b\xc5\xea\x1e\xb4\xbc\xab\xc5\xc5\x65\xf5\xf9\xa0\xf6\x97\x8b\x8b\xcb\x7a\x7b\xff\xb0\x53\xfb\xfd\xc7\xbb\x2f\xab\x07\x5c\x68\xee\x0f\xf8\xb7\xda\xd2\xdf\x8f\xab\xed\xe3\x61\xb5\xc6\x87\xad\x69\xf0\x50\x1e\x7e\xf9\xd8\xac\xd6\x0a\x6f\x70\x61\x7f\xd8\xad\x36\x77\xe6\xbb\xc3\xea\x5e\x5d\x2e\xae\x17\x8b\xe6\x71\x53\xdb\xe1\xfd\x8f\x2a\xe5\x15\xde\x78\xff\xfb\x7f\xe8\xf6\x83\x07\x40\x7b\xd4\xec\xda\xbb\xb2\x57\xd5\x6e\xb7\xdd\x5d\x7b\x7f\x2c\x2e\xee\xbe\x98\x4f\xde\xed\x27\x0f\xa3\xba\xf9\x49\xfd\x0e\x22\x6a\x77\x65\x86\x8d\xcf\x7f\x7f\x6c\x1a\xb5\x33\x64\xaf\xaf\x17\x17\xab\xc6\x34\xf8\xcb\x27\x6f\xb3\x5a\x83\xc4\xc5\x4e\x1d\x1e\x77\x1b\x7c\xfc\xe0\x35\xf7\x87\x9b\x1f\x40\xbd\xb9\xba\x04\x21\xef\xaf\xbf\xde\x7a\x7f\xfd\xed\x92\x46\x62\xfa\xba\x5e\x5c\x7c\x5d\x2c\x2e\x7e\x2b\x77\x5e\xf5\xd8\x78\xd4\x0f\x75\xb2\xb8\x58\xd2\x70\x3e\x79\xab\xed\xcd\x77\xdb\x87\xcf\x57\x7f\xab\x1e\x9b\x0f\xde\xdd\x97\xeb\xc5\x45\xbd\xfe\xc1\x8e\xf4\xe6\xbb\xf5\x76\xaf\xae\xae\x17\x73\x8d\x07\x64\x88\xbe\x83\x90\xda\xed\x68\xdc\x7c\xb1\x7a\x6c\x6e\xfe\x8e\xa1\x5f\x5d\x7f\xc0\x1d\x8b\xaf\x8b\x05\x20\xe2\x95\xfb\xbd\x3a\x60\xca\x1f\xeb\x03\xa8\x18\xfe\xf8\x79\x2c\x2e\x56\x9b\x66\xeb\x79\xdb\xfd\xcd\x7f\xad\xd6\xea\xc7\x4d\xb3\x7d\x6a\xc7\x8f\xd0\x5e\x6f\x51\x30\xcf\xd0\xf3\xf8\x31\x2e\x2e\xf6\xab\x2f\xe6\xf3\x6a\x73\x48\xe3\xc5\xc5\x3d\x2c\x9d\xf7\x44\xf4\xbf\xb7\x52\x99\x8b\x3f\xaf\xee\x95\x07\x31\xb9\xc1\x3b\xf4\x63\x44\xe5\xaa\x59\x75\xfb\xba\xf6\x7e\x2a\xef\xd5\xd5\x35\xf7\x80\x3e\x99\xcb\x66\x75\x83\xde\x17\x5f\x07\xda\xfe\x73\xf5\x05\x6d\xcd\x68\x5e\x36\xc5\x40\x07\x9b\x62\xac\x57\xd7\xed\x91\xbf\x24\x00\xd6\x4e\x11\x00\x73\x57\xd7\xcf\x8c\x1e\x51\x60\xee\xdd\x44\x7e\xdc\x7f\xbf\xda\x5d\x5d\x7b\xd5\x76\xbb\x6e\xb7\x2e\xd7\xfb\x13\x9c\x7f\xde\x13\xe3\x6a\xd7\x94\xb5\xfa\xe3\x6b\xab\x35\x8b\x04\xa4\x7c\xb9\xec\xf3\x2f\xfe\xf5\xf0\xcf\x5f\xd7\xde\x27\x96\x8c\xab\x4b\xa1\x83\x46\xe8\xbc\x12\xda\xcf\x85\xf6\xfd\xfe\x57\xd3\x08\x9d\x85\x42\xfb\x8a\xfe\x67\x89\xd0\x7e\x2d\x74\x16\x08\x9d\x24\xd4\x16\xef\xb3\x58\xe8\x26\x7c\xbe\xde\xf8\x74\x2d\x89\xe8\x7d\x13\x09\xed\x37\x42\x27\xb8\xd7\x17\x3a\x97\x74\x1d\xb4\x40\xdb\x2f\x84\x4e\x52\xa1\xc3\x5c\xe8\x50\x0a\x1d\x2b\xfa\x1f\x96\x74\x5d\xfa\x42\x2b\xbc\x12\xa1\x15\xc6\x13\x0b\x5d\x05\xd4\x67\x80\x7e\x23\xea\x2b\x48\x84\x8e\x43\xa1\x93\x5a\xe8\x30\xa2\xf7\xb5\x2f\x74\x5c\x0a\xdd\xd4\xf4\x39\x93\x42\x67\xb5\xd0\x41\x4c\x9f\x1b\x29\x74\x84\x71\xe0\x7e\xd0\x91\xc4\x67\x96\x0b\x5d\x15\x42\x47\xb9\xd0\x51\x44\xfd\x60\xbe\xf0\x3e\x09\xa9\x3f\x3f\x7c\xbe\x8e\x57\x5d\x11\xaf\x78\x6f\xee\xf1\x85\x2e\x30\x1f\x01\xcd\x5f\x5a\x50\x1b\xf3\x6a\xcd\x31\x5e\x69\x2e\x74\x1a\x11\xef\x49\x29\x74\x9a\xb4\x9f\xc5\xa5\xd5\xbd\xee\xa7\xcb\xfa\xa1\x4f\xef\x5a\x2d\xd2\xd2\xdb\x8b\x8b\x8b\x01\x49\xf9\xb0\xb8\xb8\xb8\x1c\xf0\x53\x2f\x3f\x2c\x2e\xae\x9f\x40\xee\xa6\x83\xe1\xfc\x87\xd1\x51\xed\xe1\x18\x25\xf5\x64\x09\x4e\x72\x74\x4a\xeb\x3e\x29\x4b\xa3\xee\x6e\x3f\x75\xa1\xf3\x07\x94\xca\xad\x37\xcc\x8f\x07\xf5\x71\xeb\x05\x7e\xf0\xc1\x83\x22\xb8\x6d\xeb\x89\xab\x38\xca\xaf\xcd\x75\xc0\xfb\x96\xe0\xff\xaf\xcd\x4a\x5f\x05\x49\x10\x27\x59\x96\xe4\xf1\x07\xcf\xbf\xfe\xba\xb8\x28\x31\x80\xbf\x19\x96\xff\x30\x7c\xde\x7a\xcc\x2e\x46\x77\x6b\xfe\x7e\x7d\x7a\x22\xe5\x87\x2e\x74\xbb\xbe\xff\xf7\xdb\xdf\x37\xaf\x82\x6e\x41\x30\x31\xf0\xf3\xdd\x90\xed\x83\x5e\x95\x0a\xed\xa7\x04\xb7\xae\xb8\x56\x52\xe8\x54\x0a\x5d\x27\x04\xe7\x20\x70\x89\xab\x83\xa3\x49\xe2\xea\xa0\xc5\xe2\xea\x8c\x9b\x8e\xc4\xd5\x41\x67\xa4\xb8\x0e\x73\x34\x9f\xb8\x0e\xf0\x63\xc5\x35\x7b\x4f\x69\x1d\x0c\x45\xa7\x5b\x9c\xb4\x26\x4d\x0a\x11\xf3\x4b\xa1\xeb\x50\xe8\xc8\x27\x8d\x5d\xb3\x36\x4d\xd8\x82\x04\x10\x41\x25\xb4\x84\x96\x56\x42\xe7\x91\xd0\x32\x12\x3a\xc2\x7d\x99\xd0\x49\x2c\x74\x5e\x0a\x1d\x42\xc4\xa1\xcd\x33\x16\x7f\x9f\x44\xdc\x58\xb6\x80\xc4\x37\x6a\x84\x8e\x73\x86\x06\xac\x8d\x14\xba\x4c\xf8\x5a\x40\xaf\x08\x1a\x1c\x34\x14\xdd\x53\x64\x42\x87\x81\xd0\x32\x10\xba\xf0\x85\x4e\x63\xa1\xa3\x4a\xe8\xc0\xa7\x3e\x41\x53\x29\xb2\x5c\x49\x21\x74\x89\xbe\x52\xa1\xe3\x54\xe8\x2a\x27\xab\x06\xad\x1f\x85\x42\xab\x82\xac\x13\xb4\x3f\x2c\x54\x53\x52\x3f\xa1\x22\x9e\x9a\x42\xe8\x22\x14\x5a\x36\x42\x17\xb0\x34\xb0\x86\xb0\x90\x8d\xd0\x61\x25\x74\x59\x0a\xad\x72\xa1\xf3\x90\xac\x23\xee\xcb\x0a\xa1\x55\x4d\xff\x31\xaf\x45\x2a\x74\x99\x0a\x9d\x27\x74\x4f\x19\xd1\xd8\x31\x66\x33\xa6\x5a\xe8\xb4\xa4\x3e\xab\x44\xe8\xa2\xa0\x79\xcc\xf0\x1d\xe8\xa7\x34\xfe\x3a\x10\x5a\x45\xf4\x5c\xd0\x6f\x18\xd3\x73\x8a\x0b\x9a\xbf\x32\x14\xba\x80\xc5\x4d\x68\xce\x30\x57\x61\x26\x74\xd1\x1c\x3f\x6f\xbc\xf0\xfc\xa0\x82\x9a\x5c\x68\x89\x79\xcf\xfb\xd5\xc9\x69\x91\x9b\xa0\x57\x4e\x13\x35\x0a\x66\xcc\xca\x4b\x47\xd3\x9c\xa6\x3c\x4a\xe5\x8c\xe6\x7a\x2e\xdd\x33\x8e\x55\xab\x84\xd2\xfc\x5c\x2d\x54\xa4\x79\x11\x14\xe9\x5c\x5a\x68\x70\xa1\xeb\x35\x16\xb4\x4f\x15\xc5\x3e\xc1\xbb\x8e\x59\x15\xa9\x67\x55\x04\x68\xc5\x80\x99\x22\x88\x00\x4a\x68\x0b\xb8\x42\x8d\x00\x2e\xb2\x26\xf8\xd5\x0c\xf5\x04\x63\x48\x68\x3c\x80\x9c\x55\x45\x50\x0f\x80\x3d\xfa\xac\x32\xa1\x03\xc0\x87\x2d\x77\x94\x92\x23\x8a\x7e\x73\x0b\xab\x9a\x20\x6c\x68\x17\x04\xd9\xd0\x27\xf5\xd7\x55\x43\xa6\x0f\xf4\xd9\xd0\x1c\x00\xa2\x31\x8f\x5f\x86\x04\xd5\xa4\x22\x15\x04\xc7\x39\xab\x84\x0e\x1b\x72\x6e\xa1\x86\xe0\x84\xab\x86\x78\xc8\x4a\x52\x45\x75\x43\x8e\x76\x5e\x93\x1a\xaa\x42\x7a\x41\x0d\x41\x15\xb6\xd5\x10\x54\x88\x64\x07\x5d\x16\x14\x18\x14\xec\x1c\xa3\x6f\xa8\x21\xa8\x15\xa8\x57\x69\xd5\x61\x4b\x0d\xa1\x4f\xcc\x17\x54\x0c\x54\x79\x90\x93\x2a\xc3\x7f\xf0\x06\x35\x8c\xe7\x05\xe7\x1c\xe3\x85\x17\xd4\x55\x39\x30\x07\x70\xf8\xc1\x37\xd4\x1d\x54\xa3\x43\xe5\x8c\x91\xaf\x69\x7a\x67\x0c\x65\xab\x7c\xc6\x2d\xe7\x1e\x6b\xa0\x31\x7d\x8c\x55\x43\x67\xcc\xc4\x8c\xba\x68\x2c\xe7\x56\x21\x25\xfe\xbb\x2a\xa4\x97\x8b\xe9\xaf\x0b\xbd\x9b\x98\xa4\x17\xce\x87\x2f\x29\xac\x74\xf9\xf0\xb1\xf5\xe1\x2b\x42\x26\x9c\x82\x90\x43\xeb\x8c\x43\x72\x73\x2f\x3b\x40\x4d\x4a\xa8\x32\x31\x42\x42\x2f\x84\xb5\x75\x4e\x86\x3c\xac\xe9\x5e\x18\x66\x20\x1b\x48\xa9\x6b\x72\x1c\xe0\x08\x40\x9b\x84\xa1\xd0\xa5\x4f\x9a\x0d\x5a\x06\x5a\xc2\x6a\x42\xa0\x2f\xe8\x31\xf6\xd0\x8c\x88\x19\x8a\x88\x79\x8a\x1c\xc8\xeb\x99\xc8\x29\x30\xeb\x21\x43\x98\xea\xdd\xf5\xe8\x02\xa8\xa7\xf5\x38\xb4\xb8\x47\x3f\x1b\x34\x1c\x0c\x30\x0e\xf2\xe8\x9d\x61\xf0\x62\xe7\xe8\xb5\x91\xec\x9c\x48\xe8\x46\xc5\x63\xd1\x70\x24\xf9\x31\xa1\xc3\x4a\x3e\x5c\xd7\x82\xed\x96\x5f\xf5\x4b\x3f\x6c\x4d\x62\x17\x89\x78\x8c\x0e\xe9\xef\x9b\xbf\x69\x00\xe8\xa3\x64\x31\xd0\xbf\xbf\x77\x0c\x83\x3e\x1a\x63\x91\x30\xc0\xc9\x8c\x60\x70\x71\xc2\x78\xc8\x92\x77\xc5\xc3\xa9\xcd\xd2\x6f\xcf\x50\x80\x4e\xcd\x74\x70\xbf\x85\x09\xfe\xdb\xf5\x61\xb8\xc8\x18\x9b\x59\x3b\x96\xcf\x11\xb7\x19\xaf\xa4\x7b\xf2\x82\xc6\xdb\x5d\x2b\x36\x6b\xc4\x1c\xe9\x82\x4e\x1b\x7e\x7e\xd8\xbf\x30\x25\x13\x8a\x3a\xe1\x12\x27\xb5\xd0\x91\x74\xc0\x6b\xd4\xe3\x98\x82\xb6\x51\x84\x09\x7c\x23\xf7\xcf\xbb\x58\x1c\xd5\xc3\x38\x68\x9e\x33\x0b\xb3\x21\x75\x34\xdb\x0c\xdc\xf4\xec\x45\xd9\x99\x81\x7b\x22\x73\xe1\x5b\x35\x6d\x43\xf8\x45\x28\x7a\x0a\x6b\x21\xef\xa3\x54\x08\x33\x53\x1a\x87\x03\x6b\xe3\x66\x70\x1a\xdc\xc6\xd1\xb6\x88\x1b\x9b\x85\x72\x0c\xba\x71\xfd\x8c\xc5\xdd\x59\x33\x32\x23\xf4\xc6\xf3\xcf\xe8\x8b\xdf\x17\x7d\x47\x89\x40\x6f\x67\x27\x6d\xe0\x03\xbc\xc1\x0d\x84\x8b\x17\x96\xd3\x83\xaa\x9a\x97\x51\x0c\xce\x24\xd1\xb0\x7d\xe7\x6c\x0b\xfd\xa0\x1f\x6b\x0d\x2f\x33\x81\x76\x95\x0d\x60\xad\x7f\xbe\xa6\x20\xab\x9f\x12\xe1\xc8\x95\x9e\xd5\x45\x4d\x3f\x8d\x71\x18\x19\xe4\x64\x36\x44\xb8\x39\x99\x2a\xff\xa1\x1f\xc4\x59\x11\xcd\x26\xff\xc7\xb9\x6e\x6f\x69\x70\xc6\x80\xe0\xdc\x78\xaa\x0b\x04\xd7\x2e\xa3\x2c\xc8\x71\x0c\x53\x5a\xd3\x0c\x1d\x9b\xe2\x43\x93\x34\x4d\xf2\x9d\xe4\xac\xf8\x0f\x24\x20\x1e\x63\xc0\x49\x6d\x2c\x10\x4e\x71\x37\x23\x1a\x06\x19\x63\x48\x44\xe7\xee\x3b\xce\x0b\x09\x47\x72\xe7\xdb\x19\x06\xb3\x26\x20\x9f\x9d\xa5\x5a\x3d\x3b\x66\xe7\x1a\x86\x32\xa7\x55\x35\x83\x2b\xc9\xeb\xd2\x92\x30\x67\x02\x24\x49\x7d\x83\xce\x58\x63\x51\xf8\xb4\xfe\x1d\xd7\x42\x57\xbc\x85\xd8\x8b\x9b\xa1\x99\x9c\x02\x9c\x21\x7a\x84\x9c\xe1\xc4\xdc\x2e\x74\x86\xe8\x8d\xc3\xce\x08\x0e\x67\x03\xcf\x29\xde\xac\x41\x49\xdf\x19\x3d\xc7\x79\xcf\x6f\x69\x50\xc6\x80\xe7\x1c\x83\x32\x16\x40\x2e\xb0\x98\xcd\xa8\x84\x33\xc0\x6a\xce\x0b\xe8\x07\x8b\x73\xe2\xa6\x61\xc5\x49\xce\x42\x65\x20\x41\xfd\x18\x29\x4e\x6a\x63\x81\x72\x8a\xbb\x19\x71\x32\xc8\x98\x85\x49\xf8\xae\x30\xe9\x4d\xfe\x7f\x0d\x4e\x20\x7b\xb5\x4f\xdb\x1f\x90\xe1\x9c\xb7\x4d\x4c\x16\x64\x42\x59\x8e\x26\x7b\x52\x91\x0c\x96\x05\x29\xfa\x32\x13\x3a\x6d\x28\x0a\x2f\x38\x1b\x53\xf9\x94\x4b\x92\x73\x96\x21\x5e\x41\x49\x0b\xd0\x66\xc3\x35\x23\xba\x92\x53\xb3\x80\x47\xe0\xa4\xc8\x29\xe3\xb1\x2a\x84\x56\x19\x6d\x4c\xc3\x58\x24\x25\xad\xae\x45\xb9\xd0\xb2\x12\x3a\xe5\xfc\x94\x2a\xa4\x0d\xdd\xb2\xa1\x0d\x56\x5c\x33\x4e\x5c\x22\x74\x8a\x3e\x15\x45\xff\x71\x4a\x39\x1f\xaa\xa4\xb1\x63\xdc\x79\x40\xab\x79\x41\x4e\x8e\x5c\xe3\xc8\xfd\x30\x63\x48\x69\x05\xa1\x4a\x85\x8e\x63\x07\xfe\x86\x9e\xc8\x14\x00\x0e\xd1\x23\x04\x0e\x17\x80\x74\x21\x38\x44\x6f\x1c\x06\x47\x70\x38\x1b\x08\x4f\xf1\x66\xd7\xde\xce\x4d\xee\x08\xfd\xa8\xc8\xfd\x34\x9a\x0b\x85\xfd\xf5\x35\x7f\xae\x45\x80\x73\xe3\x1f\x98\xbe\x0c\x31\x4d\xf9\x6c\xae\x4c\x72\xf3\xc0\x62\x1b\xe0\x9c\x66\x94\x2a\x55\x71\xb2\xb4\x03\x26\x03\x53\x36\x0d\x27\x03\x04\x2d\x50\x06\xcb\xa0\x8e\x91\x32\x40\x71\x2c\x54\x4e\x73\x39\x23\x56\x4e\xb0\x67\x4d\xd6\xb9\x89\x07\x00\x4b\x96\x17\xc5\x3c\x60\xe9\x2b\x34\xfb\x36\x32\xff\x87\x56\xb5\xbb\xd9\xff\xf0\xf5\x62\x25\x74\x29\x29\xbf\xb3\x1b\x14\xd9\x40\xc9\xec\x3e\x85\xad\xdd\xa7\x9a\x92\xa1\x12\xce\xef\x04\x00\xd1\x46\xc6\x42\xab\xa0\x43\xbf\xe2\xff\x92\x12\xaa\x30\x3e\xd8\x6b\xd0\x6a\x0a\xba\x66\x92\xa3\xf8\x3a\x6c\x96\xad\x0e\x68\xb8\x22\xc0\x56\x1d\xc0\x4e\x42\xc1\x84\x3e\x25\x70\x15\x31\x25\x8f\xc1\x96\x9b\xfc\xd4\x84\x36\x8a\xe3\x86\x72\x39\x65\x46\xfc\x9a\x6b\x19\xd9\x73\xf4\x01\x3b\x0d\xd0\xc3\x06\xe3\x99\x24\x1c\xd8\x19\x5f\xb7\xe7\xf9\x99\x05\x94\x98\x72\x4b\xe3\x84\x2a\x0a\xf2\xd0\xa1\x34\x9c\xa2\x33\x45\x61\x38\x89\x91\xb2\x18\xa8\x87\xec\x2a\x0a\x27\xa5\x71\x4a\xe2\x14\x57\xb3\x29\x88\x41\x96\x6c\x5a\x52\x74\x76\x5a\xd2\xac\xd9\xda\xc7\x65\xa6\x6f\x55\x5c\xe0\x42\xb7\x6b\xd9\x0f\xde\x2b\xd0\x98\x17\x94\xca\xe7\x2a\x2e\x70\xb3\x34\x49\x6a\x5d\xc4\x58\x6a\xdd\x55\xba\x47\x52\xeb\xa2\x34\x52\x6a\x4f\x70\x35\x9f\xd4\x0e\xb1\xf4\xa7\x28\x31\xe8\xaf\x7d\x7e\x65\x6d\x81\xa2\x64\xd5\x14\x71\x4a\xcc\xb5\x05\x88\xcb\x32\xce\x56\x88\x68\xf1\xac\xc2\x7d\x88\x5f\x6a\xaa\x2c\x6b\x38\xa1\x14\xb1\x0c\x74\x69\x52\x93\x3e\x8d\x02\xd2\xeb\x90\x54\xe8\xfc\x2a\xa1\x3a\x83\xa0\xa2\x5a\x01\x38\x8b\x26\xa6\xab\x28\x46\xf3\x2b\xa2\x9d\x49\x5e\xff\x08\xc8\x5e\x66\x15\xc5\x66\x99\xa2\xf8\x4b\xd9\xdd\x1e\xd6\xfb\x26\x53\x22\x20\xdb\x91\x48\xaa\x3b\x80\x33\x09\x87\xb1\x8a\xf9\x33\xc7\x62\x51\x49\x08\x05\x6f\x59\x46\x7d\x64\x0d\xa3\x55\x51\x12\x70\x51\x52\x32\xb2\xb9\x5f\x11\x6d\xd3\x57\x40\xb1\x22\xec\x6b\x59\xd3\x1c\xa5\x92\xe2\x4d\x93\xf4\x9c\xd2\x42\x3c\xec\x4e\xaa\xc8\xc6\xd9\x5d\xe4\x90\x1d\x64\xc4\x8c\x98\x63\xcc\x19\x34\x00\x62\x59\x7c\x07\xfb\x86\x79\x01\x5f\x39\xfb\x06\x18\x83\xe4\x5a\x02\xd8\x4f\xd8\x39\xf4\x2b\xd9\x5e\x62\x2c\xa9\x4d\xfa\xe5\x5a\x01\xd8\x60\xbb\xc8\x8a\xb6\x96\x37\x3c\x8b\x40\xd2\x98\x8c\x93\xac\xe8\x3e\x3c\x0f\x13\xa3\x06\x44\x17\xf7\x81\x27\xf4\x1d\xe1\x79\x34\xc4\x0b\x7c\x04\xd8\xea\x20\xa2\x39\x91\x9c\xe0\x0d\xc7\x1b\x7d\xa4\xa1\xd0\x69\x40\x0e\x3c\x9c\x77\xc4\xe6\xb9\xa2\x98\x19\xb1\x72\x5a\x71\x42\xb7\xa2\x75\x25\xf3\xac\x63\xe2\x01\x32\xaa\xb8\xe6\x03\xe3\x51\x8a\x64\x09\xcf\x10\xf4\x0b\x45\x1b\x1d\xe0\x2d\x76\xc4\xca\x21\xc7\xd1\xb8\x07\xf1\x78\xe3\x48\x1e\x1b\xc0\xcd\x04\xd5\x38\x40\xcd\xe8\xc6\xc1\x13\x0a\x3a\xca\x71\x80\xd6\x28\xed\x78\x9a\xb3\xb9\xd4\xe3\x09\xae\x58\x3f\x86\xc9\xbb\x56\x0c\xf6\x9d\xfd\xf0\x56\x66\x7d\x68\x21\xd7\x65\xda\x15\x7f\x07\x45\x1a\x25\xf4\xbf\x5f\x80\x9d\x7c\x4d\x12\x60\x27\x35\x16\xe0\x81\x13\x34\x8e\x04\xd8\x49\x6b\xa4\x00\x9f\xe2\x6c\x3e\x01\x1e\xe4\xca\x1a\xf8\xb3\xab\x77\xe6\x94\x5f\xd7\xd1\x24\xaf\x30\xf1\x31\x99\x9f\x38\x20\x15\x9d\xb3\x69\x09\x72\x0a\xd3\x10\x5e\xc1\xbc\x4b\x45\xaa\xbc\xe0\x2a\xd7\x8a\x4d\x5d\xcd\x61\x1d\x4c\x80\x09\x53\x0b\x52\xfd\x39\x87\x72\x45\x46\x61\x29\xcc\x03\xd4\x7a\xc2\xe6\x18\xa1\x56\x55\x72\xd8\x9b\x52\xe9\x60\xc1\xe5\x72\xc6\x2d\xc8\xc8\xbc\x29\xae\x9e\x95\x21\x7d\x06\xca\x30\x2e\x63\xca\x2b\xaa\x49\x81\x99\x30\x63\x4c\x69\x69\x18\x66\x59\x72\xad\x4a\x9a\x93\x09\x83\x89\xc0\x35\x69\x4d\x6e\x44\x66\x13\x08\x2c\x22\x5a\xca\x85\x89\x87\x89\xc0\x0b\x66\xb0\x64\xd7\x05\x61\xa5\x59\xbe\xcd\xc8\x54\xd5\x6c\x2e\xeb\x94\xdd\x98\x82\xdc\x1e\x84\xc7\x30\x69\xd6\x5c\xc2\xdd\x31\xe5\x98\x05\xb9\x46\x30\x9f\x70\x57\xc0\x7f\x5d\x51\x5d\x52\xd1\x90\xf3\x6e\xe6\xa0\xa2\xf9\xa9\x39\xe7\x19\xcf\x07\xae\x87\x09\x4b\x6b\x9a\x23\x33\x1f\x3e\xd1\x86\x19\x44\xa8\x6a\x42\x61\x36\xa9\x70\x5d\x22\x7e\x96\xe0\xc7\x98\x63\xb8\x5f\x19\xdd\x07\x93\x5e\xb1\x7b\x56\x71\xdf\x79\x46\x2e\x49\xc3\x65\x9e\x18\x47\x18\xd3\x73\xcb\x1d\xa6\x15\x63\x87\x1b\x88\xf9\xac\x13\xe2\xb3\x4f\x33\x0d\x4a\xec\x04\xdd\x34\x48\xcf\x68\xa7\x13\xc7\xf7\x74\xf4\xd3\x20\xbd\x51\x1a\x6a\x0c\x87\x73\xe9\xa8\x93\xbc\x59\x2d\x55\xc4\xef\xab\xa6\xfa\x8e\x47\x7a\xcb\xf8\x19\x10\xad\x0b\x7a\xc5\xf5\xf3\x2a\x95\x2d\xd8\x77\x19\x5c\x40\x5c\x05\xb4\x42\x24\x39\x5f\xb3\x5f\xac\x07\x38\x9c\x24\xd6\x03\xf4\x58\xac\x07\x8f\x9c\x3a\x12\xeb\x01\x7a\x23\xc5\xfa\x34\x87\xf3\x89\xf5\x09\xde\xac\xf7\xf8\xae\x4b\x42\xfd\x27\x7a\xbd\x2e\xba\xce\x9b\xe7\xd2\x57\xa8\xd1\x90\x2b\xf7\xad\xe9\x0d\x02\x8a\xce\xa0\xa2\x2b\x98\x8c\x98\x22\x22\xa8\x72\xa8\xe8\x9c\x77\x04\xc3\x90\xae\x15\x31\x47\xcd\x11\xed\x42\xc6\xbc\x76\x04\xb9\x4e\x4a\x2a\x0f\x2d\x63\x36\x1b\x1c\x15\x67\xbc\x92\x5a\xf0\xaa\x2b\xfa\x80\x5a\xcf\x79\x0b\x07\xd8\x29\x78\x35\x1b\x66\x3f\xe2\x2a\xf9\x88\x23\x7a\x98\xa4\x8c\x77\x31\x4b\x9f\xb0\x65\x4a\x77\x53\x1a\x87\x89\x0c\x63\x32\xd3\x30\xa5\x79\xce\x2b\xc3\x92\x56\x0a\x32\x3e\x1b\xc6\x44\xf6\x05\x7d\x86\xbb\x81\x71\x1b\x13\x9a\x11\xff\xe6\xc4\x81\x90\xa2\x7d\xb8\x03\x09\x47\xed\x92\x57\xbd\x7d\xce\x68\x30\x11\xa1\x22\x93\xa8\xb8\x08\x0f\x7c\xc2\xdc\x55\x8a\xfa\x55\x15\x97\xcd\x66\xb4\xda\x80\x3e\x4d\xd9\x2d\x47\xf2\x32\xa1\x39\x28\x0a\x2e\x9d\xe5\x13\x11\x40\x0b\x8e\x38\xa2\x6e\xf4\x8d\xf9\x81\x9b\x00\xd7\x25\xcc\x28\xca\x34\x91\x69\x46\xcf\xd1\xae\x22\xe7\xac\xa3\x30\xf7\x78\x5f\xf1\x4e\x35\xe8\x62\x6e\x4d\xb6\x45\x4d\xbc\xc0\x44\x63\x3e\xa3\x90\xdc\x90\x9a\xcb\x99\x93\x80\xc6\x2f\x79\x27\x1b\x2e\x85\xcf\x11\x3c\x4c\x7d\x50\x51\x74\x6d\x56\x25\x52\x5a\xbd\x8f\xf9\x59\xa9\x8c\x82\x07\x33\x77\x25\xf5\xa1\x52\x72\x85\xe0\x6a\xe0\x1a\xde\xdb\xb9\x32\x91\x75\x40\x6e\x61\x62\xf9\xe7\xd5\x88\x50\xf1\x1c\x47\xc4\x0f\x5c\x3f\xc5\xab\x10\x0d\x67\x90\x74\xf5\x2a\xe6\xda\xe4\xc7\x57\xe4\xaa\x65\x29\xf3\xdc\xd1\xab\x03\x18\x9b\xa0\x55\x07\xa8\x19\x9d\x3a\x78\x46\x5f\x47\xa3\x0e\xd0\x1a\xa5\x4f\x4f\x73\x36\x97\x36\x3d\xc1\xd5\x53\x52\xe2\xbb\xba\x08\x7d\xa7\x1f\xbe\xe5\xe9\x3d\xae\x3d\xea\xa1\x53\x7c\x12\x5e\xc6\x44\x5f\x50\x00\x81\xa3\x12\x77\x80\xb7\x49\x42\xec\xa4\xc6\x42\x3c\x70\x8e\xe4\x91\x10\x3b\x69\x8d\x14\xe2\x53\x9c\xcd\x27\xc4\x83\x5c\x3d\xf9\xb9\xef\x29\xc3\xdd\x03\x3a\xbf\xad\x92\x44\x44\xc0\x30\xc5\x30\x47\x88\x3a\x11\x79\x9b\x0a\xdd\x92\x8e\x73\x43\x84\x68\x0e\xbe\xc9\x29\x52\x87\xfb\xe1\x73\xd9\x52\xc3\x8b\xca\x30\xcb\xf6\x20\x9a\xf6\x26\xaf\xe1\xad\xe7\xd8\xb6\x98\x23\xcd\x92\x4d\x59\xe4\xc8\xca\xe8\x9d\xd9\x09\xd8\xe9\xa5\x63\x50\xe3\x38\x5c\xb5\x83\x97\xde\xf6\xa3\x90\x32\xc4\xc1\x5c\x18\x71\xf2\xc0\xe8\x48\xce\xcd\x9c\x0d\x92\x30\x28\xc2\x24\x9f\x09\x1d\x47\x67\xd4\x7e\x8b\x95\x7f\x66\xdf\x85\xc5\xbb\x0d\x13\xd7\xc9\x84\x66\xdf\x4b\xd2\xbe\x06\xbc\x31\x57\xe2\x91\x7b\x7a\x26\xc9\xb9\x8b\x18\x0b\xbb\xfb\xb8\xe0\x23\x89\x77\x51\x1a\x29\xf6\x27\xb8\x9a\x4f\xf6\x87\x58\x9a\x9a\x60\x34\x2b\x00\x5e\x1c\xc2\xfc\x67\x4b\x19\x3f\xab\x68\xbd\x95\x77\x87\xbe\xeb\x86\x5e\x66\x1b\xd6\xe7\xb4\xa1\x8c\xcf\x1c\x0a\x28\x7d\xc8\x8c\x37\x72\xe4\xe6\xe5\x9c\x36\xce\xe7\x12\xb9\xea\x2d\xfa\x26\x70\x02\x38\xfa\xc8\x18\x58\xf4\x9f\x92\xdd\x01\x44\x5f\xeb\x51\x50\x18\x18\xfd\x5c\x20\x70\x31\x30\xb5\x72\x62\x66\xf1\x7f\x79\xd2\xf8\x9f\xab\xde\xe8\xec\xc2\x6f\x07\x06\x5c\x32\x6e\xce\x21\x2b\x38\xdd\xbb\xe6\x14\xf3\x5e\x19\xef\x99\xa5\x49\x42\xde\x43\x87\xa5\xbc\xf7\xc4\xf7\x23\x31\xef\x69\x3f\x52\xce\xdd\x1c\xcc\x27\xe8\x0e\x1e\x6c\x30\x7b\x76\x1c\x30\xa7\xa4\x1f\x1f\x9c\xff\x6d\xa4\x91\xc2\x35\xa9\xf3\xe7\x18\xd8\xd4\x8c\x36\xfd\x69\xa4\x16\x4b\xf6\x54\xab\xf6\x78\xda\xf5\x75\x35\xef\x9f\xb5\xa3\x01\x95\xf3\x18\x79\xcc\x76\x9f\x4f\x71\x59\x84\xb5\x07\x61\xfe\xfc\x32\x0b\x66\x25\x9d\x81\xe7\xdb\x72\x87\x92\xd3\x90\x78\x91\x52\x71\x9a\x4c\x11\xb7\xe8\x71\x1a\xeb\xa9\x03\xa4\x8d\x8e\x68\x68\x91\x4d\x86\xd4\xae\x0f\x9f\x8e\x67\x3b\x01\xa1\x0e\x4a\x06\xa3\xce\x9f\x5e\xe8\xa0\xd4\x41\x63\x14\x4e\x87\x39\x99\x0b\xa9\x03\x9c\x3c\x1d\x1a\x7d\xf6\xc2\x53\x1a\xc4\xb9\x1f\xcc\x53\x23\xd1\xfb\x43\x16\x6f\xb9\xf2\xd4\x87\x38\xe7\xb9\xd1\x31\x59\xba\x8c\x4f\xcd\x72\xa5\x76\x0e\x31\x35\x49\x54\xdd\xe4\x58\x5e\x87\x7e\x0d\xe4\x48\x68\xdd\xd4\x46\x4a\xee\x49\xee\xe6\x13\xdf\x61\xc6\x26\xa7\x79\xce\x29\xc2\xed\x5f\x5a\x99\x6e\x69\x6c\x81\x9d\xb4\x05\x76\x49\x7f\x81\x9d\xe2\x02\x3b\x68\xdb\xb4\xa2\xad\x19\x99\xd1\x36\x88\xcf\xc7\xe0\xf8\x9c\x0d\x50\xd6\xcf\x05\x76\x11\x57\xe1\x98\x93\x54\x59\x76\xa1\xc5\x4b\x45\x63\x83\x76\x46\x40\x5d\xd9\x2d\x15\x45\xdb\x1a\xf0\xf4\x10\x38\x17\x0d\xff\x94\x40\x46\x5b\x1d\xb0\x40\xb2\xa0\x6d\xad\x8c\x13\xfa\xe0\x61\xf5\x15\xd8\x85\x31\xf1\xd5\x24\xcf\x38\x03\xaf\x15\xac\x8f\xa4\xfe\x2a\xd5\x9f\xd9\xa0\x32\xce\xfe\xe0\x2c\x8a\xd8\xb1\xca\x7b\xf4\x14\x26\x00\xed\x88\x86\x41\x57\xcf\x2f\xe9\x74\x20\x75\xd4\x6e\x14\x8e\x5c\x23\x9e\x0b\x3c\xbd\xe3\xb6\x85\x71\x67\x23\x66\xce\x63\x71\xba\x3f\x42\xf4\xd6\x27\x82\xf4\xfd\x4c\xc7\x6b\x2a\xe1\x62\x9b\xde\xc0\xde\x98\x2b\x0a\x49\xf8\xd4\xe5\x34\xa0\x2d\x4d\xd7\x89\x20\x8e\xf9\x99\x24\xd1\xbd\x94\x58\xae\x1d\x3f\x05\x75\x24\xdd\xbd\x34\x46\xca\xf8\x10\x27\xf3\x49\xba\x93\x93\xa9\x67\x7e\xcc\x2a\xef\xbd\xbf\xab\x35\xef\x6f\x0c\x4c\x3d\xd8\xfb\xdf\x01\x00\x00\xff\xff\xa6\xeb\x97\xc3\x00\x70\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 49152, mode: os.FileMode(438), modTime: time.Unix(1520398716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0_create_users_table.up.sql": _0_create_users_tableUpSql,
	"0_drop_users_table.down.sql": _0_drop_users_tableDownSql,
	"10_add_reports_delete_cascade.up.sql": _10_add_reports_delete_cascadeUpSql,
	"10_remove_reports_delete_cascade.down.sql": _10_remove_reports_delete_cascadeDownSql,
	"11_add_lat_long.up.sql": _11_add_lat_longUpSql,
	"11_drop_lat_long.down.sql": _11_drop_lat_longDownSql,
	"12_add_end_date_rename_start_date.up.sql": _12_add_end_date_rename_start_dateUpSql,
	"12_drop_end_date_rename_start_date.down.sql": _12_drop_end_date_rename_start_dateDownSql,
	"13_add_notes_field.up.sql": _13_add_notes_fieldUpSql,
	"13_remove_notes_field.down.sql": _13_remove_notes_fieldDownSql,
	"14_add_youtube_url_table.up.sql": _14_add_youtube_url_tableUpSql,
	"14_remove_youtube_url.down.sql": _14_remove_youtube_urlDownSql,
	"15_add_is_blue_reports.down.sql": _15_add_is_blue_reportsDownSql,
	"15_remove_is_blue_reports.up.sql": _15_remove_is_blue_reportsUpSql,
	"1_create_events_table.up.sql": _1_create_events_tableUpSql,
	"1_drop_events_table.down.sql": _1_drop_events_tableDownSql,
	"2_create_matches_table.up.sql": _2_create_matches_tableUpSql,
	"2_drop_matches_table.down.sql": _2_drop_matches_tableDownSql,
	"3_create_alliances_table.up.sql": _3_create_alliances_tableUpSql,
	"3_drop_alliances_table.down.sql": _3_drop_alliances_tableDownSql,
	"4_create_reports_table.up.sql": _4_create_reports_tableUpSql,
	"4_drop_reports_table.down.sql": _4_drop_reports_tableDownSql,
	"5_add_event_type.up.sql": _5_add_event_typeUpSql,
	"5_remove_event_type.down.sql": _5_remove_event_typeDownSql,
	"6_add_bluewon.down.sql": _6_add_bluewonDownSql,
	"6_remove_bluewon.up.sql": _6_remove_bluewonUpSql,
	"7_add_photos_table.up.sql": _7_add_photos_tableUpSql,
	"7_remove_photos_table.down.sql": _7_remove_photos_tableDownSql,
	"8_add_isdmin.up.sql": _8_add_isdminUpSql,
	"8_remove_isadmin.down.sql": _8_remove_isadminDownSql,
	"9_add_reports_cascade.up.sql": _9_add_reports_cascadeUpSql,
	"9_remove_reports_cascade.down.sql": _9_remove_reports_cascadeDownSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0_create_users_table.up.sql": &bintree{_0_create_users_tableUpSql, map[string]*bintree{}},
	"0_drop_users_table.down.sql": &bintree{_0_drop_users_tableDownSql, map[string]*bintree{}},
	"10_add_reports_delete_cascade.up.sql": &bintree{_10_add_reports_delete_cascadeUpSql, map[string]*bintree{}},
	"10_remove_reports_delete_cascade.down.sql": &bintree{_10_remove_reports_delete_cascadeDownSql, map[string]*bintree{}},
	"11_add_lat_long.up.sql": &bintree{_11_add_lat_longUpSql, map[string]*bintree{}},
	"11_drop_lat_long.down.sql": &bintree{_11_drop_lat_longDownSql, map[string]*bintree{}},
	"12_add_end_date_rename_start_date.up.sql": &bintree{_12_add_end_date_rename_start_dateUpSql, map[string]*bintree{}},
	"12_drop_end_date_rename_start_date.down.sql": &bintree{_12_drop_end_date_rename_start_dateDownSql, map[string]*bintree{}},
	"13_add_notes_field.up.sql": &bintree{_13_add_notes_fieldUpSql, map[string]*bintree{}},
	"13_remove_notes_field.down.sql": &bintree{_13_remove_notes_fieldDownSql, map[string]*bintree{}},
	"14_add_youtube_url_table.up.sql": &bintree{_14_add_youtube_url_tableUpSql, map[string]*bintree{}},
	"14_remove_youtube_url.down.sql": &bintree{_14_remove_youtube_urlDownSql, map[string]*bintree{}},
	"15_add_is_blue_reports.down.sql": &bintree{_15_add_is_blue_reportsDownSql, map[string]*bintree{}},
	"15_remove_is_blue_reports.up.sql": &bintree{_15_remove_is_blue_reportsUpSql, map[string]*bintree{}},
	"1_create_events_table.up.sql": &bintree{_1_create_events_tableUpSql, map[string]*bintree{}},
	"1_drop_events_table.down.sql": &bintree{_1_drop_events_tableDownSql, map[string]*bintree{}},
	"2_create_matches_table.up.sql": &bintree{_2_create_matches_tableUpSql, map[string]*bintree{}},
	"2_drop_matches_table.down.sql": &bintree{_2_drop_matches_tableDownSql, map[string]*bintree{}},
	"3_create_alliances_table.up.sql": &bintree{_3_create_alliances_tableUpSql, map[string]*bintree{}},
	"3_drop_alliances_table.down.sql": &bintree{_3_drop_alliances_tableDownSql, map[string]*bintree{}},
	"4_create_reports_table.up.sql": &bintree{_4_create_reports_tableUpSql, map[string]*bintree{}},
	"4_drop_reports_table.down.sql": &bintree{_4_drop_reports_tableDownSql, map[string]*bintree{}},
	"5_add_event_type.up.sql": &bintree{_5_add_event_typeUpSql, map[string]*bintree{}},
	"5_remove_event_type.down.sql": &bintree{_5_remove_event_typeDownSql, map[string]*bintree{}},
	"6_add_bluewon.down.sql": &bintree{_6_add_bluewonDownSql, map[string]*bintree{}},
	"6_remove_bluewon.up.sql": &bintree{_6_remove_bluewonUpSql, map[string]*bintree{}},
	"7_add_photos_table.up.sql": &bintree{_7_add_photos_tableUpSql, map[string]*bintree{}},
	"7_remove_photos_table.down.sql": &bintree{_7_remove_photos_tableDownSql, map[string]*bintree{}},
	"8_add_isdmin.up.sql": &bintree{_8_add_isdminUpSql, map[string]*bintree{}},
	"8_remove_isadmin.down.sql": &bintree{_8_remove_isadminDownSql, map[string]*bintree{}},
	"9_add_reports_cascade.up.sql": &bintree{_9_add_reports_cascadeUpSql, map[string]*bintree{}},
	"9_remove_reports_cascade.down.sql": &bintree{_9_remove_reports_cascadeDownSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

