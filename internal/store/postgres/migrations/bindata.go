// Code generated by go-bindata.
// sources:
// 0_create_users_table.up.sql
// 0_drop_users_table.down.sql
// 1_create_events_table.up.sql
// 1_drop_events_table.down.sql
// 2_create_matches_table.up.sql
// 2_drop_matches_table.down.sql
// 3_create_alliances_table.up.sql
// 3_drop_alliances_table.down.sql
// 4_create_reports_table.up.sql
// 4_drop_reports_table.down.sql
// 5_add_event_type.up.sql
// 5_remove_event_type.down.sql
// 6_add_bluewon.down.sql
// 6_remove_bluewon.up.sql
// 7_add_photos_table.up.sql
// 7_remove_photos_table.down.sql
// 8_add_isdmin.up.sql
// 8_remove_isadmin.down.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0_create_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\x56\xd0\xe0\xe2\x04\x31\xf2\x12\x73\x53\x15\x42\x5c\x23\x42\xc0\x2a\xfc\x42\x7d\x7c\x14\x42\xfd\x3c\x03\x43\x5d\x75\xb8\x38\x33\x12\x8b\x33\x52\x53\x02\x12\x8b\x8b\xcb\xf3\x8b\x52\x50\x55\x71\x69\x02\x02\x00\x00\xff\xff\xe1\x96\xd7\xd2\x62\x00\x00\x00")

func _0_create_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_create_users_tableUpSql,
		"0_create_users_table.up.sql",
	)
}

func _0_create_users_tableUpSql() (*asset, error) {
	bytes, err := _0_create_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_create_users_table.up.sql", size: 98, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0_drop_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\xbd\x6d\xc5\x8d\x11\x00\x00\x00")

func _0_drop_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_drop_users_tableDownSql,
		"0_drop_users_table.down.sql",
	)
}

func _0_drop_users_tableDownSql() (*asset, error) {
	bytes, err := _0_drop_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_drop_users_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_events_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8b\x4d\x0a\xc2\x30\x10\x85\xd7\x99\x53\xbc\xa5\x42\x2f\x11\x65\x84\x60\x12\x4b\xf2\x84\xd6\x5d\xc1\x01\x41\xac\x60\x83\xe0\xed\x45\x44\xb7\xdf\xcf\xb6\xa8\xa7\x82\x7e\x13\x15\x61\x87\x7c\x20\x74\x08\x95\x15\xf6\xb4\xb9\x2d\x58\x89\xbb\xda\x0b\xd4\x81\xe8\x4b\x48\xbe\x8c\xd8\xeb\xd8\x89\x9b\xa7\x9b\x7d\xf9\xe7\xca\xc7\x18\x3b\x71\xcb\xe5\xfe\x68\xf9\x67\x3a\x71\xe7\xa9\x19\x18\x92\x56\xfa\xd4\xf3\xf4\x8f\x65\xfd\x0e\x00\x00\xff\xff\x50\xda\x81\x7d\x7d\x00\x00\x00")

func _1_create_events_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_events_tableUpSql,
		"1_create_events_table.up.sql",
	)
}

func _1_create_events_tableUpSql() (*asset, error) {
	bytes, err := _1_create_events_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_events_table.up.sql", size: 125, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_drop_events_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x06\x04\x00\x00\xff\xff\x27\xe5\x89\x64\x11\x00\x00\x00")

func _1_drop_events_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_drop_events_tableDownSql,
		"1_drop_events_table.down.sql",
	)
}

func _1_drop_events_tableDownSql() (*asset, error) {
	bytes, err := _1_drop_events_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_drop_events_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_create_matches_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x4d\x6a\xc3\x30\x10\x46\xd7\xd2\x29\x66\x69\x83\x2e\xa1\x84\x71\x10\x91\xa5\x20\x4d\x69\xd2\x9d\x2b\x0f\x34\xf8\xaf\xd8\x72\xc1\xb7\x2f\x2e\xf5\xa6\x74\xfb\xde\xf7\xc1\x3b\x07\xd4\x84\x40\xfa\x64\x11\x4c\x05\xce\x13\xe0\xdd\x44\x8a\x30\x34\x39\x7d\xf0\x02\x85\x14\x1d\x6f\x40\x78\x27\xb8\x05\x53\xeb\xf0\x80\x2b\x3e\x94\x14\xfc\xc5\x63\xbe\x1e\x6e\xbf\xba\x17\x6b\x95\x14\x9f\x33\xb7\xcf\x94\xb9\xa5\xe7\xc0\x40\xa6\xc6\x48\xba\xbe\xd1\x9b\x92\xa2\x49\x79\x6d\xfa\x7f\xc4\x7b\xbf\xf2\xeb\x34\xc2\xc9\x7b\x8b\xda\x29\x29\x66\x6e\x63\x9a\x66\x06\xe3\x08\x2f\x18\x7e\x47\x7f\x59\xe5\x03\x9a\x8b\xdb\xa3\x8a\x23\xa9\x84\x80\x15\x06\x74\x67\x8c\xf0\x03\x97\xa2\xe3\xad\x94\xe5\x77\x00\x00\x00\xff\xff\x95\xc6\xa5\x34\xf2\x00\x00\x00")

func _2_create_matches_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_create_matches_tableUpSql,
		"2_create_matches_table.up.sql",
	)
}

func _2_create_matches_tableUpSql() (*asset, error) {
	bytes, err := _2_create_matches_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_create_matches_table.up.sql", size: 242, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_drop_matches_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x06\x04\x00\x00\xff\xff\xed\x06\x12\x35\x12\x00\x00\x00")

func _2_drop_matches_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_drop_matches_tableDownSql,
		"2_drop_matches_table.down.sql",
	)
}

func _2_drop_matches_tableDownSql() (*asset, error) {
	bytes, err := _2_drop_matches_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_drop_matches_table.down.sql", size: 18, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_create_alliances_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x41\x0a\x83\x30\x14\x44\xd7\xe6\x14\xb3\x34\xe0\x25\x54\xc6\x12\x0c\x09\x8d\x11\xec\xd2\xca\x87\x4a\xd5\x45\xad\x0b\x6f\x5f\xb0\xb4\x14\xba\x9d\x79\xef\x95\x81\x79\x24\x62\x5e\x58\xc2\x54\x70\x3e\x82\x9d\x69\x62\x83\x7e\x9a\xc6\x7e\x19\x64\x45\xaa\x92\xb9\x7f\x0e\xb7\x5a\x76\x44\x76\xf1\xa0\x5c\x6b\x6d\xa6\x92\x71\x2d\xa6\x4d\x50\x78\x6f\x99\xbb\xdf\x67\xd9\xe6\xab\x3c\xfe\x84\xca\x07\x9a\x93\x43\xcd\x4b\xfa\xa9\x6a\x04\x56\x0c\x74\x25\x1b\x1c\xa3\xac\xe9\x5d\x76\x9d\xa9\xa4\x75\xe6\xdc\xf2\x8b\x66\x78\x77\xb5\xd2\xaf\x00\x00\x00\xff\xff\x80\x51\xbd\xfc\xbc\x00\x00\x00")

func _3_create_alliances_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_create_alliances_tableUpSql,
		"3_create_alliances_table.up.sql",
	)
}

func _3_create_alliances_tableUpSql() (*asset, error) {
	bytes, err := _3_create_alliances_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_create_alliances_table.up.sql", size: 188, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_drop_alliances_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xcc\xc9\xc9\x4c\xcc\x4b\x4e\x2d\x06\x04\x00\x00\xff\xff\x17\xe1\x40\xdc\x14\x00\x00\x00")

func _3_drop_alliances_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_drop_alliances_tableDownSql,
		"3_drop_alliances_table.down.sql",
	)
}

func _3_drop_alliances_tableDownSql() (*asset, error) {
	bytes, err := _3_drop_alliances_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_drop_alliances_table.down.sql", size: 20, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_create_reports_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x6a\x86\x30\x10\x84\xcf\xe6\x29\xf6\x98\x40\x5e\x42\x7f\xd6\x12\x0c\x09\x8d\x11\xec\x31\x94\x85\x96\x56\x5b\x92\x58\xf0\xed\x8b\x4a\x40\x6b\x2f\x21\xcc\x7c\x3b\x33\x0f\x87\xb5\x47\xf0\x75\xa3\x11\x54\x0b\xc6\x7a\xc0\x51\xf5\xbe\x87\x48\xdf\x5f\x31\x27\xe0\xac\x3a\xbe\x14\xc1\xe3\xe8\x77\xc6\x0c\x5a\x4b\x56\xd1\x0f\xcd\xb9\xa3\xf5\x66\x4c\x21\xbf\xbe\xfd\x67\xbc\xa7\xe6\x73\x21\x68\xac\xd5\x58\x9b\xb3\x93\x29\x4c\x37\x3c\xe5\x90\xd3\x4d\x1d\x8c\x7a\x1e\x90\x97\x76\x09\xa5\x4e\xc2\x96\x22\x24\x03\x68\xad\x43\xf5\x64\xa0\xc3\x17\x5e\xf6\x0b\x70\xd8\xa2\x43\xf3\xc0\x1e\x96\x44\x31\xf1\xed\x9d\xc3\x44\x42\xb2\xea\x7c\x52\xb2\x2f\x27\xbb\x98\xf8\x07\xad\x7f\xf1\x32\xe0\x82\xef\x22\x1d\x3c\x13\xbf\x01\x00\x00\xff\xff\xf1\xac\xe6\x8d\x6b\x01\x00\x00")

func _4_create_reports_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_create_reports_tableUpSql,
		"4_create_reports_table.up.sql",
	)
}

func _4_create_reports_tableUpSql() (*asset, error) {
	bytes, err := _4_create_reports_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_create_reports_table.up.sql", size: 363, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_drop_reports_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\xb6\x06\x04\x00\x00\xff\xff\x55\x5c\x72\x90\x13\x00\x00\x00")

func _4_drop_reports_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_drop_reports_tableDownSql,
		"4_drop_reports_table.down.sql",
	)
}

func _4_drop_reports_tableDownSql() (*asset, error) {
	bytes, err := _4_drop_reports_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_drop_reports_table.down.sql", size: 19, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_add_event_typeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x83\x88\x84\x54\x16\xa4\x2a\x78\xfa\x85\xb8\xba\xbb\x06\x29\xf8\xf9\x87\x28\xf8\x85\xfa\xf8\x00\x02\x00\x00\xff\xff\x47\xcd\xa1\xbe\x38\x00\x00\x00")

func _5_add_event_typeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_add_event_typeUpSql,
		"5_add_event_type.up.sql",
	)
}

func _5_add_event_typeUpSql() (*asset, error) {
	bytes, err := _5_add_event_typeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_add_event_type.up.sql", size: 56, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_remove_event_typeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x83\x08\x85\x54\x16\xa4\x02\x02\x00\x00\xff\xff\xfa\x1d\x58\x8e\x28\x00\x00\x00")

func _5_remove_event_typeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_remove_event_typeDownSql,
		"5_remove_event_type.down.sql",
	)
}

func _5_remove_event_typeDownSql() (*asset, error) {
	bytes, err := _5_remove_event_typeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_remove_event_type.down.sql", size: 40, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_add_bluewonDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x53\x70\xf2\xf7\xf7\x71\x75\xf4\x03\x04\x00\x00\xff\xff\x08\x2a\x0a\x8b\x2e\x00\x00\x00")

func _6_add_bluewonDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_add_bluewonDownSql,
		"6_add_bluewon.down.sql",
	)
}

func _6_add_bluewonDownSql() (*asset, error) {
	bytes, err := _6_add_bluewonDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_add_bluewon.down.sql", size: 46, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_remove_bluewonUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x03\x04\x00\x00\xff\xff\xc2\xb9\xb0\x4c\x27\x00\x00\x00")

func _6_remove_bluewonUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_remove_bluewonUpSql,
		"6_remove_bluewon.up.sql",
	)
}

func _6_remove_bluewonUpSql() (*asset, error) {
	bytes, err := _6_remove_bluewonUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_remove_bluewon.up.sql", size: 39, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_add_photos_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xc8\xc8\x2f\xc9\x2f\x56\xd0\xe0\xe2\x2c\x49\x4d\xcc\x55\x08\x71\x8d\x08\x01\x4b\xfb\x85\xfa\xf8\xe8\x70\x71\x96\x16\xe5\xa0\x8b\x29\x28\x28\x28\x84\xfa\x79\x06\x86\xba\x6a\x80\xb4\xe8\x28\x94\x16\xe5\x68\x72\x69\x02\x02\x00\x00\xff\xff\x7a\x9d\xf7\x09\x64\x00\x00\x00")

func _7_add_photos_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_add_photos_tableUpSql,
		"7_add_photos_table.up.sql",
	)
}

func _7_add_photos_tableUpSql() (*asset, error) {
	bytes, err := _7_add_photos_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_add_photos_table.up.sql", size: 100, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_remove_photos_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xc8\xc8\x2f\xc9\x2f\x06\x04\x00\x00\xff\xff\xb4\x52\x78\x3f\x11\x00\x00\x00")

func _7_remove_photos_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_remove_photos_tableDownSql,
		"7_remove_photos_table.down.sql",
	)
}

func _7_remove_photos_tableDownSql() (*asset, error) {
	bytes, err := _7_remove_photos_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_remove_photos_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __8_add_isdminUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\x85\x30\x0c\x05\xd0\x55\xee\x2a\xe9\x6b\xde\xd7\x35\x01\x49\x06\x10\xac\x50\x50\x3f\x0c\xee\xef\x11\x86\xae\x08\x69\x54\xbc\x35\x9e\x82\xf4\x8e\x9f\x33\x17\xc3\x2c\xd9\xaf\x79\xa3\xb9\x53\xc5\x60\x1e\xb0\x24\xd1\xf5\x2f\xc9\xc0\xb1\x9d\x35\xbe\x00\x00\x00\xff\xff\xe7\x70\xa1\xca\x43\x00\x00\x00")

func _8_add_isdminUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__8_add_isdminUpSql,
		"8_add_isdmin.up.sql",
	)
}

func _8_add_isdminUpSql() (*asset, error) {
	bytes, err := _8_add_isdminUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "8_add_isdmin.up.sql", size: 67, mode: os.FileMode(436), modTime: time.Unix(1516734895, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __8_remove_isadminDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x2c\x76\x4c\xc9\xcd\xcc\x03\x04\x00\x00\xff\xff\x54\xf1\x61\xd5\x25\x00\x00\x00")

func _8_remove_isadminDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__8_remove_isadminDownSql,
		"8_remove_isadmin.down.sql",
	)
}

func _8_remove_isadminDownSql() (*asset, error) {
	bytes, err := _8_remove_isadminDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "8_remove_isadmin.down.sql", size: 37, mode: os.FileMode(436), modTime: time.Unix(1516734755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5b\xdd\x6f\xe3\x36\x12\x7f\xb6\xfe\x0a\x35\x40\x0b\xfb\x90\x4b\xf4\xfd\x11\x60\x5f\xda\xed\x01\x7d\xb8\x16\xb8\xb6\x4f\xc7\x43\x40\x51\x54\x2a\x9c\x63\x65\x6d\x67\x97\xbb\x8b\xfd\xdf\x0f\x3f\xce\x28\x71\x6c\x51\x76\xbd\x46\xdc\x7b\x50\x62\x7d\x70\x38\x43\xcd\xfc\x7e\x33\x24\x75\x7d\xed\xff\xd0\xd5\xda\xbf\xd3\x0b\xbd\x94\x6b\x5d\xfb\xd5\x47\xff\xae\xfb\x7b\xd5\x2e\x6a\xb9\x96\x57\xde\xf5\xb5\xbf\xea\x1e\x97\x4a\xaf\x6e\xf0\x3b\xb8\x55\x4b\x2d\xd7\xfa\xf6\x71\xa5\x97\xab\xdb\xb5\xac\xe6\xfa\xea\xf1\xe1\x6a\xf5\x6e\x4e\xb7\xeb\x65\xf7\xf0\xe2\x66\xdd\x7d\x58\xf4\xb7\xc3\xbe\xb5\x7e\xaf\x17\xeb\xdd\xe6\x21\x35\x7f\x71\x77\xb3\x7d\xd4\xb7\xbf\x97\x6b\xf5\x87\xde\x15\x10\x91\x80\x97\xb7\x37\x25\xc4\xbd\x04\x39\x9f\xb7\x72\xa1\x06\x64\xc4\x24\x63\xfb\x81\x4d\x29\x49\x2f\x65\xa9\x1f\xba\xe5\x80\x21\x09\xc9\x78\x79\x7b\x53\x42\x7a\x2b\xeb\x9a\x0c\xbd\x5d\x7f\x7c\xd8\x6c\x9b\xde\x2e\xf5\x7d\xf7\x5e\x6f\xde\xdd\x6c\x9a\xd9\xa6\xd5\xfc\x51\x7f\xe8\x16\x5b\x77\xb8\x65\x7f\xf3\x59\x68\x6e\x1b\x3d\xfc\xd1\xad\xbb\x5d\x6d\xf3\xbe\xdd\x8b\xfb\x9b\x92\x0b\xdb\xbc\x5d\xd5\xf7\xed\xa6\xd4\xa2\x6f\xd8\xae\xa4\xbd\xb5\xd9\xa6\x77\xa1\xbb\x0e\x67\x6f\x7f\xf1\x7f\xfe\xe5\x37\xff\xc7\xb7\x3f\xfd\xf6\x8d\xe7\x3d\x48\xf5\x5f\x79\xa7\xfd\xfb\xf6\x6e\x29\xd7\x6d\xb7\x58\x79\x5e\x7b\x8f\xc1\xf2\xa7\xde\xe4\xa2\xfa\xb8\xd6\xab\x0b\x6f\x72\xa1\xba\xfb\x87\xa5\x5e\xad\xae\xef\x3e\xb5\x0f\xb8\xd0\xdc\xaf\xf1\xaf\xed\xe8\xef\x75\xdb\x3d\xae\xdb\x39\x4e\x3a\xdb\xe0\x41\xae\xff\xb8\x6e\xda\xb9\xc6\x0f\x5c\x58\xad\x97\xed\xe2\xce\xde\x5b\xb7\xf7\xfa\xc2\x9b\x79\x5e\xf3\xb8\x50\xbd\x7a\xff\xd2\xb2\x9e\xe2\x87\xff\xef\xff\xa0\xdb\x4b\x7f\x21\xef\xb5\x4f\xcd\x66\xfe\xb4\xbf\xaa\x97\xcb\x6e\x39\xf3\x3f\x7b\x93\xbb\x4f\xf6\xcc\xbf\x79\xe3\x43\xab\xab\x9f\xf5\x07\x08\xd1\xcb\xa9\x55\x1b\xe7\xdf\x3f\x36\x8d\x5e\x5a\xb1\xb3\x99\x37\x69\x1b\xdb\xe0\x9b\x37\xfe\xa2\x9d\x43\xc4\x64\xa9\xd7\x8f\xcb\x05\x4e\x2f\xfd\xe6\x7e\x7d\xf5\x23\xa4\x37\xd3\x0b\x08\xf2\xbf\x7d\x77\xe3\x7f\xfb\xfe\x82\x34\xb1\x7d\xcd\xbc\xc9\x17\xcf\x9b\xbc\x97\x4b\xbf\x7a\x6c\x7c\xea\x87\x3a\xf1\x26\xb7\xa4\xce\x1b\xbf\xed\xae\x7e\xe8\x1e\x3e\x4e\xbf\xab\x1e\x9b\x4b\xff\xee\xd3\xcc\x9b\xa8\xf9\x8f\xbd\xa6\x57\x3f\xcc\xbb\x95\x9e\xce\xbc\x53\xe9\x03\x31\x24\xdf\x21\x48\x2f\x97\xa4\x37\x5f\xac\x1e\x9b\xab\xef\xa1\xfa\x74\x76\x89\x27\xbc\x2f\x9e\x07\xef\xf6\xe5\x6a\xa5\xd7\x18\xf2\x47\xb5\x86\x14\x6b\x1f\xbf\x0f\x6f\xd2\x2e\x9a\xce\xf7\xbb\xd5\xd5\x3f\xda\xb9\xfe\x69\xd1\x74\x4f\xed\xf8\x15\xf6\xd7\x37\x24\xd8\x77\xe8\xfb\xfc\x1a\xbd\xc9\xaa\xfd\x64\xcf\xdb\xc5\x3a\x4b\xbc\xc9\x3d\x20\xcf\x7f\x12\xfa\xcf\xae\xd6\xf6\xe2\x6f\xed\xbd\xf6\xe1\x26\x57\xf8\x85\x7e\xac\xab\x4c\x9b\x76\xbb\xaf\x99\xff\xb3\xbc\xd7\xd3\x19\xf7\x80\x3e\xd9\xca\xa6\xbd\x42\xef\xde\x97\x91\xb6\xbf\xb6\x9f\xd0\xd6\x6a\xf3\xb2\x29\x14\x1d\x6d\x0a\x5d\xa7\xb3\x4d\xcd\x5f\x0a\x80\x69\xfb\x04\xc0\xb8\xe9\xec\xd9\xd0\x1d\x09\x6c\xbd\x5b\xc8\x4f\xab\xb7\xed\x72\x3a\xf3\xab\xae\x9b\x6f\xb6\x96\xf3\xd5\x1e\xcb\x3f\xae\xc8\x70\xbd\x6c\xa4\xd2\x9f\xbf\x6c\xb4\x66\x97\x80\x97\xdf\xde\x0e\x11\xcd\xef\x0f\xbf\xbe\x9b\xfb\x6f\xd8\x33\xa6\x17\xc2\x84\x8d\x30\x45\x25\x4c\x50\x08\x13\x04\xc3\x47\xd3\x08\x93\x47\xc2\x04\x9a\xfe\xe7\xa9\x30\x81\x12\x26\x0f\x85\x49\x53\x6a\x8b\xdf\x79\x22\x4c\x13\x3d\x5f\x6f\x02\xba\x96\xc6\xf4\xbb\x89\x85\x09\x1a\x61\x52\x3c\x1b\x08\x53\xd4\x74\x1d\xb2\x20\x3b\x28\x85\x49\x33\x61\xa2\x42\x98\xa8\x16\x26\xd1\xf4\x3f\x92\x74\xbd\x0e\x84\xd1\x38\xa0\x4b\x22\x4c\x1c\x52\x7f\x21\xfa\x8c\xa9\x9f\x30\x15\x26\x89\x84\x49\x95\x30\x51\x4c\xbf\x55\x40\x32\x1a\x45\xe7\x79\x2d\x4c\xae\x84\x09\x13\x3a\x6f\x6a\x61\x62\xe8\x80\xe7\x21\xa7\x26\x1b\xab\x42\x98\x18\x47\x4c\x7d\x60\x9c\xf0\x3b\x8d\xa8\xaf\x20\x7a\xbe\x8e\x43\x55\x64\x23\x7e\xdb\x67\x02\x1a\x07\x8c\x47\x56\xd2\xf3\xf6\xd8\x18\x57\x1c\x3a\x14\xa6\x84\x7d\xb9\x30\x75\x24\x4c\x16\x6d\x8e\xff\x45\x8f\xb7\xee\x37\xca\x98\x30\x84\xb5\x3d\x72\x6c\x60\xb5\x37\x99\x8c\x78\xc7\xa5\x37\x99\x5c\x8c\x24\x29\x17\x97\xde\x64\xf6\x14\xd8\x6e\x39\x50\xe7\x6f\x16\x97\x36\xd5\xb1\xc0\xf4\x84\xfe\x7b\x2d\xda\x87\xb4\x4f\x00\x69\x21\xee\xe6\xcd\x76\xb8\x7c\x06\x90\xdc\xf8\xe3\xf6\xf8\x80\x8c\x1b\xbf\x2c\x2e\x7d\xc4\xfe\xcd\x26\x34\x4c\x93\x38\x9b\xd9\xeb\x88\xe8\x1b\x8a\xf8\xdf\x17\xad\x99\x86\x69\x98\x65\x79\x1e\xc6\xc1\xa5\x1f\xcc\xbe\x78\x13\x89\xfe\xbf\xb3\x16\x7f\xb6\x66\xde\xf8\x6c\x2d\x94\xbb\xb1\x7f\xbf\x3c\xbd\x10\x79\xb9\x1d\xad\xdb\x79\xdf\xdb\xee\xc3\xe2\xab\xa2\xb5\xa4\xe8\xb0\x11\x17\xb8\xa3\x74\x28\xda\xaa\x4c\x98\x20\xa3\x28\xdb\xf6\xd6\xaa\x16\x26\xab\x85\x51\x29\x45\x70\x18\xba\xbc\xd5\x61\xd1\x51\xde\xea\x90\xc5\xde\xea\xcc\x99\x77\xbc\xd5\x21\xe7\x40\x6f\x1d\xb7\xe8\x74\xde\x3a\x62\x0f\x7b\x6b\x98\x9f\xd3\x5b\x07\xcb\x90\xe3\xc9\x05\xe0\x8b\xe7\x92\x5a\x98\x40\x0a\xa3\x22\x61\xe2\x40\x98\x10\x24\x91\x12\x30\x96\x25\x81\x6e\xa5\x84\x91\x0c\xf2\x51\x43\xee\x97\xc1\x15\x13\x61\xb2\x80\x00\x39\xa9\xc8\xc5\x71\xad\xce\x08\xd0\x15\xdc\x34\x14\x26\x09\x85\x91\x8a\x9e\x2d\x62\x26\x14\xb8\x3f\x64\x26\xc2\x54\x00\xe1\x46\x18\xd5\x50\x18\xc8\x42\x18\x99\x0b\x53\x20\x64\xb4\x30\x21\x93\x4c\x16\x0a\x53\xe4\x44\x24\x11\x13\x1d\xec\x2c\x53\xba\xdf\x64\xc2\x54\x90\x57\x52\x58\xa5\x85\x30\x45\x29\x4c\x55\x09\x53\x4b\x61\x02\xfc\x4f\x84\x29\x42\x61\x74\x41\x3a\x27\x85\x30\x95\x16\xa6\x50\xc2\xd4\x85\x30\xba\xa2\xff\x68\x57\x56\xa4\x07\xfe\x83\xc0\x9a\x52\x18\x9d\x0b\xa3\x30\x5e\xb9\x30\x21\x88\xaa\xa2\xb0\x06\x11\x69\xe8\xa0\x85\xc9\x0a\x7a\x36\xcb\x85\x89\x25\xdd\x47\x3b\x59\x0a\x13\x96\xd4\xae\x8c\x88\x60\x1b\x49\x3a\x81\xc4\x1a\xe8\xd6\xd0\xd8\x82\x20\x2d\x41\x6f\x41\x01\x60\x05\xb6\xc0\x06\x4b\xaa\xf5\x30\x14\xb8\xdd\xe5\x08\x2c\x70\x0b\xb3\x60\x30\x56\x21\x6f\xa1\x81\x5b\xd2\x41\x70\xb0\xd7\xaa\x53\xe1\xc1\xb8\x49\x3d\x20\x44\xe9\x79\x11\x61\x67\xe2\xe1\xb5\x08\x2c\xe9\x09\x0c\x29\x18\x08\xac\x12\x26\x2a\xdd\x04\x16\xe5\x14\x1d\x88\xaa\x2c\x71\x13\x98\xdb\xa4\xa3\xbc\xd6\x25\x8c\xbd\xd6\x3d\x6f\xb3\xe3\xb5\x2e\x49\x07\x7a\xed\x1e\xab\x4e\xe7\xb5\x63\x26\xfd\x25\x68\x6c\x78\x36\xec\x78\x1e\xcb\xc0\x63\x9a\x78\x2c\x03\x2e\xc7\xcf\x3c\x96\x6c\x24\xf8\xf0\xce\x2c\xa3\xa2\x00\x1c\x14\x69\x61\x64\x48\x7c\x05\xaf\xc6\xf3\x65\x48\x3c\x07\x6e\xb1\xf2\x4a\x6a\x5b\xb2\x87\x23\x2a\x62\x44\x02\xf8\xa9\x21\x9e\x40\xd4\x80\xe7\xc0\x61\xe0\x46\xc8\x6d\x52\x61\x64\xc6\x51\x03\x3e\xc1\xb5\x9c\x9e\x03\x5f\x04\x39\xf3\x10\x8a\xa1\x80\x38\xa0\x8f\x8a\x04\x45\x51\x2a\x8c\x62\xde\x03\x57\xd6\x35\xf1\x64\x21\xc9\x36\xe8\x10\x97\xcc\x49\x01\x15\x38\xe0\x6c\x14\x57\x21\xf4\x6e\x48\x6e\x5e\x50\xe4\xa1\xa8\x82\x4c\x70\x39\xf8\x0d\x6d\x8a\x80\x6c\x8a\xb5\x30\x65\x42\x6d\x51\xac\x21\xc5\xcc\x62\xe2\xc4\x10\x5c\xa6\x85\xa9\xc0\xcb\x52\x98\x30\x17\x26\xab\x98\x6f\x13\x61\xca\x86\x8a\x33\xd8\x0e\xee\x2e\x99\x7b\x31\x86\x96\x27\x03\xd2\x03\x63\xa1\x32\xe6\x5a\x49\xb2\xeb\x90\x78\x15\x3c\x28\x91\x3f\xc0\x9e\x92\xd2\x5c\x8c\x47\x8e\x7c\x00\xef\xa6\xa2\xfe\x81\x3e\xd0\x1d\xb6\x23\x57\x51\x25\xdd\x2b\x98\xdb\xf1\x7e\x9f\xde\xb1\x26\x1b\x4a\x49\xe7\x40\x25\x1d\x93\x2f\xd9\xfc\xa5\xa0\xbc\x22\xc9\xa9\x9f\xb4\x24\x74\x0a\xb8\x8d\x95\x09\xee\x8f\x69\xcc\x51\xd4\x82\xbb\xf1\xbe\x30\x6e\xc8\x35\x02\x7e\xbf\xe0\x78\xe4\x0e\xf6\x3d\xa0\x7d\x4e\xf6\xa0\x3f\x59\xd3\x98\x40\x76\x9e\xef\xfa\x2e\x0e\x8c\x25\xc6\x06\x63\x16\x33\xca\x0e\x21\xe3\x48\xdc\x1c\x01\x8d\x23\xd2\x2c\x36\x8e\xce\x59\x6f\x81\xe3\x88\xac\x83\xd0\x71\xbf\x65\xa7\x82\xc7\x3d\x56\x31\x3e\x46\x49\x74\x5e\x80\xdc\x5d\x0d\x78\x2d\x5a\x57\x05\x01\x5f\xa4\x28\x20\x01\x42\x3d\xd5\xbb\xa8\x5d\xf3\x3d\x14\x01\x71\x4a\xff\x87\x1d\xd8\x69\xd7\x51\x0e\xec\x94\xc6\x0e\x3c\xb2\xa6\xb2\xe3\xc0\x4e\x59\x07\x3a\xf0\x3e\xcb\x4e\xe7\xc0\xa3\x56\xf5\x04\x7f\xd6\x59\x15\xd7\x62\xd5\x57\x50\x7c\x42\x10\x8b\x32\x12\xa5\x6a\xd1\x53\x7c\x42\xb4\x08\x8a\xd7\x19\x9d\x57\x31\xc1\x28\x68\x33\x02\xe5\x25\x04\xaf\xd6\x2b\x15\x45\x42\x3f\x83\xa2\x15\xd1\x3b\xca\x39\x94\x95\x09\x4a\xb1\x94\xca\x52\x40\x37\xca\x45\x50\x69\x0a\xfa\x0b\xa8\xb4\xb4\x7d\x48\x4a\x09\x40\x57\x9a\x21\xdc\x96\x63\xa0\xa0\x84\xe6\x12\x53\x4d\xe5\x27\xa8\x0a\x3a\xe4\x01\x51\x6d\xc1\xe9\x04\x52\x0b\x3c\x07\x5b\x40\x45\xa0\x1d\xe8\x69\xcb\x5d\x4e\x92\xad\x1e\x92\x28\x12\xb4\x0a\xaa\x42\x49\x08\xba\x4d\x41\x91\x19\xd9\x8f\xff\x0d\x52\x97\x80\xe6\x60\x41\xd1\xa0\x51\xd0\x6e\xc9\xd1\x1d\xf1\x39\xa2\x3b\xe5\xd4\x00\xb6\x95\x7d\x79\xdc\x10\x95\xd5\x25\x8d\xa5\xac\x68\x8a\x00\xe5\x2c\x68\x0f\x63\x84\xb4\x05\x7a\x96\x3c\x67\xab\xb8\x00\x00\x5d\x83\x1e\x91\x7e\x01\x21\x50\xd6\xda\xb9\xea\x84\xde\x41\x58\x09\x13\x2a\xa2\x53\xa9\x84\xd1\x25\xcf\xf7\x66\x34\x16\x68\x2b\x13\x9a\xff\x45\xdf\xb5\xe2\xa9\x84\x8a\xe8\x1b\xba\x82\x3e\xab\x94\xde\x17\x52\xaf\x21\x2a\x05\x35\xa7\x21\xcd\x96\x21\x95\xa9\xd4\x30\x12\x8d\x7a\xe8\x11\x58\x34\x2a\xcf\xa2\xd1\x9e\x05\xdc\x2d\x3c\x1a\x95\x77\x10\x22\x1d\x62\xe1\xa9\x30\x69\xaf\x6d\x4f\xa8\x74\x66\x58\x1a\x5a\x20\x7f\xcd\x7a\x59\x29\xca\x5a\x71\x20\xcb\xc7\xb9\x9d\x81\xd2\xe3\x04\x8b\xac\x5b\x87\x94\x49\xd7\xbc\x84\x32\xec\xd6\x23\x16\x1e\xe5\xd6\x23\xf2\xd8\xad\x47\x37\x1d\xec\xb8\xf5\x88\xbc\x03\xdd\x7a\xbf\x85\xa7\x73\xeb\x3d\xb6\xf5\xd9\x62\x70\x4e\xaf\x1e\xde\xd3\xf1\xf5\xd5\x34\x2a\x55\xc0\x79\x91\x6d\xcc\x0a\x27\x54\xe5\x01\xa2\x51\x69\x35\x80\xef\x82\xfc\x12\x74\x67\x97\xf9\x1a\x9a\xfd\x75\xd1\x6d\x1c\x52\x45\x84\x6a\xb5\xcc\x88\x2a\x52\xae\x02\x41\x97\x0d\xcf\x0c\xdb\x99\x69\x49\xb2\x41\x67\xb6\xb2\x0e\x29\x66\x72\x45\x55\x74\xcc\x4b\x9b\x05\x53\x03\xaa\x39\xbb\xfc\x99\x12\xd5\xa0\x4f\x50\x2f\x68\xdc\x52\xab\xa4\x8a\x14\x14\x81\x0a\xdd\xce\xfa\xe6\x14\x9b\x35\xd3\x3c\xf4\xb3\x73\x55\x01\x51\x55\xcc\xd5\x2a\x62\x0e\x63\x82\xaa\x4e\x33\x1d\x29\xa6\x39\x50\x31\xe2\xd8\x2e\x97\x86\xa4\x13\xa8\xd1\x56\xc2\x31\xf5\x05\x1a\x43\xcc\xc3\x06\x5b\x4d\x6b\x9a\xe1\x05\xe5\xda\xd9\x75\x4e\x61\xf2\x98\x9e\xc9\x0a\xea\x1f\xe9\x08\xc6\x05\x95\x32\x52\x1b\x50\x6f\xc4\xf8\x11\xe7\x44\xd1\xa8\x2e\x4b\x60\x43\x4c\xf4\x1e\xd6\x94\x2e\xc1\x5e\x54\xf0\xb8\x87\xaa\x14\x74\x1b\x70\x75\x0e\xcc\x41\x6a\x82\x77\x10\x45\x94\xb6\xa0\x7a\xb5\xfd\xd6\x44\xef\x56\xef\x84\xd2\x0a\x15\x13\x0e\xe1\x3d\xe3\xbd\x63\x4c\x91\xd2\xd4\x05\x57\xef\x31\xcd\x60\x63\x7c\x6d\x9f\x9c\x9a\xd8\xe5\xe2\x90\xde\x29\xa8\x1e\x72\x12\x5e\x02\xae\x50\x25\x4b\x7a\x9f\x29\x9f\x47\x3c\x57\x88\x94\x04\xbe\xd5\x14\x94\x76\x40\x27\xf8\x16\x64\xc5\x11\xbd\x1f\xa4\x52\x48\xbf\xa0\x7f\xc8\xcb\xc9\x61\x4c\xe3\x1b\x84\xbb\x38\xda\xf0\x2a\x04\xc6\x19\x3e\x09\xbf\x7a\x7e\xee\x19\x47\x47\x62\xea\x08\x14\x1d\x91\x66\x31\x74\x74\x57\xd6\x16\x82\x8e\xc8\x3a\x08\x3f\xf7\x5b\x76\x2a\xf4\xdc\x63\x15\x63\x67\x9c\xc5\xe7\x05\xcf\xdd\xfd\x6e\xaf\xb9\x02\x0c\x80\x03\xf1\x2b\x9e\x96\x8a\x78\x1a\x6b\x6c\x25\x18\x6d\x91\xe3\xa3\x2f\x04\x36\x1c\x7e\x28\x19\x18\xb1\xed\x28\x27\x76\x4a\x63\x27\x1e\xd9\x39\xb8\xe3\xc4\x4e\x59\x07\x3a\xf1\x3e\xcb\x4e\xe7\xc4\xa3\x56\xf5\x79\x6d\x79\x4e\x1f\xde\xde\x92\xf9\x75\xbb\x8d\x9a\x84\x3c\x18\x5e\x1a\xd4\x04\xcb\x7f\x76\x09\x08\x34\x98\xf3\xe2\xac\x7d\x96\x77\x1e\x81\x36\x9a\x9c\x23\x24\xa5\x03\xd5\x6f\x51\x50\x6a\x01\xaa\x0e\x33\xaa\x04\x11\x09\xa8\xfa\x50\x59\x16\xbc\x2b\xc8\x4e\x1c\x57\x14\x19\x36\xfd\xe0\x45\x56\x50\x78\xc4\x54\x81\x67\xd1\xa6\xe9\x6d\x1d\xd8\xf9\x83\x34\x01\xfa\xca\x90\x68\x38\x2e\x86\x23\x68\x70\x64\x8f\x88\x9d\x41\x39\x36\x6a\x1c\xdb\x69\xb7\xe2\x65\xb0\xfd\x41\x91\x32\x66\xc1\xa9\x62\xc4\x69\x03\x47\x47\x9a\x9d\x37\x3a\x76\x76\x25\x7f\x2d\xc0\x9f\x32\x44\xb6\xc9\x62\x2c\x4c\x02\x76\xef\xcd\x30\x71\x6d\x6e\x43\x08\x84\xfd\xfe\x07\x4d\xe1\x31\xec\xe2\xae\xe1\x39\xca\xcf\x5d\xc2\xd8\xd9\xdd\x1b\xc4\x77\x3c\xde\x25\xe9\x40\xb7\xdf\x63\xd5\xe9\x7c\x7f\xcc\x24\x0e\x80\xe4\xac\xf5\xe1\x8b\x6d\xf7\xaf\xe9\xfa\x63\x2b\x09\x7f\x86\x21\xd2\x98\x27\x4f\x38\x37\xb2\xdb\x95\x6a\x2a\x44\x71\xe0\xbe\x6d\x1b\x51\x5b\x1c\x56\x9f\x94\xf5\x8d\x87\xf3\x28\xbb\x14\x28\x79\x3e\xb9\xa2\x65\xdb\xa1\x10\x19\x1a\xc0\x23\x82\x63\x48\x8c\x0d\x8b\xe1\xef\x22\xb6\x02\x62\xa8\xf5\x41\xa1\x30\xa2\xfd\xa9\x82\xc0\x65\x40\xef\xfe\x67\xc5\xff\xed\x6f\x4b\x5e\x2f\x3b\x3a\xc4\xff\x0f\x85\xff\x7d\x31\xe0\xf2\x71\xc5\xeb\x06\x55\xc0\x93\x0f\xb9\xcb\xc7\x07\x46\xe9\x28\x27\x1f\x90\xc3\x5e\x3e\xf8\x8d\xcf\x8e\x9b\x0f\xb4\x3f\xd0\xcf\xdd\x16\x9c\xce\xd1\x1d\x36\xf4\xc5\xec\x59\xeb\x80\xdd\x4f\xa5\xfe\x7f\xbe\x3b\x50\xc5\x73\x0d\xac\x4a\xfa\xbf\xfd\xed\x41\x1f\x47\xf0\x7d\xa5\x5e\xea\x02\xd9\xd6\xa6\x90\xd7\xa3\xaa\x97\x95\x80\x9d\xb0\x0b\xe8\xd9\x32\xa3\xf4\x49\xa7\x34\xb1\x55\x70\x4a\x66\x77\x64\xf3\x81\x6a\xc4\x6e\x41\xe1\x0d\x6d\x45\x46\xd5\x87\x9d\x10\xe5\x75\x40\xcd\xcf\x96\xc9\xb3\xbc\x8c\xb7\x03\x8d\x7d\x77\x90\xf3\xda\x61\x1f\xe3\x99\x63\x32\xdf\xf1\x3e\x8f\x88\x4a\x87\x24\x1b\x97\xce\x0f\xec\xb6\x22\xd3\x21\xe3\xa0\xd8\x1c\xb7\xe4\x54\xd1\x39\x62\x49\x5f\xa7\x07\x67\xcd\xc4\x06\x3f\x57\x7c\xcd\xd9\xa6\xa1\x28\x73\x7e\x6f\x90\x10\xbb\xa1\x06\x8f\x1b\xf7\x76\xcd\x31\xa3\x8e\x72\x55\xb7\x38\xf6\xd7\xb1\x6f\x3e\x77\x9c\xd6\x2d\xed\x40\xcf\xdd\x6b\xdd\xe9\xdc\x77\xdc\xb0\xbf\xc4\xd6\xcd\xcd\xef\x69\x8f\x67\x17\xf8\x9b\x0a\x78\xa9\xa4\x24\xa4\x8e\x7b\x66\x48\x09\xf5\xe1\xb3\x5a\x53\x86\xae\x4b\x9a\xaa\xaf\x35\xed\xf4\x88\x53\x46\x7a\x46\xe7\x90\x97\x6a\xec\x97\x5f\x01\xf9\x2b\x64\xa1\xbd\x66\xdf\x05\x82\x4b\x4d\xba\x01\x9d\x51\x44\x57\x8a\x64\x95\xbc\x2b\xc3\x6e\xbe\xd7\xcf\x9b\x1a\xc3\x9c\x96\x2b\xc0\x3c\x75\x49\xbb\x0e\x72\x5e\xd2\xa9\xf8\xc3\x08\xbb\x59\x92\x97\x3c\x90\x65\x45\x09\xd9\x85\xac\xad\x8f\x33\xd8\x5a\x85\x84\xfa\x31\x2f\x3b\x0d\xed\x5e\xd0\x39\xb1\x94\x0c\x29\xd3\x4b\x1c\x33\xbb\x3b\x6f\xe1\x88\x40\xdb\x91\x61\xa3\x6b\xe0\x7b\xe9\xad\x90\xda\x69\x77\x50\x1c\xb9\x34\x3e\x3a\x78\xfe\x17\x00\x00\xff\xff\xb3\x52\x86\x2c\x00\x40\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 28672, mode: os.FileMode(436), modTime: time.Unix(1516735217, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0_create_users_table.up.sql": _0_create_users_tableUpSql,
	"0_drop_users_table.down.sql": _0_drop_users_tableDownSql,
	"1_create_events_table.up.sql": _1_create_events_tableUpSql,
	"1_drop_events_table.down.sql": _1_drop_events_tableDownSql,
	"2_create_matches_table.up.sql": _2_create_matches_tableUpSql,
	"2_drop_matches_table.down.sql": _2_drop_matches_tableDownSql,
	"3_create_alliances_table.up.sql": _3_create_alliances_tableUpSql,
	"3_drop_alliances_table.down.sql": _3_drop_alliances_tableDownSql,
	"4_create_reports_table.up.sql": _4_create_reports_tableUpSql,
	"4_drop_reports_table.down.sql": _4_drop_reports_tableDownSql,
	"5_add_event_type.up.sql": _5_add_event_typeUpSql,
	"5_remove_event_type.down.sql": _5_remove_event_typeDownSql,
	"6_add_bluewon.down.sql": _6_add_bluewonDownSql,
	"6_remove_bluewon.up.sql": _6_remove_bluewonUpSql,
	"7_add_photos_table.up.sql": _7_add_photos_tableUpSql,
	"7_remove_photos_table.down.sql": _7_remove_photos_tableDownSql,
	"8_add_isdmin.up.sql": _8_add_isdminUpSql,
	"8_remove_isadmin.down.sql": _8_remove_isadminDownSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0_create_users_table.up.sql": &bintree{_0_create_users_tableUpSql, map[string]*bintree{}},
	"0_drop_users_table.down.sql": &bintree{_0_drop_users_tableDownSql, map[string]*bintree{}},
	"1_create_events_table.up.sql": &bintree{_1_create_events_tableUpSql, map[string]*bintree{}},
	"1_drop_events_table.down.sql": &bintree{_1_drop_events_tableDownSql, map[string]*bintree{}},
	"2_create_matches_table.up.sql": &bintree{_2_create_matches_tableUpSql, map[string]*bintree{}},
	"2_drop_matches_table.down.sql": &bintree{_2_drop_matches_tableDownSql, map[string]*bintree{}},
	"3_create_alliances_table.up.sql": &bintree{_3_create_alliances_tableUpSql, map[string]*bintree{}},
	"3_drop_alliances_table.down.sql": &bintree{_3_drop_alliances_tableDownSql, map[string]*bintree{}},
	"4_create_reports_table.up.sql": &bintree{_4_create_reports_tableUpSql, map[string]*bintree{}},
	"4_drop_reports_table.down.sql": &bintree{_4_drop_reports_tableDownSql, map[string]*bintree{}},
	"5_add_event_type.up.sql": &bintree{_5_add_event_typeUpSql, map[string]*bintree{}},
	"5_remove_event_type.down.sql": &bintree{_5_remove_event_typeDownSql, map[string]*bintree{}},
	"6_add_bluewon.down.sql": &bintree{_6_add_bluewonDownSql, map[string]*bintree{}},
	"6_remove_bluewon.up.sql": &bintree{_6_remove_bluewonUpSql, map[string]*bintree{}},
	"7_add_photos_table.up.sql": &bintree{_7_add_photos_tableUpSql, map[string]*bintree{}},
	"7_remove_photos_table.down.sql": &bintree{_7_remove_photos_tableDownSql, map[string]*bintree{}},
	"8_add_isdmin.up.sql": &bintree{_8_add_isdminUpSql, map[string]*bintree{}},
	"8_remove_isadmin.down.sql": &bintree{_8_remove_isadminDownSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

