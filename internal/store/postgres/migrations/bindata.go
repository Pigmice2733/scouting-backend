// Code generated by go-bindata.
// sources:
// 0_create_users_table.up.sql
// 0_drop_users_table.down.sql
// 10_add_reports_delete_cascade.up.sql
// 10_remove_reports_delete_cascade.down.sql
// 11_add_lat_long.up.sql
// 11_drop_lat_long.down.sql
// 12_add_end_date_rename_start_date.up.sql
// 12_drop_end_date_rename_start_date.down.sql
// 1_create_events_table.up.sql
// 1_drop_events_table.down.sql
// 2_create_matches_table.up.sql
// 2_drop_matches_table.down.sql
// 3_create_alliances_table.up.sql
// 3_drop_alliances_table.down.sql
// 4_create_reports_table.up.sql
// 4_drop_reports_table.down.sql
// 5_add_event_type.up.sql
// 5_remove_event_type.down.sql
// 6_add_bluewon.down.sql
// 6_remove_bluewon.up.sql
// 7_add_photos_table.up.sql
// 7_remove_photos_table.down.sql
// 8_add_isdmin.up.sql
// 8_remove_isadmin.down.sql
// 9_add_reports_cascade.up.sql
// 9_remove_reports_cascade.down.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0_create_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\x56\xd0\xe0\xe2\x04\x31\xf2\x12\x73\x53\x15\x42\x5c\x23\x42\xc0\x2a\xfc\x42\x7d\x7c\x14\x42\xfd\x3c\x03\x43\x5d\x75\xb8\x38\x33\x12\x8b\x33\x52\x53\x02\x12\x8b\x8b\xcb\xf3\x8b\x52\x50\x55\x71\x69\x02\x02\x00\x00\xff\xff\xe1\x96\xd7\xd2\x62\x00\x00\x00")

func _0_create_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_create_users_tableUpSql,
		"0_create_users_table.up.sql",
	)
}

func _0_create_users_tableUpSql() (*asset, error) {
	bytes, err := _0_create_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_create_users_table.up.sql", size: 98, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0_drop_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\xbd\x6d\xc5\x8d\x11\x00\x00\x00")

func _0_drop_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_drop_users_tableDownSql,
		"0_drop_users_table.down.sql",
	)
}

func _0_drop_users_tableDownSql() (*asset, error) {
	bytes, err := _0_drop_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_drop_users_table.down.sql", size: 17, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __10_add_reports_delete_cascadeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcb\xbd\xaa\x02\x31\x14\xc4\xf1\xfe\x3e\xc5\x94\xbb\xcf\x70\xab\x63\xce\xac\x2c\x86\x64\x39\x89\x85\xd5\x62\x11\x1b\xf1\x83\x44\x0b\xdf\x5e\x16\x59\x6c\x6c\x66\xe0\x07\x7f\xf1\x99\x86\x2c\x1b\x4f\xd4\x72\xbf\xd5\x47\x83\x5a\x9c\xe0\x62\x48\xd9\x64\x0c\x79\xf5\xf9\xf3\xa5\xce\xa7\x73\x79\xfd\xff\xfd\x4a\x45\x15\x43\x34\x8e\xdb\x80\x1d\x0f\xdd\x9a\xf4\x30\x0e\x34\x06\xc7\x84\x67\x2b\xb5\x75\xcb\x5e\x8f\x97\xd2\x23\x06\xec\x27\x95\x4c\x38\x49\x4e\x94\x8b\x28\x3d\xbf\xf2\x0e\x00\x00\xff\xff\xcf\x01\x46\xde\xa7\x00\x00\x00")

func _10_add_reports_delete_cascadeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__10_add_reports_delete_cascadeUpSql,
		"10_add_reports_delete_cascade.up.sql",
	)
}

func _10_add_reports_delete_cascadeUpSql() (*asset, error) {
	bytes, err := _10_add_reports_delete_cascadeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10_add_reports_delete_cascade.up.sql", size: 167, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __10_remove_reports_delete_cascadeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x0b\x0e\x09\x72\xf4\xf4\x0b\x81\x89\xc7\x43\xe8\xd4\xa2\xf8\xb4\xec\xd4\x4a\x6b\x2e\x6c\x5a\x1d\x5d\x5c\x14\xdc\xfc\x83\x5c\x3d\xdd\xfd\x14\xbc\x5d\x23\x35\x60\x5a\x34\x15\x82\x5c\xdd\x5c\x83\x5c\xfd\x9c\x5d\x83\x15\x4a\x8b\x53\x8b\x8a\x35\x40\x64\x5e\x62\x6e\xaa\xa6\x82\xbf\x9f\x42\x68\x80\x8b\x63\x88\xab\x82\xb3\x63\xb0\xb3\xa3\x8b\x2b\x20\x00\x00\xff\xff\xd6\xa5\x2c\xc4\x95\x00\x00\x00")

func _10_remove_reports_delete_cascadeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__10_remove_reports_delete_cascadeDownSql,
		"10_remove_reports_delete_cascade.down.sql",
	)
}

func _10_remove_reports_delete_cascadeDownSql() (*asset, error) {
	bytes, err := _10_remove_reports_delete_cascadeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10_remove_reports_delete_cascade.down.sql", size: 149, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __11_add_lat_longUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x49\x2c\x51\x28\x4a\x4d\xcc\xb1\xe6\x22\xa0\x2e\x3f\x2f\x1d\xaa\x10\x10\x00\x00\xff\xff\x85\xb1\x54\x59\x51\x00\x00\x00")

func _11_add_lat_longUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__11_add_lat_longUpSql,
		"11_add_lat_long.up.sql",
	)
}

func _11_add_lat_longUpSql() (*asset, error) {
	bytes, err := _11_add_lat_longUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "11_add_lat_long.up.sql", size: 81, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __11_drop_lat_longDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x49\x2c\xb1\xe6\x22\xa4\x26\x3f\x2f\xdd\x9a\x0b\x10\x00\x00\xff\xff\x97\xf4\x31\x93\x49\x00\x00\x00")

func _11_drop_lat_longDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__11_drop_lat_longDownSql,
		"11_drop_lat_long.down.sql",
	)
}

func _11_drop_lat_longDownSql() (*asset, error) {
	bytes, err := _11_drop_lat_longDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "11_drop_lat_long.down.sql", size: 73, mode: os.FileMode(420), modTime: time.Unix(1519609559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __12_add_end_date_rename_start_dateUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xcd\x4b\x71\x49\x2c\x49\x55\x08\xf1\xf4\x75\x0d\x0e\x71\xf4\x0d\x08\x89\x52\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\xb1\xe6\x02\x04\x00\x00\xff\xff\x34\x34\x21\xbd\x3c\x00\x00\x00")

func _12_add_end_date_rename_start_dateUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__12_add_end_date_rename_start_dateUpSql,
		"12_add_end_date_rename_start_date.up.sql",
	)
}

func _12_add_end_date_rename_start_dateUpSql() (*asset, error) {
	bytes, err := _12_add_end_date_rename_start_dateUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "12_add_end_date_rename_start_date.up.sql", size: 60, mode: os.FileMode(420), modTime: time.Unix(1519612517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __12_drop_end_date_rename_start_dateDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xcd\x4b\x71\x49\x2c\x49\xb5\xe6\x02\x04\x00\x00\xff\xff\x5f\x1d\xc8\xf2\x28\x00\x00\x00")

func _12_drop_end_date_rename_start_dateDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__12_drop_end_date_rename_start_dateDownSql,
		"12_drop_end_date_rename_start_date.down.sql",
	)
}

func _12_drop_end_date_rename_start_dateDownSql() (*asset, error) {
	bytes, err := _12_drop_end_date_rename_start_dateDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "12_drop_end_date_rename_start_date.down.sql", size: 40, mode: os.FileMode(420), modTime: time.Unix(1519612519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_events_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8b\x4d\x0a\xc2\x30\x10\x85\xd7\x99\x53\xbc\xa5\x42\x2f\x11\x65\x84\x60\x12\x4b\xf2\x84\xd6\x5d\xc1\x01\x41\xac\x60\x83\xe0\xed\x45\x44\xb7\xdf\xcf\xb6\xa8\xa7\x82\x7e\x13\x15\x61\x87\x7c\x20\x74\x08\x95\x15\xf6\xb4\xb9\x2d\x58\x89\xbb\xda\x0b\xd4\x81\xe8\x4b\x48\xbe\x8c\xd8\xeb\xd8\x89\x9b\xa7\x9b\x7d\xf9\xe7\xca\xc7\x18\x3b\x71\xcb\xe5\xfe\x68\xf9\x67\x3a\x71\xe7\xa9\x19\x18\x92\x56\xfa\xd4\xf3\xf4\x8f\x65\xfd\x0e\x00\x00\xff\xff\x50\xda\x81\x7d\x7d\x00\x00\x00")

func _1_create_events_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_events_tableUpSql,
		"1_create_events_table.up.sql",
	)
}

func _1_create_events_tableUpSql() (*asset, error) {
	bytes, err := _1_create_events_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_events_table.up.sql", size: 125, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_drop_events_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x06\x04\x00\x00\xff\xff\x27\xe5\x89\x64\x11\x00\x00\x00")

func _1_drop_events_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_drop_events_tableDownSql,
		"1_drop_events_table.down.sql",
	)
}

func _1_drop_events_tableDownSql() (*asset, error) {
	bytes, err := _1_drop_events_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_drop_events_table.down.sql", size: 17, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_create_matches_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x4d\x6a\xc3\x30\x10\x46\xd7\xd2\x29\x66\x69\x83\x2e\xa1\x84\x71\x10\x91\xa5\x20\x4d\x69\xd2\x9d\x2b\x0f\x34\xf8\xaf\xd8\x72\xc1\xb7\x2f\x2e\xf5\xa6\x74\xfb\xde\xf7\xc1\x3b\x07\xd4\x84\x40\xfa\x64\x11\x4c\x05\xce\x13\xe0\xdd\x44\x8a\x30\x34\x39\x7d\xf0\x02\x85\x14\x1d\x6f\x40\x78\x27\xb8\x05\x53\xeb\xf0\x80\x2b\x3e\x94\x14\xfc\xc5\x63\xbe\x1e\x6e\xbf\xba\x17\x6b\x95\x14\x9f\x33\xb7\xcf\x94\xb9\xa5\xe7\xc0\x40\xa6\xc6\x48\xba\xbe\xd1\x9b\x92\xa2\x49\x79\x6d\xfa\x7f\xc4\x7b\xbf\xf2\xeb\x34\xc2\xc9\x7b\x8b\xda\x29\x29\x66\x6e\x63\x9a\x66\x06\xe3\x08\x2f\x18\x7e\x47\x7f\x59\xe5\x03\x9a\x8b\xdb\xa3\x8a\x23\xa9\x84\x80\x15\x06\x74\x67\x8c\xf0\x03\x97\xa2\xe3\xad\x94\xe5\x77\x00\x00\x00\xff\xff\x95\xc6\xa5\x34\xf2\x00\x00\x00")

func _2_create_matches_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_create_matches_tableUpSql,
		"2_create_matches_table.up.sql",
	)
}

func _2_create_matches_tableUpSql() (*asset, error) {
	bytes, err := _2_create_matches_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_create_matches_table.up.sql", size: 242, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_drop_matches_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x06\x04\x00\x00\xff\xff\xed\x06\x12\x35\x12\x00\x00\x00")

func _2_drop_matches_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_drop_matches_tableDownSql,
		"2_drop_matches_table.down.sql",
	)
}

func _2_drop_matches_tableDownSql() (*asset, error) {
	bytes, err := _2_drop_matches_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_drop_matches_table.down.sql", size: 18, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_create_alliances_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x41\x0a\x83\x30\x14\x44\xd7\xe6\x14\xb3\x34\xe0\x25\x54\xc6\x12\x0c\x09\x8d\x11\xec\xd2\xca\x87\x4a\xd5\x45\xad\x0b\x6f\x5f\xb0\xb4\x14\xba\x9d\x79\xef\x95\x81\x79\x24\x62\x5e\x58\xc2\x54\x70\x3e\x82\x9d\x69\x62\x83\x7e\x9a\xc6\x7e\x19\x64\x45\xaa\x92\xb9\x7f\x0e\xb7\x5a\x76\x44\x76\xf1\xa0\x5c\x6b\x6d\xa6\x92\x71\x2d\xa6\x4d\x50\x78\x6f\x99\xbb\xdf\x67\xd9\xe6\xab\x3c\xfe\x84\xca\x07\x9a\x93\x43\xcd\x4b\xfa\xa9\x6a\x04\x56\x0c\x74\x25\x1b\x1c\xa3\xac\xe9\x5d\x76\x9d\xa9\xa4\x75\xe6\xdc\xf2\x8b\x66\x78\x77\xb5\xd2\xaf\x00\x00\x00\xff\xff\x80\x51\xbd\xfc\xbc\x00\x00\x00")

func _3_create_alliances_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_create_alliances_tableUpSql,
		"3_create_alliances_table.up.sql",
	)
}

func _3_create_alliances_tableUpSql() (*asset, error) {
	bytes, err := _3_create_alliances_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_create_alliances_table.up.sql", size: 188, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_drop_alliances_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xcc\xc9\xc9\x4c\xcc\x4b\x4e\x2d\x06\x04\x00\x00\xff\xff\x17\xe1\x40\xdc\x14\x00\x00\x00")

func _3_drop_alliances_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_drop_alliances_tableDownSql,
		"3_drop_alliances_table.down.sql",
	)
}

func _3_drop_alliances_tableDownSql() (*asset, error) {
	bytes, err := _3_drop_alliances_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_drop_alliances_table.down.sql", size: 20, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_create_reports_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x6a\x86\x30\x10\x84\xcf\xe6\x29\xf6\x98\x40\x5e\x42\x7f\xd6\x12\x0c\x09\x8d\x11\xec\x31\x94\x85\x96\x56\x5b\x92\x58\xf0\xed\x8b\x4a\x40\x6b\x2f\x21\xcc\x7c\x3b\x33\x0f\x87\xb5\x47\xf0\x75\xa3\x11\x54\x0b\xc6\x7a\xc0\x51\xf5\xbe\x87\x48\xdf\x5f\x31\x27\xe0\xac\x3a\xbe\x14\xc1\xe3\xe8\x77\xc6\x0c\x5a\x4b\x56\xd1\x0f\xcd\xb9\xa3\xf5\x66\x4c\x21\xbf\xbe\xfd\x67\xbc\xa7\xe6\x73\x21\x68\xac\xd5\x58\x9b\xb3\x93\x29\x4c\x37\x3c\xe5\x90\xd3\x4d\x1d\x8c\x7a\x1e\x90\x97\x76\x09\xa5\x4e\xc2\x96\x22\x24\x03\x68\xad\x43\xf5\x64\xa0\xc3\x17\x5e\xf6\x0b\x70\xd8\xa2\x43\xf3\xc0\x1e\x96\x44\x31\xf1\xed\x9d\xc3\x44\x42\xb2\xea\x7c\x52\xb2\x2f\x27\xbb\x98\xf8\x07\xad\x7f\xf1\x32\xe0\x82\xef\x22\x1d\x3c\x13\xbf\x01\x00\x00\xff\xff\xf1\xac\xe6\x8d\x6b\x01\x00\x00")

func _4_create_reports_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_create_reports_tableUpSql,
		"4_create_reports_table.up.sql",
	)
}

func _4_create_reports_tableUpSql() (*asset, error) {
	bytes, err := _4_create_reports_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_create_reports_table.up.sql", size: 363, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_drop_reports_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\xb6\x06\x04\x00\x00\xff\xff\x55\x5c\x72\x90\x13\x00\x00\x00")

func _4_drop_reports_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_drop_reports_tableDownSql,
		"4_drop_reports_table.down.sql",
	)
}

func _4_drop_reports_tableDownSql() (*asset, error) {
	bytes, err := _4_drop_reports_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_drop_reports_table.down.sql", size: 19, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_add_event_typeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x83\x88\x84\x54\x16\xa4\x2a\x78\xfa\x85\xb8\xba\xbb\x06\x29\xf8\xf9\x87\x28\xf8\x85\xfa\xf8\x00\x02\x00\x00\xff\xff\x47\xcd\xa1\xbe\x38\x00\x00\x00")

func _5_add_event_typeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_add_event_typeUpSql,
		"5_add_event_type.up.sql",
	)
}

func _5_add_event_typeUpSql() (*asset, error) {
	bytes, err := _5_add_event_typeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_add_event_type.up.sql", size: 56, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_remove_event_typeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x83\x08\x85\x54\x16\xa4\x02\x02\x00\x00\xff\xff\xfa\x1d\x58\x8e\x28\x00\x00\x00")

func _5_remove_event_typeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_remove_event_typeDownSql,
		"5_remove_event_type.down.sql",
	)
}

func _5_remove_event_typeDownSql() (*asset, error) {
	bytes, err := _5_remove_event_typeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_remove_event_type.down.sql", size: 40, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_add_bluewonDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x53\x70\xf2\xf7\xf7\x71\x75\xf4\x03\x04\x00\x00\xff\xff\x08\x2a\x0a\x8b\x2e\x00\x00\x00")

func _6_add_bluewonDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_add_bluewonDownSql,
		"6_add_bluewon.down.sql",
	)
}

func _6_add_bluewonDownSql() (*asset, error) {
	bytes, err := _6_add_bluewonDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_add_bluewon.down.sql", size: 46, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_remove_bluewonUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x03\x04\x00\x00\xff\xff\xc2\xb9\xb0\x4c\x27\x00\x00\x00")

func _6_remove_bluewonUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_remove_bluewonUpSql,
		"6_remove_bluewon.up.sql",
	)
}

func _6_remove_bluewonUpSql() (*asset, error) {
	bytes, err := _6_remove_bluewonUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_remove_bluewon.up.sql", size: 39, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_add_photos_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xc8\xc8\x2f\xc9\x2f\x56\xd0\xe0\xe2\x2c\x49\x4d\xcc\x55\x08\x71\x8d\x08\x01\x4b\xfb\x85\xfa\xf8\xe8\x70\x71\x96\x16\xe5\xa0\x8b\x29\x28\x28\x28\x84\xfa\x79\x06\x86\xba\x6a\x80\xb4\xe8\x28\x94\x16\xe5\x68\x72\x69\x02\x02\x00\x00\xff\xff\x7a\x9d\xf7\x09\x64\x00\x00\x00")

func _7_add_photos_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_add_photos_tableUpSql,
		"7_add_photos_table.up.sql",
	)
}

func _7_add_photos_tableUpSql() (*asset, error) {
	bytes, err := _7_add_photos_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_add_photos_table.up.sql", size: 100, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_remove_photos_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xc8\xc8\x2f\xc9\x2f\x06\x04\x00\x00\xff\xff\xb4\x52\x78\x3f\x11\x00\x00\x00")

func _7_remove_photos_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_remove_photos_tableDownSql,
		"7_remove_photos_table.down.sql",
	)
}

func _7_remove_photos_tableDownSql() (*asset, error) {
	bytes, err := _7_remove_photos_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_remove_photos_table.down.sql", size: 17, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __8_add_isdminUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\x85\x30\x0c\x05\xd0\x55\xee\x2a\xe9\x6b\xde\xd7\x35\x01\x49\x06\x10\xac\x50\x50\x3f\x0c\xee\xef\x11\x86\xae\x08\x69\x54\xbc\x35\x9e\x82\xf4\x8e\x9f\x33\x17\xc3\x2c\xd9\xaf\x79\xa3\xb9\x53\xc5\x60\x1e\xb0\x24\xd1\xf5\x2f\xc9\xc0\xb1\x9d\x35\xbe\x00\x00\x00\xff\xff\xe7\x70\xa1\xca\x43\x00\x00\x00")

func _8_add_isdminUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__8_add_isdminUpSql,
		"8_add_isdmin.up.sql",
	)
}

func _8_add_isdminUpSql() (*asset, error) {
	bytes, err := _8_add_isdminUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "8_add_isdmin.up.sql", size: 67, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __8_remove_isadminDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x2c\x76\x4c\xc9\xcd\xcc\x03\x04\x00\x00\xff\xff\x54\xf1\x61\xd5\x25\x00\x00\x00")

func _8_remove_isadminDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__8_remove_isadminDownSql,
		"8_remove_isadmin.down.sql",
	)
}

func _8_remove_isadminDownSql() (*asset, error) {
	bytes, err := _8_remove_isadminDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "8_remove_isadmin.down.sql", size: 37, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __9_add_reports_cascadeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x0b\x0e\x09\x72\xf4\xf4\x0b\x81\x89\xc7\x43\xe8\xd4\xa2\xf8\xb4\xec\xd4\x4a\x6b\x2e\x6c\x5a\x1d\x5d\x5c\x14\xdc\xfc\x83\x5c\x3d\xdd\xfd\x14\xbc\x5d\x23\x35\x60\x5a\x34\x15\x82\x5c\xdd\x5c\x83\x5c\xfd\x9c\x5d\x83\x15\x4a\x8b\x53\x8b\x8a\x35\x40\x64\x5e\x62\x6e\xaa\xa6\x82\xbf\x9f\x42\x68\x80\x8b\x63\x88\xab\x82\xb3\x63\xb0\xb3\xa3\x8b\x2b\x20\x00\x00\xff\xff\xd6\xa5\x2c\xc4\x95\x00\x00\x00")

func _9_add_reports_cascadeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__9_add_reports_cascadeUpSql,
		"9_add_reports_cascade.up.sql",
	)
}

func _9_add_reports_cascadeUpSql() (*asset, error) {
	bytes, err := _9_add_reports_cascadeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "9_add_reports_cascade.up.sql", size: 149, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __9_remove_reports_cascadeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x0b\x0e\x09\x72\xf4\xf4\x0b\x81\x89\xc7\x43\xe8\xd4\xa2\xf8\xb4\xec\xd4\x4a\x6b\x2e\x6c\x5a\x1d\x5d\x5c\x14\xdc\xfc\x83\x5c\x3d\xdd\xfd\x14\xbc\x5d\x23\x35\x60\x5a\x34\x15\x82\x5c\xdd\x5c\x83\x5c\xfd\x9c\x5d\x83\x15\x4a\x8b\x53\x8b\x8a\x35\x40\x64\x5e\x62\x6e\xaa\x26\x20\x00\x00\xff\xff\x47\x73\x6b\x93\x83\x00\x00\x00")

func _9_remove_reports_cascadeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__9_remove_reports_cascadeDownSql,
		"9_remove_reports_cascade.down.sql",
	)
}

func _9_remove_reports_cascadeDownSql() (*asset, error) {
	bytes, err := _9_remove_reports_cascadeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "9_remove_reports_cascade.down.sql", size: 131, mode: os.FileMode(420), modTime: time.Unix(1519607267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5d\x6f\xe3\x36\xd6\xbe\xb6\x7f\x85\x1a\xa0\x85\xfd\x22\x6f\x46\xd4\xb7\x02\xcc\x4d\x3b\x5d\xa0\x17\xdb\x02\xdb\xf6\x6a\xb9\x08\x28\x89\x4a\x8d\x75\xec\xd4\x76\x66\x38\x33\x98\xff\xbe\x78\x78\x8e\x12\x7f\x88\xb2\x46\x23\x24\x9d\xc5\x5e\x38\xb1\x25\xf2\x90\x87\x3a\xe7\x79\x0e\x0f\x29\xbe\x7a\xe5\xfd\xb0\xae\xb4\x77\xab\x57\x7a\xa3\x76\xba\xf2\x8a\xf7\xde\xed\xfa\xff\x8b\xc5\xaa\x52\x3b\x75\x35\x7d\xf5\xca\xdb\xae\x1f\x36\xa5\xde\x5e\xe3\xbb\x7f\x53\x6e\xb4\xda\xe9\x9b\x87\xad\xde\x6c\x6f\x76\xaa\x58\xea\xab\x87\xfb\xab\xed\x9f\x4b\xba\x5d\x6d\xd6\xf7\x07\x37\xab\xf5\xbb\x55\x73\x5b\xf8\x37\xaa\xaa\x6e\x36\xfa\x7e\xbd\xd9\x6d\x6f\x2a\xbd\xd4\x3b\x7d\x53\xaa\x6d\xa9\xaa\x7d\x31\xc2\xbf\xd9\xe8\xbb\xf5\x5b\xed\x2a\x7a\x20\x54\x58\xa1\x4b\xb5\xbb\x59\xae\x57\xb7\xfb\x62\x04\x75\xe7\xf1\xd6\x41\xb5\xc0\x56\xd3\xab\xea\xa6\x82\x42\x1b\xbd\x52\x77\xfa\x66\xbb\x53\x9b\x9d\xbd\xb2\x2f\x28\x20\x41\x1d\x85\x0f\x44\x37\x83\xa4\xdf\xea\xd5\xee\x74\x94\xb8\x5b\x07\x77\xf7\xeb\x07\x4d\xfd\x3b\xb5\x2b\xff\xd0\xa7\x02\xb8\x3b\x87\xb7\xf7\x25\x84\x8d\x04\xb5\x5c\x2e\xd4\xaa\x6c\x91\x11\x92\x8c\xe3\x02\xfb\x52\xa2\x46\x4a\xf3\x14\x8e\x65\x44\x24\xe3\xf0\xf6\xbe\x84\x98\xc6\x18\x8a\xde\xec\xde\xdf\xef\xd7\x8d\x9b\x47\xbc\x77\x77\xbf\x6a\x62\xab\x16\xcb\x07\xfd\x6e\xbd\x3a\xba\xc3\x35\x9b\x9b\x4f\x42\x53\x5b\xe9\xfe\x8f\xf5\x6e\x7d\xda\xdb\xb4\xa9\x77\x70\x7f\x5f\x72\x66\xab\x2f\xb6\xd5\xdd\x62\x5f\x6a\xd6\x54\x5c\x6c\x95\xbd\xb5\x5f\x27\x3f\x30\xe9\x53\x5b\xce\x8f\x4d\xb9\xcd\x86\x1b\x77\xbb\x5d\xe3\xd7\x9b\x5f\xbc\x9f\x7f\xf9\xcd\xfb\xf1\xcd\x4f\xbf\x7d\x33\x9d\xde\xab\xf2\xdf\xea\x56\x7b\x77\x8b\xdb\x8d\xda\x2d\xd6\xab\xed\x74\xba\xb8\x83\x2c\x6f\x36\x9d\x5c\x14\xef\x77\x7a\x7b\x31\x9d\x5c\x94\xeb\xbb\xfb\x8d\xde\x6e\x5f\xdd\x7e\x58\xdc\xe3\x42\x7d\xb7\xc3\xbf\xc5\x9a\xfe\xbe\x5a\xac\x1f\x76\x8b\x25\x7e\xac\x6d\x85\x7b\xb5\xfb\xe3\x55\xbd\x58\x6a\x7c\xc1\x85\xed\x6e\xb3\x58\xdd\xda\x7b\xbb\xc5\x9d\xbe\x98\xce\xa7\xd3\xfa\x61\x55\x36\xdd\xfb\x87\x56\xd5\x0c\x5f\xbc\x7f\xfe\x0b\xcd\x5e\x7a\xf0\x02\x8f\xaa\xcd\xbd\x59\x73\x55\x6f\x36\xeb\xcd\xdc\xfb\x38\x9d\xdc\x7e\xb0\xbf\xbc\xeb\xd7\x1e\x7a\x75\xf5\xb3\x7e\x07\x21\x7a\x33\xb3\xdd\xc6\xef\xef\x1f\xea\x5a\x6f\xac\xd8\xf9\x7c\x3a\x59\xd4\xb6\xc2\x37\xaf\xbd\xd5\x62\x09\x11\x93\x8d\xde\x3d\x6c\x56\xf8\x79\xe9\xd5\x77\xbb\xab\x1f\x21\xbd\x9e\x5d\x40\x90\xf7\xed\x9f\xd7\xde\xb7\x6f\x2f\xa8\x27\xb6\xad\xf9\x74\xf2\x69\x3a\x9d\xbc\x55\x1b\xaf\x78\xa8\x3d\x6a\x87\x1a\x99\x4e\x6e\xa8\x3b\xaf\xbd\xc5\xfa\xea\x87\xf5\xfd\xfb\xd9\x77\xc5\x43\x7d\xe9\xdd\x7e\x98\x4f\x27\xe5\xf2\xc7\xa6\xa7\x57\x3f\x2c\xd7\x5b\x3d\x9b\x4f\xc7\xea\x0f\xc4\x90\x7c\x87\x20\xbd\xd9\x50\xbf\xf9\x62\xf1\x50\x5f\x7d\x8f\xae\xcf\xe6\x97\x28\x31\xfd\x34\x9d\xc2\x45\x3c\xb5\xdd\xea\x1d\x86\xfc\xa1\xdc\x41\x8a\xd5\x8f\x9f\xc7\x74\xb2\x58\xd5\x6b\xcf\x5b\x6f\xaf\xfe\xb6\x58\xea\x9f\x56\xf5\xfa\xb1\x1e\x3f\xc2\xe6\xfa\x9e\x04\xfb\x0c\x3d\x8f\x1f\xe3\x74\xb2\x5d\x7c\xb0\xbf\x17\xab\x5d\x12\x4d\x27\x77\xa0\x07\xef\x51\xe8\xdf\xd7\x95\xb6\x17\x7f\x5b\xdc\x69\x0f\x66\x72\x85\x6f\x68\xc7\x9a\xca\xac\x5e\x1c\xb7\x35\xf7\x7e\x56\x77\x7a\x36\xe7\x16\xd0\x26\x6b\x59\x2f\xae\xd0\xfa\xf4\x53\x47\xdd\x5f\x17\x1f\x50\xd7\xf6\xe6\xb0\x2a\x3a\xda\x59\x15\x7d\x9d\xcd\xf7\x7b\x7e\x28\x00\xaa\x9d\x13\x00\xe5\x66\xf3\x27\x45\x4f\x24\xb0\xf6\x6e\x21\x3f\x6d\xdf\x2c\x36\xb3\xb9\x57\xac\xd7\xcb\xfd\xda\x6a\xb9\x3d\xa3\xf9\xfb\x2d\x29\xae\x37\xb5\x2a\xf5\xc7\x4f\x7b\xb5\xd9\x24\x60\xe5\x37\x37\x6d\xa4\xfc\xfb\xfd\xaf\x7f\x2e\xbd\xd7\x6c\x19\xb3\x0b\x69\x44\x2d\x4d\x56\x48\xe3\x67\xd2\xf8\x7e\xfb\xa7\xae\xa5\x49\x03\x69\x7c\x4d\xff\xd3\x58\x1a\xbf\x94\x26\x15\xd2\xc4\x31\xd5\xc5\xf7\x34\x92\xa6\x0e\x9e\xae\xd7\x3e\x5d\x8b\x43\xfa\x5e\x87\xd2\xf8\xb5\x34\x31\xca\xfa\xd2\x64\x15\x5d\x87\x2c\xc8\xf6\x73\x69\xe2\x44\x9a\x20\x93\x26\xa8\xa4\x89\x34\xfd\x0f\x14\x5d\xaf\x7c\x69\x34\x3e\xe8\x4b\x24\x4d\x28\xa8\x3d\x81\x36\x43\x6a\x47\xc4\xd2\x44\x81\x34\x71\x29\x4d\x10\xd2\xf7\xd2\x27\x19\x75\x49\xbf\xd3\x4a\x9a\xb4\x94\x46\x44\xf4\xbb\xae\xa4\x09\xd1\x07\x94\x87\x9c\x8a\x74\x2c\x32\x69\x42\x7c\x42\x6a\x03\xe3\x84\xef\x71\x40\x6d\xf9\xc1\xd3\x75\x7c\xca\x82\x74\xc4\x77\x5b\xc6\xa7\x71\xc0\x78\x24\x39\x95\xb7\x9f\xbd\x71\xc5\x47\x0b\x69\x72\xe8\x97\x4a\x53\x05\xd2\x24\xc1\xfe\xf8\x5f\x34\x78\xeb\x7e\xa2\x8c\x09\x6d\x58\xdb\x20\xc7\x1e\x56\x4f\x27\x93\x0e\xeb\xb8\x9c\x4e\x26\x17\x1d\x01\xdd\xc5\xe5\x74\x32\x7f\x74\x6c\xb7\x1c\x74\xe7\xff\x2c\x2e\xed\x77\xc7\x02\xd3\x23\xfa\x9f\xd5\xe8\x1c\xd2\x3e\x02\xa4\x85\xb8\xeb\xd7\xc7\xee\xf2\x11\x40\x72\xed\x75\xeb\xe3\x01\x32\xae\xbd\x3c\xbb\xf4\xe0\xfb\xd7\xfb\xd0\x30\x8b\x02\x7f\x6e\xaf\xc3\xa3\xaf\xc9\xe3\x7f\x5f\x2d\xcc\x4c\xc4\x22\x4f\xfc\x34\x48\xd2\x4b\xcf\x9f\x7f\x9a\x4e\x14\xda\xff\xce\x6a\xfc\xd1\xaa\x79\xed\xb1\xb6\xe8\xdc\xb5\xfd\xfb\xe9\xf1\x81\xa8\xcb\x63\x6f\x3d\x8e\x91\xdf\xac\xdf\xad\xbe\xc8\x5b\x73\xf2\x0e\xeb\x71\xbe\xdb\x4b\xdb\xbc\xad\x48\xa4\xf1\x13\xf2\xb2\x63\x6b\x2d\x2a\x69\x92\x4a\x9a\x32\x26\x0f\x16\xc2\x65\xad\x0e\x8d\x06\x59\xab\x43\x16\x5b\xab\x73\x7e\x71\x62\xad\x0e\x39\x3d\xad\xb5\x5b\xa3\xf1\xac\xb5\x43\x1f\xb6\x56\x91\xbe\xa4\xb5\x76\x4e\xd9\x86\x93\x4c\x52\x12\x88\xc2\xc4\x94\x22\xb0\x04\xc8\x03\xa8\x4b\x98\x2d\x00\x5f\x4b\x13\x6a\x32\xbf\x3c\x92\xa6\x00\xf0\xd6\x44\x28\xaa\x90\x26\x09\xa5\x29\xb5\x34\x0a\x04\x50\x4a\x93\x25\xd2\x24\x20\x8b\x5c\x9a\x0c\x9f\x58\x9a\x2a\x26\x90\x85\xe9\x8a\x82\xe4\x66\x00\x7f\x98\x7b\x21\x4d\x05\x97\xd1\xd2\x88\x44\x9a\x38\xa7\x7e\xd9\x4f\x42\x04\xe4\xa7\xd2\xa4\x35\xd5\xcb\x73\x6a\x03\x6d\x41\x56\x54\x4b\x53\x45\xe4\x82\x45\x4d\x6d\x45\x29\xc9\x8f\x95\x34\x79\x49\x32\xd0\x7e\x94\x49\x53\xe5\xd4\x3f\x4b\xa8\x70\x59\x10\x67\x4e\x44\xa2\x62\xd6\x25\x25\x82\xb3\xf7\x2b\x76\x45\xb8\xac\x92\x26\x8a\x99\xf4\x42\x69\xc2\x48\x9a\x4c\x4b\x53\x81\x90\x7c\x69\x44\x45\xee\x5f\x55\xd2\xe4\x20\x40\x8c\x83\x4f\x64\x8b\xb2\x70\xf1\x12\x7d\x8b\xa4\x49\x52\x69\x02\x8c\x7d\x4c\xe4\x87\xe7\x80\x31\xc8\x6a\x69\x72\x26\x26\x10\x2a\xea\x68\x8c\x6d\x2a\x4d\x8e\x76\x4b\x22\xc9\x28\x27\x08\xc1\x33\xc1\xb3\x06\xac\x84\x15\x8d\x41\xcd\xc1\xc3\x31\x94\xe0\xb9\xf9\x42\x9a\x08\xe4\xc7\x7a\xb6\x41\xc9\x79\x73\x1b\x80\x29\xe7\x85\x5a\x70\xe9\x93\x9d\x38\x42\x99\xf3\x92\x7b\xc1\x4d\x6f\xad\xc7\xc2\x9d\x7e\xaa\x36\x00\x94\xbc\x34\x02\x75\x26\x83\xbe\x94\x3d\xe1\x2a\x60\x50\xb0\xa4\x5f\x51\x3c\xd7\xc5\xa0\x70\x45\xb0\x67\x09\x36\xad\x89\x45\x03\x8e\x67\x01\x4d\xc7\x6c\x8c\x6b\x75\x22\x4d\x9d\x12\xe4\x34\xf1\x6f\xd3\x76\xcd\x50\x94\x09\x82\x2d\xb8\x29\x5c\x5c\x67\x04\x2f\x0a\xe5\x32\x69\x8a\x88\xdc\x11\xd7\xd0\x87\x04\xae\xa7\x09\xae\x00\x37\x80\x00\xc4\xb3\x31\xc7\xbb\x55\x49\x71\xb0\x85\xa3\x92\x5c\x14\xf0\x00\x38\xc1\xfd\xa2\xa4\xf2\x70\xf5\x10\x30\xe9\x93\x1c\xc0\x05\x60\x26\xe3\xd8\xba\x62\x99\x8d\x1c\xd4\xcf\xb9\x6e\xd6\xc4\xe1\x8a\x63\x61\x8e\x89\x33\x45\x32\x23\x9f\x20\x0f\xf0\x02\x18\x4c\x34\xc1\xbd\x4a\x48\x3e\x20\x23\xaf\x29\x36\x4f\x32\x82\xb2\x8c\xa1\x3d\xcb\x08\xe6\x6d\xb9\x90\xae\x15\x3e\x7d\x57\xdc\x0e\x60\x2c\xf0\x4f\xe1\xa6\x4a\x08\x52\x01\xd5\xa0\x13\xc0\x97\x03\x6e\xfa\xd8\xd6\x30\xcc\xe9\x23\xb9\x01\x9e\x7e\xe9\xce\x53\xf4\xe9\xd3\x46\x5f\x08\xfa\x8c\x91\x18\x11\x87\xfa\x6a\xde\x80\x51\x94\xbf\x28\x18\x1d\x26\x9b\xbf\x6c\x96\xfd\x39\xc8\x13\x35\xb1\x3b\x82\xa0\x8a\x2d\x7f\x0f\x75\x50\xde\x96\x15\x47\x88\xd3\x04\x1a\x31\x79\x67\xc9\x04\x0e\xcf\x40\xd9\x06\xd1\x22\x20\x5a\x29\x4d\x21\xa4\xd1\x08\x72\x02\x69\x94\x4f\x08\x13\xd6\x84\x74\x82\x83\x35\xe1\xd3\xe7\xd8\xeb\x10\x70\xa1\x7e\x1c\x51\x30\x15\x3b\xe6\x0b\x6d\x83\x38\xc4\xc5\x5a\xc4\x90\x3f\xb5\xae\x08\x1c\x3b\x4f\x4b\xed\x7e\x9e\xe2\xee\xfd\x68\x6e\xe1\x50\x80\x7d\x20\x13\x2f\xec\x02\x07\xab\x2a\xcf\xc9\xbf\xe7\xbc\xa0\x93\x7b\x3b\x3c\xe1\xc0\xea\x23\x69\x82\xe4\xc9\xea\x9b\x90\x1a\x1c\xdd\x66\xf5\x08\x99\x6b\xce\x51\xe5\x21\xc9\x74\x58\x7d\xdb\xb8\x0d\x33\xfc\x36\x49\x8d\xed\xb7\xaf\x79\x9d\x9a\x7f\x9b\x8c\xbe\x1e\xd0\xa1\xc9\x88\x4e\xe0\xd2\x84\xfd\x20\x0d\x07\xf8\x41\x1e\xc7\xf9\x38\x7e\x70\x6e\x01\xf1\xeb\x23\x07\xc8\x29\x59\x0e\xca\x37\xee\x81\xff\x4d\xfa\xd7\xce\xcc\x23\x4e\x0d\x57\x9c\x2a\xe6\x6b\xf6\x77\x46\x61\x2c\xfa\x7b\x9c\x0a\xb6\x29\xe0\x82\xdb\x14\x4f\x6e\xe7\x07\xed\x09\x28\x84\xa2\xf8\x04\x82\x32\x05\x36\x75\xdb\xe6\x5a\xbd\x1e\xc5\x10\x4f\xeb\x25\x98\x1c\xaf\xe7\x7a\xf2\xb1\x1f\xf6\x6a\xa1\x9f\x5b\x7e\xce\x28\x8c\xe6\xa5\xbd\xd5\x66\xa7\x4d\xfc\xcf\x77\x5a\x11\xc4\x62\x24\xf2\x3a\xbb\x92\xff\xb5\xd2\x59\x97\xef\x16\x71\xb7\x9f\xc5\x1c\xdc\x81\x12\xd1\x5e\x90\x39\xfd\xac\xdf\xe8\x0d\x73\xb5\x7e\xb2\x1b\x6f\xeb\xbb\x23\xe3\xd4\xe1\xfa\xb5\xd3\xd7\xe7\x3e\x6b\x44\x46\x74\xbb\xfe\xfa\xb3\xe7\x45\x03\x3d\x6f\x24\xba\x6c\xdb\x14\x33\x9c\x22\x41\x05\x28\x87\x79\x8b\xaf\xa4\x29\x03\x4a\x78\x22\x42\xb3\x89\xdf\x94\x12\xb6\x70\x8d\xa2\xa4\x6c\x40\x14\xf0\x3c\x46\x48\x93\xc4\x9c\x0c\xf5\x69\x65\x0f\x6e\x03\xd3\xc7\xb5\x2a\xa1\xec\x46\x29\x38\x69\x29\x28\xc9\x8c\xb2\x59\xc8\x2b\x93\x15\x25\x64\xa3\x48\x9a\x22\xa5\x44\x72\x59\xd3\x7a\x8a\xca\x28\xc1\x99\xc1\xd5\xb5\x34\x82\xb3\x24\x89\x90\x26\x4b\x69\x45\x32\x60\x5a\x86\x9e\x39\x27\x76\xe1\xda\x05\xe4\xe5\x04\x0b\x31\x53\x69\x51\x48\x53\x71\x04\x5a\x45\x94\x29\xd2\x19\xf5\x19\x6e\x5f\x68\x69\xb2\x52\x9a\x2a\x93\x46\x17\xf4\x1f\xf5\xf2\x82\xfa\x81\xff\x69\x45\xc9\x66\x9d\x4a\x53\x2a\xca\x32\x89\x4c\x9a\x90\xe1\xa2\x2c\xa4\xd1\x31\x25\xdd\x93\x8c\xca\x26\xa9\x34\xa1\xa2\xfb\xa8\xa7\x72\x69\x44\x4e\xf5\xf2\x80\x60\xaa\x56\xd4\x27\xd0\x3c\xa0\x2f\xab\x69\x6c\xeb\xaa\x3d\x11\x0c\x18\x83\x2e\xd0\xc1\xae\xce\x56\x0e\xa8\x71\x9a\xcb\x10\x6c\x71\x0a\x23\x30\xe9\xd8\xaf\x75\x8c\x1e\x4e\x49\xfd\xe0\xe2\x9c\x56\xa3\xe1\x43\xa7\x4a\x4d\x2e\x25\x88\x5f\x74\x22\x79\xba\x0d\xee\xb9\x56\x42\x5d\xc4\xeb\x5a\x09\x0d\x52\xf2\x8e\x8c\x97\x70\x5c\x2b\xa1\x6e\x95\x06\x59\xad\x4b\x18\x5b\xad\x7b\x17\xe1\x89\xd5\xba\x24\xf5\xb4\xda\x33\x5a\x8d\x67\xb5\x5d\x2a\xfd\x25\xd6\x43\xdb\xf7\x66\x7e\xd9\x42\x68\xa6\x89\xc7\x12\xe0\x72\xf8\xc4\x63\xd1\xde\x4e\x11\x58\x67\x92\xd0\xee\x12\x70\x50\xa0\xa5\x51\x82\xf8\x0a\x56\x8d\xf2\xb9\xe0\xac\xb7\xcf\xf2\x72\xaa\x9b\xb3\x85\xfb\x3c\xa5\xaa\xc1\x4f\x35\xf1\x04\xbc\x06\x3c\x07\x0e\xb3\xab\x19\x9a\x42\x4a\x95\xb0\xd7\x14\xb4\x60\x87\x90\x13\xe5\xc0\x17\x7e\xca\x3c\x14\x51\x86\x1f\x1c\xd0\x78\x45\x84\x29\x1a\x2f\x66\x0a\xe6\xca\xaa\x22\x9e\xb4\xab\x02\x3e\x4f\xeb\x72\xe6\x24\x9f\xc2\x52\x70\xb6\x88\x28\x0c\x4d\x6a\x92\x9b\x66\xe4\x79\x45\x46\x32\xc1\xe5\xe0\x37\xd4\xc9\x7c\xd2\x29\xe4\x85\x48\xd4\xad\x4b\x5a\x2c\xb6\x2b\x05\x68\x5f\xd3\x8a\x43\x01\x5e\x56\xd2\x88\x94\x56\x4d\x72\x6e\x2b\xaf\x69\x97\x0f\x74\x07\x77\xe7\xcc\xbd\x18\x43\xcb\x93\x3e\xf5\x03\x63\x51\x26\xcc\xb5\x8a\x64\x57\x82\x78\x15\x3c\xa8\x02\x0a\xb3\xd3\x9c\xf6\x4b\x60\x3c\xd2\x9a\x56\x1e\xd2\xe2\x69\x61\x14\x7d\x87\xee\x88\x55\xca\x9c\xee\x65\xcc\xed\x78\xbe\x8f\xcf\x58\x93\x0e\xb9\xa2\xdf\x76\x21\x36\x24\x5b\xb2\xf1\x4b\x46\x71\x45\xc4\x8b\xd3\x71\x4e\xe8\xe4\x73\x1d\x2b\xb3\xe0\x55\x12\x45\x2b\x3c\xe0\x6e\x3c\x2f\xbb\x58\x1c\x93\xcc\x94\x17\x83\x11\x3b\xd8\xe7\x10\x52\x36\x0b\xfa\xa0\x3d\x55\xd1\x98\x40\x76\x9a\x9e\xda\xae\xcd\x7e\xc5\x34\x36\x18\xb3\x90\x51\xb6\x0d\x19\x3b\xfc\x66\x00\x34\x76\x48\xb3\xd8\xd8\xb9\x83\xfa\x08\x1c\x3b\x64\xf5\x42\xc7\xf3\x9a\x8d\x05\x8f\x67\xb4\x62\x7c\x0c\xa2\xe0\x65\x01\xf2\x74\x6f\xfa\x73\xd1\xba\x4d\xe9\x56\x4f\xf3\x5e\x80\x50\x43\xf5\x2e\x6a\xd7\x7c\x0f\x93\x80\x30\xa6\xff\xed\x06\xec\xd4\x6b\x90\x01\x3b\xa5\xb1\x01\x77\xec\xf0\x3f\x31\x60\xa7\xac\x9e\x06\x7c\x4e\xb3\xf1\x0c\xb8\x53\xab\x86\xe0\x5f\x74\x7b\x9e\xeb\xd5\x89\x2f\xa0\xf8\x88\x20\x16\xd3\x48\x4c\x55\xb3\x86\xe2\x23\xa2\x45\x50\xbc\x4e\x78\x51\x9e\xf7\xf6\x80\x36\x83\x98\x96\xd2\x4a\xb6\x4e\xbb\x79\x36\x7f\xda\x8a\x67\x37\x03\x04\x34\x9d\xc3\xb4\x32\x52\xbc\x07\x29\x26\xe8\xc6\x74\x31\xe1\xec\x8e\x5d\x38\x67\x9a\x04\x85\x21\x24\x00\x5d\x69\x86\x70\x3b\x1d\x03\x05\x45\xb4\x50\x1f\x6b\x9a\x7e\x82\xaa\xd0\x87\xd4\x27\xaa\xcd\x38\x9c\x40\x68\x81\x72\xd0\x05\x54\x04\xda\x41\x3f\xed\x74\x97\x83\x64\xdb\x0f\x45\x14\x09\x5a\x05\x55\x61\x4a\x08\xba\x8d\x41\x91\x09\xe9\x8f\xff\xb5\xa0\xe5\xc6\xb8\x24\x8a\x06\x8d\x82\x76\x73\xf6\xee\x80\x7f\xc3\xbb\x63\x0e\x0d\xa0\x5b\xde\x4c\x8f\x6b\xa2\xb2\x2a\xa7\xb1\x54\x05\xa5\x08\x30\x9d\x05\xed\x61\x8c\x10\xb6\xa0\x9f\x39\x6f\xfe\x6d\xb2\x65\xa0\x6b\xd0\x23\xc2\x2f\x20\x04\xa6\xb5\x76\x8f\x56\x44\xcf\x40\x14\xd2\x88\x92\xe8\x54\x95\xd2\xe8\x9c\x37\x0e\x27\x34\x16\xa8\xab\x38\x23\x8e\xb6\xed\xc6\x0b\xde\x2c\x0c\xfa\x46\x5f\x41\x9f\x45\x4c\xcf\x0b\xa1\x57\x1b\x95\x82\x9a\x63\xce\x74\x23\x94\x29\x1c\xd9\xee\x4e\x0b\x1d\x80\x45\x9d\xf2\x2c\x1a\x9d\x79\x9d\xe8\x08\x8f\x3a\xe5\xf5\x42\xa4\x3e\x1a\x8e\x85\x49\x67\x75\x7b\x44\xa5\x17\x86\xa5\xb6\xd7\xb5\x9e\x73\xbe\x5c\x96\x14\xb5\xe2\x83\x28\x1f\xbf\x6d\x06\x4a\x77\x13\x2c\xa2\x6e\x2d\x28\x92\xae\x78\x6f\x52\xbb\x59\x77\x68\x38\xc8\xac\x3b\xe4\xb1\x59\x77\xbe\x02\x77\x62\xd6\x1d\xf2\x7a\x9a\xf5\x79\x0d\xc7\x33\xeb\x33\xba\x35\xd1\xe2\x80\xa4\xf0\x78\x56\xdd\xfe\x86\xe1\x97\xcf\xa6\x31\x53\x05\x9c\x67\xc9\x5e\x56\x38\xa2\x59\x9e\x5d\xe7\xcf\x29\xdb\x9a\x67\x64\x97\xa0\x3b\xfb\xbe\x08\xef\x1d\x73\xd1\xad\x5d\xe3\x8f\x68\xb6\x9a\x27\x44\x15\x31\xcf\x02\x41\x97\x35\x67\x86\x6d\x66\x5a\xf1\xfe\xb7\x82\x67\xd6\x82\x7c\x26\x2d\x69\x16\x1d\xf2\xc2\x68\xc6\xd4\x80\xd9\x9c\x7d\x8f\x26\x26\xaa\x11\xbc\x93\x06\x34\x6e\xa9\x55\xd1\x8c\xd4\x2e\xa4\xc6\x9c\xf5\x4d\x79\x6b\x31\xd3\x3c\xfa\x67\x73\x55\x3e\x51\x55\xc8\xb3\x55\xbb\xad\x5a\xd0\xac\x4e\x33\x1d\x95\x4c\x73\xa0\x62\xf8\xb1\x7d\xef\x46\x50\x9f\x40\x8d\x76\x26\x1c\x52\x5b\xa0\x31\xf8\xbc\x5d\x88\xad\x49\x66\x5d\x11\xe5\xda\xec\x3a\x87\x30\x69\x48\x65\x92\x8c\xda\x47\x38\x82\x71\xc1\x4c\x19\xa1\x0d\xa8\x37\x60\xfc\x08\x53\xa2\x68\xcc\x2e\x73\x60\x43\x48\xf4\x2e\x2a\x0a\x97\xa0\x2f\x66\xf0\xb8\x87\x59\x29\xe8\xd6\xe7\xd9\x39\x30\x07\xa1\x49\xce\x7b\x36\x10\xb6\x60\xf6\x6a\xdb\xad\x88\xde\x6d\xbf\x23\x0a\x2b\xca\x90\x70\x08\xcf\x19\xcf\x1d\x63\x8a\x90\xa6\xca\x78\xf6\x1e\x52\x06\x1b\xe3\x6b\xdb\xe4\xd0\xc4\xbe\x77\x24\xe8\x99\x82\xea\x4b\xde\x3a\x0e\x5b\x29\x30\x4b\x56\xf4\x3c\x63\xfe\x1d\x70\xae\x10\x21\x09\x6c\xab\xce\x28\xec\x40\x9f\x9a\x6d\xe4\x61\x40\xcf\x07\xa1\x14\xc2\x2f\xf4\x5f\xf0\xe2\xb6\x08\x69\x7c\x7d\x71\x8a\xa3\x35\xaf\x42\x60\x9c\x61\x93\xb0\xab\xa7\x72\x4f\x38\xda\xe1\x53\x03\x50\xb4\x43\x9a\xc5\xd0\xce\x77\x84\x8f\x10\xb4\x43\x56\x2f\xfc\x3c\xaf\xd9\x58\xe8\x79\x46\x2b\xc6\xce\x30\x19\xb2\x01\x65\x44\xf0\x3c\x7d\xfb\xfa\x39\x5f\x25\x72\x6d\x84\xee\x7a\xa5\x08\x75\x11\xe3\xa3\x2d\x38\x36\x0c\xbe\x2d\x18\xe8\xd0\x6d\x90\x11\x3b\xa5\xb1\x11\x77\xbc\xc7\x7e\x62\xc4\x4e\x59\x3d\x8d\xf8\x9c\x66\xe3\x19\x71\xa7\x56\x4d\x5c\xfb\xa2\xfb\x69\x8f\x0f\x08\xf8\xba\xf6\x4c\x65\xbc\x4d\x1d\xa1\x05\xa8\x5a\x24\xbc\x7d\x50\xd1\xac\x0f\x33\xcb\x8c\x5f\x2f\xb5\x89\xe3\x82\x3c\xc3\x86\x1f\xbc\xc8\x0a\x0a\x0f\x98\x2a\x50\x16\x75\xea\x46\xd7\x96\x57\x48\x11\x26\xa0\xbf\x4a\x10\x0d\x87\x8e\xbd\x1a\xad\x23\x3b\xc0\x77\x5a\xe5\x58\xaf\x71\x1c\xee\x70\xe4\x2f\xad\xf5\x7b\x79\x4a\x97\x06\x63\xf9\x88\x53\x07\xf6\x8e\x38\x79\x59\xef\x38\x39\x23\xe3\x6b\xdc\x9e\x94\xf1\xda\x45\x16\x1f\xba\x89\xeb\x2d\xe9\xba\x79\x9b\x25\xa3\x68\xde\xb5\x1d\xc9\x3d\x3c\x83\xec\xdc\x25\x8c\x8d\xdd\x7d\x5c\xc9\x89\xc5\xbb\x24\xf5\x34\xfb\x33\x5a\x8d\x67\xfb\x5d\x2a\x7d\xc1\xa6\xa1\xf1\x1c\xe0\xe0\x10\x98\xe7\x34\xfd\xae\x95\x84\x41\xbb\x6a\x39\x36\xb2\xdb\x95\x2a\x9a\x88\xe2\x83\xfb\xb6\x6e\x40\x75\xf1\xb1\xfd\x89\xb9\xbf\x61\x7b\x1c\x65\x97\x02\x15\xe7\x93\xf9\x45\xb0\x36\x17\x69\x1b\xc0\x01\xce\xd1\x26\xc6\xba\x45\xfb\x29\x3d\x47\x0e\xd1\x56\xbb\x97\x2b\x74\xf4\x7e\x2c\x27\x70\x29\xd0\x98\xff\x8b\xe2\xff\xf1\x49\x47\xcf\x17\x1d\xf5\xb1\xff\xcf\xde\x9d\xea\xf0\x01\x97\x8d\x97\xbc\x6e\x50\xf8\x9c\x7c\x70\xbc\x33\xdc\x3a\x4a\x83\x8c\xbc\x45\x0e\x5b\x79\xeb\x89\x53\x27\x66\xde\x52\xbf\xa7\x9d\xbb\x35\x18\xcf\xd0\x1d\x3a\x34\x93\xd9\x17\x9d\x07\x9c\x1e\xdc\xf5\xf5\x1c\x60\x53\x66\x4f\x73\xe0\x32\xa7\xff\xc7\x87\xd8\x34\x7e\xd4\xbc\x66\xb7\xdf\x97\x8c\xdf\x9a\xb0\x5b\x4d\x0b\xda\x72\xb3\x3f\x13\xb0\x09\x3b\x9f\xca\xe6\x09\x85\x4f\x3a\xa6\xc4\x56\xc6\x21\x99\x3d\xda\x83\x3f\x98\x8d\xd8\x2d\x28\xbc\xa1\x2d\x4b\x68\xf6\x61\x13\xa2\xbc\x0e\xa8\xb9\x6c\x1e\x3d\xc9\x4b\x78\x3b\x50\xd7\x01\x36\x29\xaf\x1d\x36\x3e\x9e\x38\x92\xf9\x8e\xe7\x39\xc0\x2b\x1d\x92\xac\x5f\x3a\x8f\x7b\x3b\xf2\x4c\x87\x8c\x5e\xbe\xd9\xad\xc9\x58\xde\xd9\xa1\x49\x33\x4f\xf7\x5f\x34\x12\x6b\x3d\x3c\xef\x39\xb3\x4d\x6d\x5e\xe6\x3c\xb8\x26\x22\x76\xc3\x1c\x3c\xac\xdd\xdb\x35\xbb\x94\x1a\x64\xaa\x6e\x71\x6c\xaf\x5d\x27\x10\x9e\x18\xad\x5b\x5a\x4f\xcb\x3d\xab\xdd\x78\xe6\xdb\xad\xd8\x5f\x62\xeb\xe6\xfe\xe9\x8e\xc3\xd9\x05\xf6\x56\xfa\xbc\x54\xc2\xa7\xcc\x84\x0d\x33\xc4\x84\xfa\xb0\x59\xad\x29\x42\xd7\x39\xa5\xea\x2b\x4d\x3b\x3d\xc2\x98\x91\x9e\xd1\x59\xf0\x52\x8d\x3d\x42\xcc\x27\x7b\x85\x2c\xd4\xd7\x6c\xbb\x40\x70\xa5\xa9\x6f\x40\xe7\x98\x8f\x6f\x80\xac\x9c\x77\x65\xd4\x7c\x22\x4c\xb3\xa9\x51\xa4\xb4\x5c\x01\xe6\xa9\x72\xda\x75\x90\xf2\x92\x4e\xc1\x2f\x46\x94\x7c\xec\x83\xd0\x14\x65\x05\x11\xe9\x85\xa8\xad\xf1\x33\xe8\x5a\x08\x42\xfd\x90\x97\x9d\xda\x76\x2f\xe8\x94\x4f\xe6\x11\x14\xe9\x45\x8e\xcc\xee\xc9\x53\x18\xe0\x68\x27\x32\xac\x77\xb5\x9c\xde\x79\xe4\x52\x27\xf5\x7a\xf9\x91\xab\xc7\x63\x39\x4f\x6b\xbf\x9b\xb7\xe5\x5e\xd8\x63\x0e\x0f\x3e\x7d\xee\xa3\x56\xda\x8e\x06\x1c\xf2\x9a\x37\x7c\x20\xe5\x25\x4c\x6b\xd3\x1c\x85\xb9\x66\x1e\x31\x9f\x40\x95\x08\x5a\xc2\x0c\x1c\xc7\x87\x38\xc6\x67\x90\x45\xb7\x4a\x62\xbb\x76\x1c\x3f\x7b\x62\xdd\xad\x32\x7a\xda\x78\x97\x26\xe3\x59\xba\x53\x93\x66\x16\xf2\xa2\xf6\xde\x7a\x96\xef\xf3\x4d\xba\xff\x77\xba\xd0\x7f\xd7\xe9\x42\x6e\x73\x1a\x80\x10\x6e\x61\x16\x24\xba\x8e\xa1\x3e\xc2\x09\xb7\xa4\x5e\x50\x71\x56\xab\xb1\xd0\xa2\x5b\xa5\xbf\xc6\x79\x40\xae\xd3\xbd\xbf\x96\x43\xc9\xfe\x13\x00\x00\xff\xff\x4f\xa9\xa9\x0a\x00\x60\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 40960, mode: os.FileMode(420), modTime: time.Unix(1519612679, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0_create_users_table.up.sql": _0_create_users_tableUpSql,
	"0_drop_users_table.down.sql": _0_drop_users_tableDownSql,
	"10_add_reports_delete_cascade.up.sql": _10_add_reports_delete_cascadeUpSql,
	"10_remove_reports_delete_cascade.down.sql": _10_remove_reports_delete_cascadeDownSql,
	"11_add_lat_long.up.sql": _11_add_lat_longUpSql,
	"11_drop_lat_long.down.sql": _11_drop_lat_longDownSql,
	"12_add_end_date_rename_start_date.up.sql": _12_add_end_date_rename_start_dateUpSql,
	"12_drop_end_date_rename_start_date.down.sql": _12_drop_end_date_rename_start_dateDownSql,
	"1_create_events_table.up.sql": _1_create_events_tableUpSql,
	"1_drop_events_table.down.sql": _1_drop_events_tableDownSql,
	"2_create_matches_table.up.sql": _2_create_matches_tableUpSql,
	"2_drop_matches_table.down.sql": _2_drop_matches_tableDownSql,
	"3_create_alliances_table.up.sql": _3_create_alliances_tableUpSql,
	"3_drop_alliances_table.down.sql": _3_drop_alliances_tableDownSql,
	"4_create_reports_table.up.sql": _4_create_reports_tableUpSql,
	"4_drop_reports_table.down.sql": _4_drop_reports_tableDownSql,
	"5_add_event_type.up.sql": _5_add_event_typeUpSql,
	"5_remove_event_type.down.sql": _5_remove_event_typeDownSql,
	"6_add_bluewon.down.sql": _6_add_bluewonDownSql,
	"6_remove_bluewon.up.sql": _6_remove_bluewonUpSql,
	"7_add_photos_table.up.sql": _7_add_photos_tableUpSql,
	"7_remove_photos_table.down.sql": _7_remove_photos_tableDownSql,
	"8_add_isdmin.up.sql": _8_add_isdminUpSql,
	"8_remove_isadmin.down.sql": _8_remove_isadminDownSql,
	"9_add_reports_cascade.up.sql": _9_add_reports_cascadeUpSql,
	"9_remove_reports_cascade.down.sql": _9_remove_reports_cascadeDownSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0_create_users_table.up.sql": &bintree{_0_create_users_tableUpSql, map[string]*bintree{}},
	"0_drop_users_table.down.sql": &bintree{_0_drop_users_tableDownSql, map[string]*bintree{}},
	"10_add_reports_delete_cascade.up.sql": &bintree{_10_add_reports_delete_cascadeUpSql, map[string]*bintree{}},
	"10_remove_reports_delete_cascade.down.sql": &bintree{_10_remove_reports_delete_cascadeDownSql, map[string]*bintree{}},
	"11_add_lat_long.up.sql": &bintree{_11_add_lat_longUpSql, map[string]*bintree{}},
	"11_drop_lat_long.down.sql": &bintree{_11_drop_lat_longDownSql, map[string]*bintree{}},
	"12_add_end_date_rename_start_date.up.sql": &bintree{_12_add_end_date_rename_start_dateUpSql, map[string]*bintree{}},
	"12_drop_end_date_rename_start_date.down.sql": &bintree{_12_drop_end_date_rename_start_dateDownSql, map[string]*bintree{}},
	"1_create_events_table.up.sql": &bintree{_1_create_events_tableUpSql, map[string]*bintree{}},
	"1_drop_events_table.down.sql": &bintree{_1_drop_events_tableDownSql, map[string]*bintree{}},
	"2_create_matches_table.up.sql": &bintree{_2_create_matches_tableUpSql, map[string]*bintree{}},
	"2_drop_matches_table.down.sql": &bintree{_2_drop_matches_tableDownSql, map[string]*bintree{}},
	"3_create_alliances_table.up.sql": &bintree{_3_create_alliances_tableUpSql, map[string]*bintree{}},
	"3_drop_alliances_table.down.sql": &bintree{_3_drop_alliances_tableDownSql, map[string]*bintree{}},
	"4_create_reports_table.up.sql": &bintree{_4_create_reports_tableUpSql, map[string]*bintree{}},
	"4_drop_reports_table.down.sql": &bintree{_4_drop_reports_tableDownSql, map[string]*bintree{}},
	"5_add_event_type.up.sql": &bintree{_5_add_event_typeUpSql, map[string]*bintree{}},
	"5_remove_event_type.down.sql": &bintree{_5_remove_event_typeDownSql, map[string]*bintree{}},
	"6_add_bluewon.down.sql": &bintree{_6_add_bluewonDownSql, map[string]*bintree{}},
	"6_remove_bluewon.up.sql": &bintree{_6_remove_bluewonUpSql, map[string]*bintree{}},
	"7_add_photos_table.up.sql": &bintree{_7_add_photos_tableUpSql, map[string]*bintree{}},
	"7_remove_photos_table.down.sql": &bintree{_7_remove_photos_tableDownSql, map[string]*bintree{}},
	"8_add_isdmin.up.sql": &bintree{_8_add_isdminUpSql, map[string]*bintree{}},
	"8_remove_isadmin.down.sql": &bintree{_8_remove_isadminDownSql, map[string]*bintree{}},
	"9_add_reports_cascade.up.sql": &bintree{_9_add_reports_cascadeUpSql, map[string]*bintree{}},
	"9_remove_reports_cascade.down.sql": &bintree{_9_remove_reports_cascadeDownSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

