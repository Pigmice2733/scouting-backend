// Code generated by go-bindata.
// sources:
// 0_create_users_table.up.sql
// 0_drop_users_table.down.sql
// 1_create_events_table.up.sql
// 1_drop_events_table.down.sql
// 2_create_matches_table.up.sql
// 2_drop_matches_table.down.sql
// 3_create_alliances_table.up.sql
// 3_drop_alliances_table.down.sql
// 4_create_reports_table.up.sql
// 4_drop_reports_table.down.sql
// 5_add_event_type.up.sql
// 5_remove_event_type.down.sql
// 6_add_bluewon.down.sql
// 6_remove_bluewon.up.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0_create_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\x56\xd0\xe0\xe2\x04\x31\xf2\x12\x73\x53\x15\x42\x5c\x23\x42\xc0\x2a\xfc\x42\x7d\x7c\x14\x42\xfd\x3c\x03\x43\x5d\x75\xb8\x38\x33\x12\x8b\x33\x52\x53\x02\x12\x8b\x8b\xcb\xf3\x8b\x52\x50\x55\x71\x69\x02\x02\x00\x00\xff\xff\xe1\x96\xd7\xd2\x62\x00\x00\x00")

func _0_create_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_create_users_tableUpSql,
		"0_create_users_table.up.sql",
	)
}

func _0_create_users_tableUpSql() (*asset, error) {
	bytes, err := _0_create_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_create_users_table.up.sql", size: 98, mode: os.FileMode(436), modTime: time.Unix(1515212908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0_drop_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\xbd\x6d\xc5\x8d\x11\x00\x00\x00")

func _0_drop_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_drop_users_tableDownSql,
		"0_drop_users_table.down.sql",
	)
}

func _0_drop_users_tableDownSql() (*asset, error) {
	bytes, err := _0_drop_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_drop_users_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1515212908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_events_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8b\x4d\x0a\xc2\x30\x10\x85\xd7\x99\x53\xbc\xa5\x42\x2f\x11\x65\x84\x60\x12\x4b\xf2\x84\xd6\x5d\xc1\x01\x41\xac\x60\x83\xe0\xed\x45\x44\xb7\xdf\xcf\xb6\xa8\xa7\x82\x7e\x13\x15\x61\x87\x7c\x20\x74\x08\x95\x15\xf6\xb4\xb9\x2d\x58\x89\xbb\xda\x0b\xd4\x81\xe8\x4b\x48\xbe\x8c\xd8\xeb\xd8\x89\x9b\xa7\x9b\x7d\xf9\xe7\xca\xc7\x18\x3b\x71\xcb\xe5\xfe\x68\xf9\x67\x3a\x71\xe7\xa9\x19\x18\x92\x56\xfa\xd4\xf3\xf4\x8f\x65\xfd\x0e\x00\x00\xff\xff\x50\xda\x81\x7d\x7d\x00\x00\x00")

func _1_create_events_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_events_tableUpSql,
		"1_create_events_table.up.sql",
	)
}

func _1_create_events_tableUpSql() (*asset, error) {
	bytes, err := _1_create_events_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_events_table.up.sql", size: 125, mode: os.FileMode(436), modTime: time.Unix(1515212908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_drop_events_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x06\x04\x00\x00\xff\xff\x27\xe5\x89\x64\x11\x00\x00\x00")

func _1_drop_events_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_drop_events_tableDownSql,
		"1_drop_events_table.down.sql",
	)
}

func _1_drop_events_tableDownSql() (*asset, error) {
	bytes, err := _1_drop_events_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_drop_events_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1515212908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_create_matches_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x4d\x6a\xc3\x30\x10\x46\xd7\xd2\x29\x66\x69\x83\x2e\xa1\x84\x71\x10\x91\xa5\x20\x4d\x69\xd2\x9d\x2b\x0f\x34\xf8\xaf\xd8\x72\xc1\xb7\x2f\x2e\xf5\xa6\x74\xfb\xde\xf7\xc1\x3b\x07\xd4\x84\x40\xfa\x64\x11\x4c\x05\xce\x13\xe0\xdd\x44\x8a\x30\x34\x39\x7d\xf0\x02\x85\x14\x1d\x6f\x40\x78\x27\xb8\x05\x53\xeb\xf0\x80\x2b\x3e\x94\x14\xfc\xc5\x63\xbe\x1e\x6e\xbf\xba\x17\x6b\x95\x14\x9f\x33\xb7\xcf\x94\xb9\xa5\xe7\xc0\x40\xa6\xc6\x48\xba\xbe\xd1\x9b\x92\xa2\x49\x79\x6d\xfa\x7f\xc4\x7b\xbf\xf2\xeb\x34\xc2\xc9\x7b\x8b\xda\x29\x29\x66\x6e\x63\x9a\x66\x06\xe3\x08\x2f\x18\x7e\x47\x7f\x59\xe5\x03\x9a\x8b\xdb\xa3\x8a\x23\xa9\x84\x80\x15\x06\x74\x67\x8c\xf0\x03\x97\xa2\xe3\xad\x94\xe5\x77\x00\x00\x00\xff\xff\x95\xc6\xa5\x34\xf2\x00\x00\x00")

func _2_create_matches_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_create_matches_tableUpSql,
		"2_create_matches_table.up.sql",
	)
}

func _2_create_matches_tableUpSql() (*asset, error) {
	bytes, err := _2_create_matches_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_create_matches_table.up.sql", size: 242, mode: os.FileMode(436), modTime: time.Unix(1515212908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_drop_matches_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x06\x04\x00\x00\xff\xff\xed\x06\x12\x35\x12\x00\x00\x00")

func _2_drop_matches_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_drop_matches_tableDownSql,
		"2_drop_matches_table.down.sql",
	)
}

func _2_drop_matches_tableDownSql() (*asset, error) {
	bytes, err := _2_drop_matches_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_drop_matches_table.down.sql", size: 18, mode: os.FileMode(436), modTime: time.Unix(1515212908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_create_alliances_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x41\x0a\x83\x30\x14\x44\xd7\xe6\x14\xb3\x34\xe0\x25\x54\xc6\x12\x0c\x09\x8d\x11\xec\xd2\xca\x87\x4a\xd5\x45\xad\x0b\x6f\x5f\xb0\xb4\x14\xba\x9d\x79\xef\x95\x81\x79\x24\x62\x5e\x58\xc2\x54\x70\x3e\x82\x9d\x69\x62\x83\x7e\x9a\xc6\x7e\x19\x64\x45\xaa\x92\xb9\x7f\x0e\xb7\x5a\x76\x44\x76\xf1\xa0\x5c\x6b\x6d\xa6\x92\x71\x2d\xa6\x4d\x50\x78\x6f\x99\xbb\xdf\x67\xd9\xe6\xab\x3c\xfe\x84\xca\x07\x9a\x93\x43\xcd\x4b\xfa\xa9\x6a\x04\x56\x0c\x74\x25\x1b\x1c\xa3\xac\xe9\x5d\x76\x9d\xa9\xa4\x75\xe6\xdc\xf2\x8b\x66\x78\x77\xb5\xd2\xaf\x00\x00\x00\xff\xff\x80\x51\xbd\xfc\xbc\x00\x00\x00")

func _3_create_alliances_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_create_alliances_tableUpSql,
		"3_create_alliances_table.up.sql",
	)
}

func _3_create_alliances_tableUpSql() (*asset, error) {
	bytes, err := _3_create_alliances_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_create_alliances_table.up.sql", size: 188, mode: os.FileMode(436), modTime: time.Unix(1515212908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_drop_alliances_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xcc\xc9\xc9\x4c\xcc\x4b\x4e\x2d\x06\x04\x00\x00\xff\xff\x17\xe1\x40\xdc\x14\x00\x00\x00")

func _3_drop_alliances_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_drop_alliances_tableDownSql,
		"3_drop_alliances_table.down.sql",
	)
}

func _3_drop_alliances_tableDownSql() (*asset, error) {
	bytes, err := _3_drop_alliances_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_drop_alliances_table.down.sql", size: 20, mode: os.FileMode(436), modTime: time.Unix(1515212908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_create_reports_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x6a\x86\x30\x10\x84\xcf\xe6\x29\xf6\x98\x40\x5e\x42\x7f\xd6\x12\x0c\x09\x8d\x11\xec\x31\x94\x85\x96\x56\x5b\x92\x58\xf0\xed\x8b\x4a\x40\x6b\x2f\x21\xcc\x7c\x3b\x33\x0f\x87\xb5\x47\xf0\x75\xa3\x11\x54\x0b\xc6\x7a\xc0\x51\xf5\xbe\x87\x48\xdf\x5f\x31\x27\xe0\xac\x3a\xbe\x14\xc1\xe3\xe8\x77\xc6\x0c\x5a\x4b\x56\xd1\x0f\xcd\xb9\xa3\xf5\x66\x4c\x21\xbf\xbe\xfd\x67\xbc\xa7\xe6\x73\x21\x68\xac\xd5\x58\x9b\xb3\x93\x29\x4c\x37\x3c\xe5\x90\xd3\x4d\x1d\x8c\x7a\x1e\x90\x97\x76\x09\xa5\x4e\xc2\x96\x22\x24\x03\x68\xad\x43\xf5\x64\xa0\xc3\x17\x5e\xf6\x0b\x70\xd8\xa2\x43\xf3\xc0\x1e\x96\x44\x31\xf1\xed\x9d\xc3\x44\x42\xb2\xea\x7c\x52\xb2\x2f\x27\xbb\x98\xf8\x07\xad\x7f\xf1\x32\xe0\x82\xef\x22\x1d\x3c\x13\xbf\x01\x00\x00\xff\xff\xf1\xac\xe6\x8d\x6b\x01\x00\x00")

func _4_create_reports_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_create_reports_tableUpSql,
		"4_create_reports_table.up.sql",
	)
}

func _4_create_reports_tableUpSql() (*asset, error) {
	bytes, err := _4_create_reports_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_create_reports_table.up.sql", size: 363, mode: os.FileMode(436), modTime: time.Unix(1515212908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_drop_reports_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\xb6\x06\x04\x00\x00\xff\xff\x55\x5c\x72\x90\x13\x00\x00\x00")

func _4_drop_reports_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_drop_reports_tableDownSql,
		"4_drop_reports_table.down.sql",
	)
}

func _4_drop_reports_tableDownSql() (*asset, error) {
	bytes, err := _4_drop_reports_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_drop_reports_table.down.sql", size: 19, mode: os.FileMode(436), modTime: time.Unix(1515212908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_add_event_typeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x83\x88\x84\x54\x16\xa4\x2a\x78\xfa\x85\xb8\xba\xbb\x06\x29\xf8\xf9\x87\x28\xf8\x85\xfa\xf8\x00\x02\x00\x00\xff\xff\x47\xcd\xa1\xbe\x38\x00\x00\x00")

func _5_add_event_typeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_add_event_typeUpSql,
		"5_add_event_type.up.sql",
	)
}

func _5_add_event_typeUpSql() (*asset, error) {
	bytes, err := _5_add_event_typeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_add_event_type.up.sql", size: 56, mode: os.FileMode(436), modTime: time.Unix(1515212908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_remove_event_typeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x83\x08\x85\x54\x16\xa4\x02\x02\x00\x00\xff\xff\xfa\x1d\x58\x8e\x28\x00\x00\x00")

func _5_remove_event_typeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_remove_event_typeDownSql,
		"5_remove_event_type.down.sql",
	)
}

func _5_remove_event_typeDownSql() (*asset, error) {
	bytes, err := _5_remove_event_typeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_remove_event_type.down.sql", size: 40, mode: os.FileMode(436), modTime: time.Unix(1515212908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_add_bluewonDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x53\x70\xf2\xf7\xf7\x71\x75\xf4\x03\x04\x00\x00\xff\xff\x08\x2a\x0a\x8b\x2e\x00\x00\x00")

func _6_add_bluewonDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_add_bluewonDownSql,
		"6_add_bluewon.down.sql",
	)
}

func _6_add_bluewonDownSql() (*asset, error) {
	bytes, err := _6_add_bluewonDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_add_bluewon.down.sql", size: 46, mode: os.FileMode(436), modTime: time.Unix(1515212977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_remove_bluewonUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x03\x04\x00\x00\xff\xff\xc2\xb9\xb0\x4c\x27\x00\x00\x00")

func _6_remove_bluewonUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_remove_bluewonUpSql,
		"6_remove_bluewon.up.sql",
	)
}

func _6_remove_bluewonUpSql() (*asset, error) {
	bytes, err := _6_remove_bluewonUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_remove_bluewon.up.sql", size: 39, mode: os.FileMode(436), modTime: time.Unix(1515212963, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xdf\x6f\xdb\x38\x12\x7e\xb6\xfe\x0a\x6d\x80\x5d\xd8\x87\x5c\x22\xea\xb7\x02\xf4\x65\xdb\x1e\xd0\x87\xeb\x02\xb7\xdd\xa7\xe3\x21\xa0\x28\x32\x2b\x9c\x6d\xa5\xb2\xdd\xb2\x2d\xf2\xbf\x1f\x3e\x0e\x95\x38\xb6\x24\xfb\x5c\xa3\xd9\x07\xd9\xfa\xc5\xe1\x0c\x39\xf3\x7d\x33\xa4\xae\xaf\xfd\xd7\x4d\xa5\xfc\x3b\xb5\x54\xad\x58\xab\xca\x2f\xbf\xf8\x77\xcd\xdf\xcb\x7a\x59\x89\xb5\xb8\xf2\xae\xaf\xfd\x55\xb3\x69\xa5\x5a\xdd\xe0\x3c\xb8\x95\xad\x12\x6b\x75\xbb\x59\xa9\x76\x75\xbb\x16\xe5\x5c\x5d\x6d\xee\xaf\x56\x1f\xe7\xf4\xb8\x6a\x9b\xfb\x67\x0f\xab\xe6\xf3\xb2\x7b\xcc\xba\xd6\xea\x93\x5a\xae\xf7\x9b\x33\x6a\xfe\xec\xe9\x76\xfb\xb0\x6b\xbf\x10\x6b\xf9\xa7\xda\x17\x10\x92\x80\xe7\x8f\xb7\x25\x44\x9d\x04\x31\x9f\xd7\x62\x29\x7b\x64\x44\x24\x63\xf7\x85\x6d\x29\x71\x27\xa5\x55\xf7\x4d\xdb\x63\x48\x4c\x32\x9e\x3f\xde\x96\x90\xdc\x8a\xaa\x22\x43\x6f\xd7\x5f\xee\xb7\xdb\x26\xb7\xad\x5a\x34\x9f\xd4\xf6\xd3\xed\xa6\xa9\x6d\x5a\xce\x37\xea\x73\xb3\xdc\x79\xe2\x5a\x76\x0f\x9f\x84\x76\xf3\x79\xd7\xe0\xea\xcd\x6f\xfe\xfb\xdf\x3e\xf8\x6f\xdf\xbc\xfb\xf0\x93\xe7\xdd\x0b\xf9\x5f\x71\xa7\xfc\x45\x7d\xd7\x8a\x75\xdd\x2c\x57\x9e\x57\x2f\xa0\xb9\x3f\xf5\x26\x17\xe5\x97\xb5\x5a\x5d\x78\x93\x0b\xd9\x2c\xee\x5b\xb5\x5a\x5d\xdf\x7d\xad\xef\x71\x43\x2f\xd6\xf8\xab\x1b\xfa\xbd\xae\x9b\xcd\xba\x9e\xe3\xa2\xb1\x0d\xee\xc5\xfa\xcf\x6b\x5d\xcf\x15\x4e\x70\x63\xb5\x6e\xeb\xe5\x9d\x7d\xb6\xae\x17\xea\xc2\x9b\x79\x9e\xde\x2c\x65\xa7\xde\xbf\x94\xa8\xa6\x38\xf1\xff\xfd\x1f\x74\x7b\xe9\x2f\xc5\x42\xf9\xd4\x6c\xe6\x4f\xbb\xbb\xaa\x6d\x9b\x76\xe6\x7f\xf3\x26\x77\x5f\xed\x95\x7f\xf3\xca\x87\x56\x57\xef\xd5\x67\x08\x51\xed\xd4\xaa\x8d\xeb\x5f\x37\x5a\xab\xd6\x8a\x9d\xcd\xbc\x49\xad\x6d\x83\x9f\x5e\xf9\xcb\x7a\x0e\x11\x93\x56\xad\x37\xed\x12\x97\x97\xbe\x5e\xac\xaf\xde\x42\xba\x9e\x5e\x40\x90\xff\xf3\xc7\x1b\xff\xe7\x4f\x17\xa4\x89\xed\x6b\xe6\x4d\x1e\x3c\x6f\xf2\x49\xb4\x7e\xb9\xd1\x3e\xf5\x43\x9d\x78\x93\x5b\x52\xe7\x95\x5f\x37\x57\xaf\x9b\xfb\x2f\xd3\x5f\xca\x8d\xbe\xf4\xef\xbe\xce\xbc\x89\x9c\xbf\xed\x34\xbd\x7a\x3d\x6f\x56\x6a\x3a\xf3\xce\xa5\x0f\xc4\x90\xfc\x01\x41\xaa\x6d\x49\x6f\x77\xb3\xdc\xe8\xab\x5f\xa1\xfa\x74\x76\x89\x37\xbc\x07\xcf\x83\xab\xf9\x62\xb5\x52\x6b\x0c\xf9\x46\xae\x21\xc5\xda\xe7\xe6\xc3\x9b\xd4\x4b\xdd\xf8\x7e\xb3\xba\xfa\x47\x3d\x57\xef\x96\xba\x79\x6c\xe7\xa6\xb0\xbb\xbf\x25\xc1\xce\xa1\xef\xbb\x69\xf4\x26\xab\xfa\xab\xbd\xae\x97\xeb\x34\xf6\x26\x0b\xe0\x8f\xff\x28\xf4\x9f\x4d\xa5\xec\xcd\x0f\xf5\x42\xf9\x70\x93\x2b\x9c\xa1\x1f\xeb\x2a\x53\x5d\xef\xf6\x35\xf3\xdf\x8b\x85\x9a\xce\x5c\x0f\xe8\xd3\x59\xa9\xeb\x2b\xf4\xee\x3d\x8c\xb4\xfd\xbd\xfe\x8a\xb6\x56\x9b\xe7\x4d\xa1\xe8\x68\x53\xe8\x3a\x9d\x6d\x6b\xfe\x5c\x00\x4c\x3b\x24\x00\xc6\x4d\x67\x4f\x86\xee\x49\x70\xd6\x0f\x0b\x79\xb7\x7a\x53\xb7\xd3\x99\x5f\x36\xcd\x7c\xbb\xb5\x98\xaf\x0e\x58\xfe\x65\x45\x86\xab\x56\x0b\xa9\xbe\x3d\x6c\xb5\x76\x2e\x01\x2f\xbf\xbd\xed\x43\xfd\x3f\xee\x7f\xff\x38\xf7\x5f\x39\xcf\x98\x5e\x70\xc3\x34\x37\x79\xc9\x4d\x90\x73\x13\x04\xfd\x87\xd6\xdc\x64\x21\x37\x81\xa2\xff\x2c\xe1\x26\x90\xdc\x64\x8c\x9b\x24\xa1\xb6\x38\xcf\x62\x6e\x74\xf8\x74\x5f\x07\x74\x2f\x89\xe8\x5c\x47\xdc\x04\x9a\x9b\x04\xef\x06\xdc\xe4\x15\xdd\x87\x2c\xc8\x0e\x0a\x6e\x92\x94\x9b\x30\xe7\x26\xac\xb8\x89\x15\xfd\x87\x82\xee\x57\x01\x37\x0a\x07\x74\x89\xb9\x89\x18\xf5\xc7\xd0\x67\x44\xfd\xb0\x84\x9b\x38\xe4\x26\x91\xdc\x84\x11\x9d\xcb\x80\x64\x68\x49\xd7\x59\xc5\x4d\x26\xb9\x61\x31\x5d\xeb\x8a\x9b\x08\x3a\xe0\x7d\xc8\xa9\xc8\xc6\x32\xe7\x26\xc2\x11\x51\x1f\x18\x27\x9c\x27\x21\xf5\x15\x84\x4f\xf7\x71\xc8\x92\x6c\xc4\xb9\x7d\x27\xa0\x71\xc0\x78\xa4\x05\xbd\x6f\x8f\xad\x71\xc5\xa1\x18\x37\x05\xec\xcb\xb8\xa9\x42\x6e\xd2\x70\x7b\xfc\x2f\x3a\xbc\x1d\x9e\x51\x87\x09\x7d\x58\xdb\x21\xc7\x16\x56\x7b\x93\xc9\x88\x77\x5c\x7a\x93\xc9\xc5\x48\xc6\x70\x71\xe9\x4d\x66\x8f\x81\x3d\x2c\x07\xea\xfc\xcd\xe2\xd2\xb6\x3a\x16\x98\x1e\xd1\xff\xa0\x45\x87\x90\xf6\x11\x20\x2d\xc4\xdd\xbc\xda\x0d\x97\x6f\x00\x92\x1b\x7f\xdc\x1e\x1f\x90\x71\xe3\x17\xf9\xa5\x8f\xd8\xbf\xd9\x86\x86\x69\x1c\xa5\x33\x7b\x1f\x11\x7d\x43\x11\xff\xc7\xb2\x36\x53\x96\xb0\x24\x64\x61\x11\xe4\x97\x7e\x30\x7b\xf0\x26\x02\xfd\xff\x62\x2d\xfe\x66\xcd\xbc\xf1\x9d\xb5\x50\xee\xc6\xfe\x3e\x3c\x4e\x88\xb8\xdc\x8d\xd6\xdd\x24\xec\x4d\xf3\x79\xf9\x5d\xd1\x5a\x50\x74\xd8\x88\x0b\x86\xa3\xb4\x2f\xda\xca\x94\x9b\x20\xa5\x28\xdb\xf5\xd6\xb2\xe2\x26\xad\xb8\x91\x09\x45\x30\x63\x43\xde\x3a\x60\xd1\x49\xde\x3a\x20\xcb\x79\xeb\x60\x02\xbb\xe7\xad\x03\x72\x8e\xf4\xd6\x71\x8b\xce\xe7\xad\x23\xf6\x38\x6f\x65\xd9\x4b\x7a\x6b\x6f\x4d\x70\x3a\xb9\x00\x7c\xf1\x5e\x5c\x71\x13\x08\x6e\x64\xc8\x4d\x14\x70\xc3\x40\x12\x09\x01\x63\x51\x10\xe8\x96\x92\x1b\xe1\x40\x3e\xd4\xe4\x7e\x29\x5c\x31\xe6\x26\x0d\x08\x90\xe3\x92\x5c\x1c\xf7\xaa\x94\x00\x5d\xc2\x4d\x19\x37\x31\xe3\x46\x48\x7a\x37\x8f\x1c\xa1\xc0\xfd\x21\x33\xe6\xa6\x04\x08\x6b\x6e\xa4\xa6\x30\x10\x39\x37\x22\xe3\x26\x47\xc8\x28\x6e\x98\x23\x99\x94\x71\x93\x67\x44\x24\xa1\x23\x3a\xd8\x59\x24\xf4\x5c\xa7\xdc\x94\x90\x57\x50\x58\x25\x39\x37\x79\xc1\x4d\x59\x72\x53\x09\x6e\x02\xfc\xc7\xdc\xe4\x8c\x1b\x95\x93\xce\x71\xce\x4d\xa9\xb8\xc9\x25\x37\x55\xce\x8d\x2a\xe9\x1f\xed\x8a\x92\xf4\xc0\x3f\x08\x4c\x17\xdc\xa8\x8c\x1b\x89\xf1\xca\xb8\x61\x20\xaa\x92\xc2\x1a\x44\xa4\xa0\x83\xe2\x26\xcd\xe9\xdd\x34\xe3\x26\x12\xf4\x1c\xed\x44\xc1\x0d\x2b\xa8\x5d\x11\x12\xc1\x6a\x41\x3a\x81\xc4\x34\x74\xd3\x34\xb6\x20\x48\x4b\xd0\x3b\x50\x00\x58\x81\x2d\xb0\xc1\x92\x6a\xd5\x0f\x05\xc3\xee\x72\x02\x16\x0c\x0b\xb3\x60\x30\x56\xae\xee\xa0\xc1\xb0\xa4\xa3\xe0\xe0\xa0\x55\xe7\xc2\x83\x71\x93\x3a\x40\x08\x93\x97\x45\x84\xbd\x55\x80\x1f\x45\x60\x71\x47\x60\x48\xc1\x40\x60\x25\x37\x61\x31\x4c\x60\x61\x46\xd1\x81\xa8\x4a\xe3\x61\x02\x1b\x36\xe9\x24\xaf\x1d\x12\xe6\xbc\x76\x78\x11\x65\xcf\x6b\x87\x24\x1d\xe9\xb5\x07\xac\x3a\x9f\xd7\x8e\x99\xf4\x97\xa0\xb1\xfe\xa5\xa9\xd3\x79\x2c\x05\x8f\x29\xe2\xb1\x14\xb8\x1c\x3d\xf1\x58\xbc\x95\xe0\xc3\x3b\xd3\x94\x8a\x02\x70\x50\xa8\xb8\x11\x8c\xf8\x0a\x5e\x8d\xf7\x0b\x46\x3c\x07\x6e\xb1\xf2\x0a\x6a\x5b\x38\x0f\x47\x54\x44\x88\x04\xf0\x93\x26\x9e\x40\xd4\x80\xe7\xc0\x61\xe0\x46\xc8\xd5\x09\x37\x22\x75\x51\x03\x3e\xc1\xbd\x8c\xde\x03\x5f\x04\x99\xe3\x21\x14\x43\x01\x71\x40\x17\x15\x31\x8a\xa2\x84\x1b\xe9\x78\x0f\x5c\x59\x55\xc4\x93\xb9\x20\xdb\xa0\x43\x54\x38\x4e\x0a\xa8\xc0\x01\x67\xa3\xb8\x62\xd0\x5b\x93\xdc\x2c\xa7\xc8\x43\x51\x05\x99\xe0\x72\xf0\x1b\xda\xe4\x01\xd9\x14\x29\x6e\x8a\x98\xda\xa2\x58\x43\x8a\x99\x46\xc4\x89\x0c\x5c\xa6\xb8\x29\xc1\xcb\x82\x1b\x96\x71\x93\x96\x8e\x6f\x63\x6e\x0a\x4d\xc5\x19\x6c\x07\x77\x17\x8e\x7b\x31\x86\x96\x27\x03\xd2\x03\x63\x21\x53\xc7\xb5\x82\x64\x57\x8c\x78\x15\x3c\x28\x90\x3f\xc0\x9e\x82\xd2\x5c\x8c\x47\x86\x7c\x00\x73\x53\x52\xff\x40\x1f\xe8\x0e\xdb\x91\xab\xc8\x82\x9e\xe5\x8e\xdb\x31\xbf\x8f\x73\xac\xc8\x86\x42\xd0\x35\x50\x49\x45\xe4\x4b\x36\x7f\xc9\x29\xaf\x88\x33\xea\x27\x29\x08\x9d\x02\xd7\xc6\xca\x04\xf7\x47\x34\xe6\x28\x6a\xc1\xdd\x98\x2f\x8c\x1b\x72\x8d\xc0\xcd\x2f\x38\x1e\xb9\x83\x9d\x07\xb4\xcf\xc8\x1e\xf4\x27\x2a\x1a\x13\xc8\xce\xb2\x7d\xdf\xc5\x81\xb1\xc4\xd8\x60\xcc\x22\x87\xb2\x7d\xc8\x38\x12\x37\x27\x40\xe3\x88\x34\x8b\x8d\xa3\x0b\xc8\x3b\xe0\x38\x22\xeb\x28\x74\x3c\x6c\xd9\xb9\xe0\xf1\x80\x55\x0e\x1f\xc3\x38\x7c\x59\x80\xdc\x5f\x9a\xff\x51\xb4\x2e\x73\x02\xbe\x50\x52\x40\x02\x84\x3a\xaa\x1f\xa2\x76\xe5\x9e\xa1\x08\x88\x12\xfa\xef\x77\xe0\x41\xbb\x4e\x72\xe0\x41\x69\xce\x81\x47\x36\x38\xf6\x1c\x78\x50\xd6\x91\x0e\x7c\xc8\xb2\xf3\x39\xf0\xa8\x55\x1d\xc1\xbf\xe8\xaa\xca\xd0\xce\xd1\x77\x50\x7c\x4c\x10\x8b\x32\x12\xa5\x6a\xde\x51\x7c\x4c\xb4\x08\x8a\x57\x29\x5d\x97\x11\xc1\x28\x68\x33\x04\xe5\xc5\x04\xaf\xd6\x2b\x25\x45\x42\xb7\x82\xa2\x24\xd1\x3b\xca\x39\x94\x95\x31\x4a\xb1\x84\xca\x52\x40\x37\xca\x45\x50\x69\x02\xfa\x0b\xa8\xb4\xb4\x7d\x08\x4a\x09\x40\x57\xca\x41\xb8\x2d\xc7\x40\x41\x31\xad\x25\x26\x8a\xca\x4f\x50\x15\x74\xc8\x02\xa2\xda\xdc\xa5\x13\x48\x2d\xf0\x1e\x6c\x01\x15\x81\x76\xa0\xa7\x2d\x77\x5d\x92\x6c\xf5\x10\x44\x91\xa0\x55\x50\x15\x4a\x42\xd0\x6d\x02\x8a\x4c\xc9\x7e\xfc\x6b\xa4\x2e\x01\xad\xc1\x82\xa2\x41\xa3\xa0\xdd\xc2\x45\x77\xe8\xae\x11\xdd\x89\x4b\x0d\x60\x5b\xd1\x95\xc7\x9a\xa8\xac\x2a\x68\x2c\x45\x49\x4b\x04\x28\x67\x41\x7b\x18\x23\xa4\x2d\xd0\xb3\x70\x6b\xb6\xd2\x15\x00\xa0\x6b\xd0\x23\xd2\x2f\x20\x04\xca\x5a\xbb\x56\x1d\xd3\x1c\xb0\x92\x1b\x26\x89\x4e\x85\xe4\x46\x15\x6e\xbd\x37\xa5\xb1\x40\x5b\x11\xd3\xfa\x2f\xfa\xae\xa4\x5b\x4a\x28\x89\xbe\xa1\x2b\xe8\xb3\x4c\x68\xbe\x90\x7a\xf5\x51\x29\xa8\x39\x61\xb4\x5a\x86\x54\xa6\x94\xfd\x48\x34\xea\xa1\x27\x60\xd1\xa8\x3c\x8b\x46\x07\x76\x53\x77\xf0\x68\x54\xde\x51\x88\x74\x8c\x85\xe7\xc2\xa4\x83\xb6\x3d\xa2\xd2\x0b\xc3\x52\xdf\x6e\xf5\x8f\xac\x97\xa5\xa4\xac\x15\x07\xb2\x7c\x5c\xdb\x15\x28\x35\x4e\xb0\xc8\xba\x15\xa3\x4c\xba\x72\x5b\x28\xfd\x6e\x3d\x62\xe1\x49\x6e\x3d\x22\xcf\xb9\xf5\xe8\x17\x00\x7b\x6e\x3d\x22\xef\x48\xb7\x3e\x6c\xe1\xf9\xdc\xfa\x80\x6d\x5d\xb6\x18\xbc\xa4\x57\xf7\x7f\x60\xf1\xfd\xd5\x34\x2a\x55\xc0\x79\x9e\x6e\xad\x0a\xc7\x54\xe5\x01\xa2\x51\x69\x69\xc0\x77\x4e\x7e\x09\xba\xb3\xdb\x7c\x9a\x56\x7f\x87\xe8\x36\x62\x54\x11\xa1\x5a\x2d\x52\xa2\x8a\xc4\x55\x81\xa0\x4b\xed\x56\x86\xed\xca\xb4\x20\xd9\xa0\x33\x5b\x59\x33\x8a\x99\x4c\x52\x15\x1d\xb9\xad\xcd\xdc\x51\x03\xaa\x39\xbb\xfd\x99\x10\xd5\xa0\x4f\x50\x2f\x68\xdc\x52\xab\xa0\x8a\x14\x14\x81\x0a\xdd\xae\xfa\x66\x14\x9b\x95\xa3\x79\xe8\x67\xd7\xaa\x02\xa2\xaa\xc8\x55\xab\x88\x39\x8c\x09\xaa\x3a\xe5\xe8\x48\x3a\x9a\x03\x15\x23\x8e\xed\x76\x29\x23\x9d\x40\x8d\xb6\x12\x8e\xa8\x2f\xd0\x18\x62\x1e\x36\xd8\x6a\x5a\xd1\x0a\x2f\x28\xd7\xae\xae\xbb\x14\x26\x8b\xe8\x9d\x34\xa7\xfe\x91\x8e\x60\x5c\x50\x29\x23\xb5\x01\xf5\x86\x0e\x3f\xa2\x8c\x28\x1a\xd5\x65\x01\x6c\x88\x88\xde\x59\x45\xe9\x12\xec\x45\x05\x8f\x67\xa8\x4a\x41\xb7\x81\xab\xce\x81\x39\x48\x4d\x30\x07\x61\x48\x69\x0b\xaa\x57\xdb\x6f\x45\xf4\x6e\xf5\x8e\x29\xad\x90\x11\xe1\x10\xe6\x19\xf3\x8e\x31\x45\x4a\x53\xe5\xae\x7a\x8f\x68\x05\x1b\xe3\x6b\xfb\x74\xa9\x89\xdd\x2e\x66\x34\xa7\xa0\x7a\xc8\x89\xdd\x16\x70\x89\x2a\x59\xd0\x7c\x26\xee\x3a\x74\x6b\x85\x48\x49\xe0\x5b\x3a\xa7\xb4\x03\x3a\xc1\xb7\x20\x2b\x0a\x69\x7e\x90\x4a\x21\xfd\x82\xfe\xcc\x6d\x27\xb3\x88\xc6\x37\x60\xfb\x38\xaa\xdd\x2e\x04\xc6\x19\x3e\x09\xbf\x7a\x7a\xef\x09\x47\x47\x62\xea\x04\x14\x1d\x91\x66\x31\x74\xf4\x13\xa9\x1d\x04\x1d\x91\x75\x14\x7e\x1e\xb6\xec\x5c\xe8\x79\xc0\x2a\x87\x9d\x51\x1a\xbd\x2c\x78\xee\x7f\x7c\xf6\x23\x77\x80\x01\x70\x20\x7e\xe9\x96\xa5\x42\xb7\x8c\x35\xb6\x13\x8c\xb6\xc8\xf1\xd1\x17\x02\x1b\x0e\xdf\x97\x0c\x8c\xd8\x76\x92\x13\x0f\x4a\x73\x4e\x3c\xf2\x19\xdf\x9e\x13\x0f\xca\x3a\xd2\x89\x0f\x59\x76\x3e\x27\x1e\xb5\xaa\xcb\x6b\x8b\x97\xf4\xe1\xdd\xef\x23\xbf\xef\x6b\x23\x1d\x93\x07\xc3\x4b\x83\x8a\x60\xf9\xff\xdd\x02\x02\x0d\x66\x6e\x73\xd6\xbe\xeb\xbe\x3c\x02\x6d\xe8\xcc\x45\x48\x42\x07\xaa\xdf\x3c\xa7\xd4\x02\x54\xcd\x52\xaa\x04\x11\x09\xa8\xfa\x50\x59\xe6\xee\xab\x20\xbb\x70\x5c\x52\x64\xd8\xf4\xc3\x6d\xb2\x82\xc2\x43\x47\x15\x78\x17\x6d\x74\x67\x6b\xcf\x97\x3f\x48\x13\xa0\xaf\x60\x44\xc3\x51\xde\x1f\x41\xbd\x23\x7b\x42\xec\xf4\xca\xb1\x51\x33\xf0\x6d\xeb\x4e\xbc\xf4\xb6\x3f\x2a\x52\xc6\x2c\x38\x57\x8c\x0c\xda\xe0\xa2\x23\x49\x5f\x36\x3a\xf6\x3e\x11\xfe\x5e\x80\x3f\x67\x88\xec\x92\xc5\x58\x98\x04\xce\xbd\xb7\xc3\x64\xe8\xe3\x36\x84\x00\xeb\xbe\x7f\x50\x14\x1e\xfd\x2e\x3e\x34\x3c\x27\xf9\xf9\x90\x30\xe7\xec\xc3\x5f\x6b\xef\x79\xfc\x90\xa4\x23\xdd\xfe\x80\x55\xa7\xf8\xfe\xff\x02\x00\x00\xff\xff\xbe\x39\xd7\xa5\x00\x30\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 24576, mode: os.FileMode(436), modTime: time.Unix(1515212982, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0_create_users_table.up.sql": _0_create_users_tableUpSql,
	"0_drop_users_table.down.sql": _0_drop_users_tableDownSql,
	"1_create_events_table.up.sql": _1_create_events_tableUpSql,
	"1_drop_events_table.down.sql": _1_drop_events_tableDownSql,
	"2_create_matches_table.up.sql": _2_create_matches_tableUpSql,
	"2_drop_matches_table.down.sql": _2_drop_matches_tableDownSql,
	"3_create_alliances_table.up.sql": _3_create_alliances_tableUpSql,
	"3_drop_alliances_table.down.sql": _3_drop_alliances_tableDownSql,
	"4_create_reports_table.up.sql": _4_create_reports_tableUpSql,
	"4_drop_reports_table.down.sql": _4_drop_reports_tableDownSql,
	"5_add_event_type.up.sql": _5_add_event_typeUpSql,
	"5_remove_event_type.down.sql": _5_remove_event_typeDownSql,
	"6_add_bluewon.down.sql": _6_add_bluewonDownSql,
	"6_remove_bluewon.up.sql": _6_remove_bluewonUpSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0_create_users_table.up.sql": &bintree{_0_create_users_tableUpSql, map[string]*bintree{}},
	"0_drop_users_table.down.sql": &bintree{_0_drop_users_tableDownSql, map[string]*bintree{}},
	"1_create_events_table.up.sql": &bintree{_1_create_events_tableUpSql, map[string]*bintree{}},
	"1_drop_events_table.down.sql": &bintree{_1_drop_events_tableDownSql, map[string]*bintree{}},
	"2_create_matches_table.up.sql": &bintree{_2_create_matches_tableUpSql, map[string]*bintree{}},
	"2_drop_matches_table.down.sql": &bintree{_2_drop_matches_tableDownSql, map[string]*bintree{}},
	"3_create_alliances_table.up.sql": &bintree{_3_create_alliances_tableUpSql, map[string]*bintree{}},
	"3_drop_alliances_table.down.sql": &bintree{_3_drop_alliances_tableDownSql, map[string]*bintree{}},
	"4_create_reports_table.up.sql": &bintree{_4_create_reports_tableUpSql, map[string]*bintree{}},
	"4_drop_reports_table.down.sql": &bintree{_4_drop_reports_tableDownSql, map[string]*bintree{}},
	"5_add_event_type.up.sql": &bintree{_5_add_event_typeUpSql, map[string]*bintree{}},
	"5_remove_event_type.down.sql": &bintree{_5_remove_event_typeDownSql, map[string]*bintree{}},
	"6_add_bluewon.down.sql": &bintree{_6_add_bluewonDownSql, map[string]*bintree{}},
	"6_remove_bluewon.up.sql": &bintree{_6_remove_bluewonUpSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

