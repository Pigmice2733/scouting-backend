// Code generated by go-bindata.
// sources:
// 0_create_users_table.up.sql
// 0_drop_users_table.down.sql
// 1_create_events_table.up.sql
// 1_drop_events_table.down.sql
// 2_create_matches_table.up.sql
// 2_drop_matches_table.down.sql
// 3_create_alliances_table.up.sql
// 3_drop_alliances_table.down.sql
// 4_create_reports_table.up.sql
// 4_drop_reports_table.down.sql
// 5_add_event_type.up.sql
// 5_remove_event_type.down.sql
// 6_add_bluewon.down.sql
// 6_remove_bluewon.up.sql
// 7_add_photos_table.up.sql
// 7_remove_photos_table.down.sql
// 8_add_isdmin.up.sql
// 8_remove_isadmin.down.sql
// 9_add_reports_cascade.up.sql
// 9_remove_reports_cascade.down.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0_create_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x2d\x4e\x2d\x2a\x56\xd0\xe0\xe2\x04\x31\xf2\x12\x73\x53\x15\x42\x5c\x23\x42\xc0\x2a\xfc\x42\x7d\x7c\x14\x42\xfd\x3c\x03\x43\x5d\x75\xb8\x38\x33\x12\x8b\x33\x52\x53\x02\x12\x8b\x8b\xcb\xf3\x8b\x52\x50\x55\x71\x69\x02\x02\x00\x00\xff\xff\xe1\x96\xd7\xd2\x62\x00\x00\x00")

func _0_create_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_create_users_tableUpSql,
		"0_create_users_table.up.sql",
	)
}

func _0_create_users_tableUpSql() (*asset, error) {
	bytes, err := _0_create_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_create_users_table.up.sql", size: 98, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0_drop_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\xbd\x6d\xc5\x8d\x11\x00\x00\x00")

func _0_drop_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_drop_users_tableDownSql,
		"0_drop_users_table.down.sql",
	)
}

func _0_drop_users_tableDownSql() (*asset, error) {
	bytes, err := _0_drop_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_drop_users_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_events_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8b\x4d\x0a\xc2\x30\x10\x85\xd7\x99\x53\xbc\xa5\x42\x2f\x11\x65\x84\x60\x12\x4b\xf2\x84\xd6\x5d\xc1\x01\x41\xac\x60\x83\xe0\xed\x45\x44\xb7\xdf\xcf\xb6\xa8\xa7\x82\x7e\x13\x15\x61\x87\x7c\x20\x74\x08\x95\x15\xf6\xb4\xb9\x2d\x58\x89\xbb\xda\x0b\xd4\x81\xe8\x4b\x48\xbe\x8c\xd8\xeb\xd8\x89\x9b\xa7\x9b\x7d\xf9\xe7\xca\xc7\x18\x3b\x71\xcb\xe5\xfe\x68\xf9\x67\x3a\x71\xe7\xa9\x19\x18\x92\x56\xfa\xd4\xf3\xf4\x8f\x65\xfd\x0e\x00\x00\xff\xff\x50\xda\x81\x7d\x7d\x00\x00\x00")

func _1_create_events_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_events_tableUpSql,
		"1_create_events_table.up.sql",
	)
}

func _1_create_events_tableUpSql() (*asset, error) {
	bytes, err := _1_create_events_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_events_table.up.sql", size: 125, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_drop_events_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x06\x04\x00\x00\xff\xff\x27\xe5\x89\x64\x11\x00\x00\x00")

func _1_drop_events_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_drop_events_tableDownSql,
		"1_drop_events_table.down.sql",
	)
}

func _1_drop_events_tableDownSql() (*asset, error) {
	bytes, err := _1_drop_events_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_drop_events_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_create_matches_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x4d\x6a\xc3\x30\x10\x46\xd7\xd2\x29\x66\x69\x83\x2e\xa1\x84\x71\x10\x91\xa5\x20\x4d\x69\xd2\x9d\x2b\x0f\x34\xf8\xaf\xd8\x72\xc1\xb7\x2f\x2e\xf5\xa6\x74\xfb\xde\xf7\xc1\x3b\x07\xd4\x84\x40\xfa\x64\x11\x4c\x05\xce\x13\xe0\xdd\x44\x8a\x30\x34\x39\x7d\xf0\x02\x85\x14\x1d\x6f\x40\x78\x27\xb8\x05\x53\xeb\xf0\x80\x2b\x3e\x94\x14\xfc\xc5\x63\xbe\x1e\x6e\xbf\xba\x17\x6b\x95\x14\x9f\x33\xb7\xcf\x94\xb9\xa5\xe7\xc0\x40\xa6\xc6\x48\xba\xbe\xd1\x9b\x92\xa2\x49\x79\x6d\xfa\x7f\xc4\x7b\xbf\xf2\xeb\x34\xc2\xc9\x7b\x8b\xda\x29\x29\x66\x6e\x63\x9a\x66\x06\xe3\x08\x2f\x18\x7e\x47\x7f\x59\xe5\x03\x9a\x8b\xdb\xa3\x8a\x23\xa9\x84\x80\x15\x06\x74\x67\x8c\xf0\x03\x97\xa2\xe3\xad\x94\xe5\x77\x00\x00\x00\xff\xff\x95\xc6\xa5\x34\xf2\x00\x00\x00")

func _2_create_matches_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_create_matches_tableUpSql,
		"2_create_matches_table.up.sql",
	)
}

func _2_create_matches_tableUpSql() (*asset, error) {
	bytes, err := _2_create_matches_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_create_matches_table.up.sql", size: 242, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_drop_matches_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x06\x04\x00\x00\xff\xff\xed\x06\x12\x35\x12\x00\x00\x00")

func _2_drop_matches_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_drop_matches_tableDownSql,
		"2_drop_matches_table.down.sql",
	)
}

func _2_drop_matches_tableDownSql() (*asset, error) {
	bytes, err := _2_drop_matches_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_drop_matches_table.down.sql", size: 18, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_create_alliances_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x41\x0a\x83\x30\x14\x44\xd7\xe6\x14\xb3\x34\xe0\x25\x54\xc6\x12\x0c\x09\x8d\x11\xec\xd2\xca\x87\x4a\xd5\x45\xad\x0b\x6f\x5f\xb0\xb4\x14\xba\x9d\x79\xef\x95\x81\x79\x24\x62\x5e\x58\xc2\x54\x70\x3e\x82\x9d\x69\x62\x83\x7e\x9a\xc6\x7e\x19\x64\x45\xaa\x92\xb9\x7f\x0e\xb7\x5a\x76\x44\x76\xf1\xa0\x5c\x6b\x6d\xa6\x92\x71\x2d\xa6\x4d\x50\x78\x6f\x99\xbb\xdf\x67\xd9\xe6\xab\x3c\xfe\x84\xca\x07\x9a\x93\x43\xcd\x4b\xfa\xa9\x6a\x04\x56\x0c\x74\x25\x1b\x1c\xa3\xac\xe9\x5d\x76\x9d\xa9\xa4\x75\xe6\xdc\xf2\x8b\x66\x78\x77\xb5\xd2\xaf\x00\x00\x00\xff\xff\x80\x51\xbd\xfc\xbc\x00\x00\x00")

func _3_create_alliances_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_create_alliances_tableUpSql,
		"3_create_alliances_table.up.sql",
	)
}

func _3_create_alliances_tableUpSql() (*asset, error) {
	bytes, err := _3_create_alliances_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_create_alliances_table.up.sql", size: 188, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_drop_alliances_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xcc\xc9\xc9\x4c\xcc\x4b\x4e\x2d\x06\x04\x00\x00\xff\xff\x17\xe1\x40\xdc\x14\x00\x00\x00")

func _3_drop_alliances_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_drop_alliances_tableDownSql,
		"3_drop_alliances_table.down.sql",
	)
}

func _3_drop_alliances_tableDownSql() (*asset, error) {
	bytes, err := _3_drop_alliances_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_drop_alliances_table.down.sql", size: 20, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_create_reports_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x6a\x86\x30\x10\x84\xcf\xe6\x29\xf6\x98\x40\x5e\x42\x7f\xd6\x12\x0c\x09\x8d\x11\xec\x31\x94\x85\x96\x56\x5b\x92\x58\xf0\xed\x8b\x4a\x40\x6b\x2f\x21\xcc\x7c\x3b\x33\x0f\x87\xb5\x47\xf0\x75\xa3\x11\x54\x0b\xc6\x7a\xc0\x51\xf5\xbe\x87\x48\xdf\x5f\x31\x27\xe0\xac\x3a\xbe\x14\xc1\xe3\xe8\x77\xc6\x0c\x5a\x4b\x56\xd1\x0f\xcd\xb9\xa3\xf5\x66\x4c\x21\xbf\xbe\xfd\x67\xbc\xa7\xe6\x73\x21\x68\xac\xd5\x58\x9b\xb3\x93\x29\x4c\x37\x3c\xe5\x90\xd3\x4d\x1d\x8c\x7a\x1e\x90\x97\x76\x09\xa5\x4e\xc2\x96\x22\x24\x03\x68\xad\x43\xf5\x64\xa0\xc3\x17\x5e\xf6\x0b\x70\xd8\xa2\x43\xf3\xc0\x1e\x96\x44\x31\xf1\xed\x9d\xc3\x44\x42\xb2\xea\x7c\x52\xb2\x2f\x27\xbb\x98\xf8\x07\xad\x7f\xf1\x32\xe0\x82\xef\x22\x1d\x3c\x13\xbf\x01\x00\x00\xff\xff\xf1\xac\xe6\x8d\x6b\x01\x00\x00")

func _4_create_reports_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_create_reports_tableUpSql,
		"4_create_reports_table.up.sql",
	)
}

func _4_create_reports_tableUpSql() (*asset, error) {
	bytes, err := _4_create_reports_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_create_reports_table.up.sql", size: 363, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_drop_reports_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\xb6\x06\x04\x00\x00\xff\xff\x55\x5c\x72\x90\x13\x00\x00\x00")

func _4_drop_reports_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_drop_reports_tableDownSql,
		"4_drop_reports_table.down.sql",
	)
}

func _4_drop_reports_tableDownSql() (*asset, error) {
	bytes, err := _4_drop_reports_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_drop_reports_table.down.sql", size: 19, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_add_event_typeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x83\x88\x84\x54\x16\xa4\x2a\x78\xfa\x85\xb8\xba\xbb\x06\x29\xf8\xf9\x87\x28\xf8\x85\xfa\xf8\x00\x02\x00\x00\xff\xff\x47\xcd\xa1\xbe\x38\x00\x00\x00")

func _5_add_event_typeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_add_event_typeUpSql,
		"5_add_event_type.up.sql",
	)
}

func _5_add_event_typeUpSql() (*asset, error) {
	bytes, err := _5_add_event_typeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_add_event_type.up.sql", size: 56, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_remove_event_typeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x83\x08\x85\x54\x16\xa4\x02\x02\x00\x00\xff\xff\xfa\x1d\x58\x8e\x28\x00\x00\x00")

func _5_remove_event_typeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_remove_event_typeDownSql,
		"5_remove_event_type.down.sql",
	)
}

func _5_remove_event_typeDownSql() (*asset, error) {
	bytes, err := _5_remove_event_typeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_remove_event_type.down.sql", size: 40, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_add_bluewonDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x53\x70\xf2\xf7\xf7\x71\x75\xf4\x03\x04\x00\x00\xff\xff\x08\x2a\x0a\x8b\x2e\x00\x00\x00")

func _6_add_bluewonDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_add_bluewonDownSql,
		"6_add_bluewon.down.sql",
	)
}

func _6_add_bluewonDownSql() (*asset, error) {
	bytes, err := _6_add_bluewonDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_add_bluewon.down.sql", size: 46, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_remove_bluewonUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\x4d\x2c\x49\xce\x48\x2d\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xca\x29\x4d\x0d\xcf\xcf\x03\x04\x00\x00\xff\xff\xc2\xb9\xb0\x4c\x27\x00\x00\x00")

func _6_remove_bluewonUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_remove_bluewonUpSql,
		"6_remove_bluewon.up.sql",
	)
}

func _6_remove_bluewonUpSql() (*asset, error) {
	bytes, err := _6_remove_bluewonUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_remove_bluewon.up.sql", size: 39, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_add_photos_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xc8\xc8\x2f\xc9\x2f\x56\xd0\xe0\xe2\x2c\x49\x4d\xcc\x55\x08\x71\x8d\x08\x01\x4b\xfb\x85\xfa\xf8\xe8\x70\x71\x96\x16\xe5\xa0\x8b\x29\x28\x28\x28\x84\xfa\x79\x06\x86\xba\x6a\x80\xb4\xe8\x28\x94\x16\xe5\x68\x72\x69\x02\x02\x00\x00\xff\xff\x7a\x9d\xf7\x09\x64\x00\x00\x00")

func _7_add_photos_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_add_photos_tableUpSql,
		"7_add_photos_table.up.sql",
	)
}

func _7_add_photos_tableUpSql() (*asset, error) {
	bytes, err := _7_add_photos_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_add_photos_table.up.sql", size: 100, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_remove_photos_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xc8\xc8\x2f\xc9\x2f\x06\x04\x00\x00\xff\xff\xb4\x52\x78\x3f\x11\x00\x00\x00")

func _7_remove_photos_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_remove_photos_tableDownSql,
		"7_remove_photos_table.down.sql",
	)
}

func _7_remove_photos_tableDownSql() (*asset, error) {
	bytes, err := _7_remove_photos_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_remove_photos_table.down.sql", size: 17, mode: os.FileMode(436), modTime: time.Unix(1516677130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __8_add_isdminUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\x85\x30\x0c\x05\xd0\x55\xee\x2a\xe9\x6b\xde\xd7\x35\x01\x49\x06\x10\xac\x50\x50\x3f\x0c\xee\xef\x11\x86\xae\x08\x69\x54\xbc\x35\x9e\x82\xf4\x8e\x9f\x33\x17\xc3\x2c\xd9\xaf\x79\xa3\xb9\x53\xc5\x60\x1e\xb0\x24\xd1\xf5\x2f\xc9\xc0\xb1\x9d\x35\xbe\x00\x00\x00\xff\xff\xe7\x70\xa1\xca\x43\x00\x00\x00")

func _8_add_isdminUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__8_add_isdminUpSql,
		"8_add_isdmin.up.sql",
	)
}

func _8_add_isdminUpSql() (*asset, error) {
	bytes, err := _8_add_isdminUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "8_add_isdmin.up.sql", size: 67, mode: os.FileMode(436), modTime: time.Unix(1516750373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __8_remove_isadminDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x2c\x76\x4c\xc9\xcd\xcc\x03\x04\x00\x00\xff\xff\x54\xf1\x61\xd5\x25\x00\x00\x00")

func _8_remove_isadminDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__8_remove_isadminDownSql,
		"8_remove_isadmin.down.sql",
	)
}

func _8_remove_isadminDownSql() (*asset, error) {
	bytes, err := _8_remove_isadminDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "8_remove_isadmin.down.sql", size: 37, mode: os.FileMode(436), modTime: time.Unix(1516750373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __9_add_reports_cascadeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x0b\x0e\x09\x72\xf4\xf4\x0b\x81\x89\xc7\x43\xe8\xd4\xa2\xf8\xb4\xec\xd4\x4a\x6b\x2e\x6c\x5a\x1d\x5d\x5c\x14\xdc\xfc\x83\x5c\x3d\xdd\xfd\x14\xbc\x5d\x23\x35\x60\x5a\x34\x15\x82\x5c\xdd\x5c\x83\x5c\xfd\x9c\x5d\x83\x15\x4a\x8b\x53\x8b\x8a\x35\x40\x64\x5e\x62\x6e\xaa\xa6\x82\xbf\x9f\x42\x68\x80\x8b\x63\x88\xab\x82\xb3\x63\xb0\xb3\xa3\x8b\x2b\x20\x00\x00\xff\xff\xd6\xa5\x2c\xc4\x95\x00\x00\x00")

func _9_add_reports_cascadeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__9_add_reports_cascadeUpSql,
		"9_add_reports_cascade.up.sql",
	)
}

func _9_add_reports_cascadeUpSql() (*asset, error) {
	bytes, err := _9_add_reports_cascadeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "9_add_reports_cascade.up.sql", size: 149, mode: os.FileMode(436), modTime: time.Unix(1517180981, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __9_remove_reports_cascadeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xc8\x2f\x2a\x29\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x0b\x0e\x09\x72\xf4\xf4\x0b\x81\x89\xc7\x43\xe8\xd4\xa2\xf8\xb4\xec\xd4\x4a\x6b\x2e\x6c\x5a\x1d\x5d\x5c\x14\xdc\xfc\x83\x5c\x3d\xdd\xfd\x14\xbc\x5d\x23\x35\x60\x5a\x34\x15\x82\x5c\xdd\x5c\x83\x5c\xfd\x9c\x5d\x83\x15\x4a\x8b\x53\x8b\x8a\x35\x40\x64\x5e\x62\x6e\xaa\x26\x20\x00\x00\xff\xff\x47\x73\x6b\x93\x83\x00\x00\x00")

func _9_remove_reports_cascadeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__9_remove_reports_cascadeDownSql,
		"9_remove_reports_cascade.down.sql",
	)
}

func _9_remove_reports_cascadeDownSql() (*asset, error) {
	bytes, err := _9_remove_reports_cascadeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "9_remove_reports_cascade.down.sql", size: 131, mode: os.FileMode(436), modTime: time.Unix(1517180979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5b\x4b\x6f\xe3\x46\x12\x3e\x8b\xbf\x82\x31\x90\x40\x5a\x78\x6d\xbe\x1f\x06\xe6\x92\x4c\x16\xc8\x61\x13\x60\x93\x9c\xb6\x17\x46\xb3\xd9\x74\x88\x95\x44\x8f\x1e\x33\x3d\x33\x98\xff\xbe\xf8\xba\x8a\x36\x2d\x91\x94\xa2\x11\xac\xec\x81\xb6\xf8\xa8\xea\xae\x66\xd5\xf7\x55\x75\x37\x6f\x6f\xdd\x1f\x9a\x52\xbb\x0f\x7a\xa9\x57\x72\xa3\x4b\xb7\xf8\xe8\x3e\x34\x7f\x2f\xea\x65\x29\x37\xf2\xc6\xb9\xbd\x75\xd7\xcd\x76\xa5\xf4\xfa\x0e\xbf\xbd\x7b\xb5\xd2\x72\xa3\xef\xb7\x6b\xbd\x5a\xdf\x6f\x64\x31\xd7\x37\xdb\xc7\x9b\xf5\xbb\x39\xdd\x2e\x57\xcd\xe3\x8b\x9b\x65\xf3\x61\xd9\xde\xf6\x5b\x69\xfd\x5e\x2f\x37\xfb\xe2\x3e\x89\xbf\xb8\xdb\x95\x0f\x5a\xf9\x85\xdc\xa8\x3f\xf4\xbe\x82\x80\x14\xbc\xbc\xdd\xd5\x10\xb6\x1a\xe4\x7c\x5e\xcb\xa5\xea\xd1\x11\x92\x8e\xdd\x07\xba\x5a\xa2\x56\xcb\x4a\x3f\x36\xab\x1e\x43\x22\xd2\xf1\xf2\x76\x57\x43\x7c\x2f\xcb\x92\x0c\xbd\xdf\x7c\x7c\xec\xca\xc6\xf7\x2b\xbd\x68\xde\xeb\xee\xdd\xae\x68\x62\x45\x8b\xf9\x56\x7f\x68\x96\x3b\x77\x58\xb2\xbd\xf9\xac\x34\xb5\x42\x8f\x7f\x34\x9b\x66\xbf\xb7\x69\x2b\xf7\xe2\x7e\x57\x73\x66\xc5\xeb\x75\xb9\xa8\xbb\x5a\xb3\x56\xb0\x5e\x4b\x7b\xab\x2b\x93\x5b\x99\x76\x08\x94\x5c\x2b\x59\x76\x5b\xcd\x5b\xe1\xdd\x47\xba\x4a\x5a\x3f\x7c\x68\x70\xf6\xf6\x17\xf7\xe7\x5f\x7e\x73\x7f\x7c\xfb\xd3\x6f\xdf\x38\xce\xa3\x54\xff\x95\x0f\xda\x5d\xd4\x0f\x2b\xb9\xa9\x9b\xe5\xda\x71\xea\x05\x74\xb9\x53\x67\x72\x55\x7c\xdc\xe8\xf5\x95\x33\xb9\x52\xcd\xe2\x71\xa5\xd7\xeb\xdb\x87\x4f\xf5\x23\x2e\x54\x8b\x0d\xfe\xd5\x0d\xfd\xbd\xad\x9b\xed\xa6\x9e\xe3\xa4\xb1\x02\x8f\x72\xf3\xc7\x6d\x55\xcf\x35\x7e\xe0\xc2\x7a\xb3\xaa\x97\x0f\xf6\xde\xa6\x5e\xe8\x2b\x67\xe6\x38\xd5\x76\xa9\xda\xee\xfd\x4b\xcb\x72\x8a\x1f\xee\xbf\xff\x83\x66\xaf\xdd\xa5\x5c\x68\x97\xc4\x66\xee\xb4\xbd\xaa\x57\xab\x66\x35\x73\x3f\x3b\x93\x87\x4f\xf6\xcc\xbd\x7b\xe3\xa2\x57\x37\x3f\xeb\x0f\x50\xa2\x57\x53\xdb\x6d\x9c\x7f\xbf\xad\x2a\xbd\xb2\x6a\x67\x33\x67\x52\x57\x56\xe0\x9b\x37\xee\xb2\x9e\x43\xc5\x64\xa5\x37\xdb\xd5\x12\xa7\xd7\x6e\xb5\xd8\xdc\xfc\x08\xed\xd5\xf4\x0a\x8a\xdc\x6f\xdf\xdd\xb9\xdf\xbe\xbf\xa2\x9e\xd8\xb6\x66\xce\xe4\x8b\xe3\x4c\xde\xcb\x95\x5b\x6c\x2b\x97\xda\xa1\x46\x9c\xc9\x3d\x75\xe7\x8d\x5b\x37\x37\x3f\x34\x8f\x1f\xa7\xdf\x15\xdb\xea\xda\x7d\xf8\x34\x73\x26\x6a\xfe\x63\xdb\xd3\x9b\x1f\xe6\xcd\x5a\x4f\x67\xce\xb9\xfa\x03\x35\xa4\x7f\x40\x91\x5e\xad\xa8\xdf\x7c\xb1\xd8\x56\x37\xdf\xa3\xeb\xd3\xd9\x35\x9e\x70\xbe\x38\x0e\x42\xc4\x95\xeb\xb5\xde\x60\xc8\xb7\x6a\x03\x2d\xd6\x3e\x7e\x1f\xce\xa4\x5e\x56\x8d\xeb\x36\xeb\x9b\x7f\xd4\x73\xfd\xd3\xb2\x6a\x9e\xe4\xf8\x15\xb6\xd7\x3b\x1a\xec\x3b\x74\x5d\x7e\x8d\xce\x64\x5d\x7f\xb2\xe7\xf5\x72\x93\x44\xce\x64\x01\xdc\x74\x9f\x94\xfe\xb3\x29\xb5\xbd\xf8\x5b\xbd\xd0\x2e\xdc\xe4\x06\xbf\xd0\x8e\x75\x95\x69\x55\xef\xb6\x35\x73\x7f\x96\x0b\x3d\x9d\x71\x0b\x68\x93\xad\xac\xea\x1b\xb4\xee\x7c\x19\x91\xfd\xb5\xfe\x04\x59\xdb\x9b\x97\xa2\xe8\xe8\xa8\x28\xfa\x3a\x9d\x75\x7b\xfe\x52\x01\x4c\x3b\xa4\x00\xc6\x4d\x67\xcf\x86\xee\x69\x60\xeb\x87\x95\xfc\xb4\x7e\x5b\xaf\xa6\x33\xb7\x68\x9a\x79\x57\x5a\xce\xd7\x07\x2c\xff\xb8\x26\xc3\xf5\xaa\x92\x4a\x7f\xfe\xd2\x91\x66\x97\x80\x97\xdf\xdf\xf7\xb1\xd5\xef\x8f\xbf\xbe\x9b\xbb\x6f\xd8\x33\xa6\x57\xc2\xf8\x95\x30\x59\x21\x8c\x97\x09\xe3\x79\xfd\x47\x55\x09\x93\x06\xc2\x78\x9a\xfe\xa7\xb1\x30\x9e\x12\x26\xf5\x85\x89\x63\x92\xc5\xef\x34\x12\xa6\x0a\x9e\xaf\x57\x1e\x5d\x8b\x43\xfa\x5d\x85\xc2\x78\x95\x30\x31\x9e\xf5\x84\xc9\x4a\xba\x0e\x5d\xd0\xed\xe5\xc2\xc4\x89\x30\x41\x26\x4c\x50\x0a\x13\x69\xfa\x1f\x48\xba\x5e\x7a\xc2\x68\x1c\xe8\x4b\x24\x4c\xe8\x53\x7b\x3e\xda\x0c\xa9\x1d\x3f\x16\x26\x0a\x84\x89\x95\x30\x41\x48\xbf\x95\x47\x3a\x2a\x45\xe7\x69\x29\x4c\xaa\x84\xf1\x23\x3a\xaf\x4a\x61\x42\xf4\x01\xcf\x43\x4f\x49\x36\x16\x99\x30\x21\x8e\x90\xda\xc0\x38\xe1\x77\x1c\x50\x5b\x5e\xf0\x7c\x1d\x87\x2a\xc8\x46\xfc\xb6\xcf\x78\x34\x0e\x18\x8f\x24\xa7\xe7\xed\xd1\x19\x57\x1c\xda\x17\x26\x87\x7d\xa9\x30\x65\x20\x4c\x12\x74\xc7\xff\xaa\xc5\xdb\xe1\x37\xca\x98\xd0\x87\xb5\x2d\x72\x74\xb0\xda\x99\x4c\x46\xbc\xe3\xda\x99\x4c\xae\x46\x32\x9d\xab\x6b\x67\x32\x7b\x0a\xec\x61\x3d\xe8\xce\xdf\x2c\x2e\x75\xbb\x63\x81\xe9\x09\xfd\x0f\x5a\x74\x08\x69\x9f\x00\xd2\x42\xdc\xdd\x9b\xdd\x70\xf9\x0c\x20\xb9\x73\xc7\xed\x71\x01\x19\x77\x6e\x9e\x5d\xbb\x88\xfd\xbb\x2e\x34\x4c\xa3\x30\x99\xd9\xeb\x88\xe8\x3b\x8a\xf8\xdf\x97\xb5\x99\xfa\xb1\x9f\x24\x69\xea\x87\xde\xb5\xeb\xcd\xbe\x38\x13\x89\xf6\xbf\xb3\x16\x7f\xb6\x66\xde\xb9\x6c\x2d\x3a\x77\x67\xff\x7e\x79\x7a\x21\xf2\x7a\x37\x5a\x77\x93\xc7\xb7\xcd\x87\xe5\x57\x45\x6b\x4e\xd1\x61\x23\xce\x1b\x8e\xd2\xbe\x68\x2b\x12\x61\xbc\x84\xa2\x6c\xd7\x5b\x8b\x52\x98\xa4\x14\x46\xc5\x14\xc1\xbe\x3f\xe4\xad\x03\x16\x9d\xe4\xad\x03\xba\xd8\x5b\x07\x13\xef\x3d\x6f\x1d\xd0\x73\xa4\xb7\x8e\x5b\x74\x3e\x6f\x1d\xb1\x87\xbd\xd5\x4f\x2f\xe9\xad\xbd\xb5\xcc\xe9\xe4\x02\xf0\xc5\x73\x51\x29\x8c\x27\x85\x51\x81\x30\xa1\x27\x8c\x0f\x92\x88\x09\x18\xf3\x9c\x40\xb7\x50\xc2\x48\x06\xf9\xa0\x22\xf7\x4b\xe0\x8a\x91\x30\x89\x47\x80\x1c\x15\xe4\xe2\xb8\x56\x26\x04\xe8\x0a\x6e\xea\x0b\x13\xf9\xc2\x48\x45\xcf\x66\x21\x13\x0a\xdc\x1f\x3a\x23\x61\x0a\x80\x70\x25\x8c\xaa\x28\x0c\x64\x26\x8c\x4c\x85\xc9\x10\x32\x5a\x18\x9f\x49\x26\xf1\x85\xc9\x52\x22\x92\x80\x89\x0e\x76\xe6\x31\xdd\xaf\x12\x61\x0a\xe8\xcb\x29\xac\xe2\x4c\x98\x2c\x17\xa6\x28\x84\x29\xa5\x30\x1e\xfe\x47\xc2\x64\xbe\x30\x3a\xa3\x3e\x47\x99\x30\x85\x16\x26\x53\xc2\x94\x99\x30\xba\xa0\xff\x90\xcb\x0b\xea\x07\xfe\x83\xc0\xaa\x5c\x18\x9d\x0a\xa3\x30\x5e\xa9\x30\x3e\x88\xaa\xa0\xb0\x06\x11\x69\xf4\x41\x0b\x93\x64\xf4\x6c\x92\x0a\x13\x4a\xba\x0f\x39\x99\x0b\xe3\xe7\x24\x97\x07\x44\xb0\x95\xa4\x3e\x81\xc4\x2a\xf4\xad\xa2\xb1\x05\x41\x5a\x82\xde\x81\x02\xc0\x0a\x6c\x81\x0d\x96\x54\xcb\x7e\x28\x18\x76\x97\x13\xb0\x60\x58\x99\x05\x83\xb1\x32\x7b\x07\x0d\x86\x35\x1d\x05\x07\x07\xad\x3a\x17\x1e\x8c\x9b\xd4\x02\x42\x10\x5f\x16\x11\xf6\x66\x2f\x5e\x8b\xc0\xa2\x96\xc0\x90\x82\x81\xc0\x0a\x61\x82\x7c\x98\xc0\x82\x94\xa2\x03\x51\x95\x44\xc3\x04\x36\x6c\xd2\x49\x5e\x3b\xa4\x8c\xbd\x76\x78\xf2\x67\xcf\x6b\x87\x34\x1d\xe9\xb5\x07\xac\x3a\x9f\xd7\x8e\x99\xf4\x97\xa0\xb1\xfe\x29\xb5\xd3\x79\x2c\x01\x8f\x69\xe2\xb1\x04\xb8\x1c\x3e\xf3\x58\xd4\x49\xf0\xe1\x9d\x49\x42\x45\x01\x38\x28\xd0\xc2\x48\x9f\xf8\x0a\x5e\x8d\xe7\x73\x9f\x78\x0e\xdc\x62\xf5\xe5\x24\x9b\xb3\x87\x23\x2a\x42\x44\x02\xf8\xa9\x22\x9e\x40\xd4\x80\xe7\xc0\x61\xe0\x46\xe8\xad\x62\x61\x64\xc2\x51\x03\x3e\xc1\xb5\x94\x9e\x03\x5f\x78\x29\xf3\x10\x8a\x21\x8f\x38\xa0\x8d\x8a\x08\x45\x51\x2c\x8c\x62\xde\x03\x57\x96\x25\xf1\x64\x26\xc9\x36\xf4\x21\xcc\x99\x93\x3c\x2a\x70\xc0\xd9\x28\xae\x7c\xf4\xbb\x22\xbd\x69\x46\x91\x87\xa2\x0a\x3a\xc1\xe5\xe0\x37\xc8\x64\x1e\xd9\x14\x6a\x61\xf2\x88\x64\x51\xac\x21\xc5\x4c\x42\xe2\x44\x1f\x5c\xa6\x85\x29\xc0\xcb\x52\x18\x3f\x15\x26\x29\x98\x6f\x23\x61\xf2\x8a\x8a\x33\xd8\x0e\xee\xce\x99\x7b\x31\x86\x96\x27\x3d\xea\x07\xc6\x42\x25\xcc\xb5\x92\x74\x97\x3e\xf1\x2a\x78\x50\x22\x7f\x80\x3d\x39\xa5\xb9\x18\x8f\x14\xf9\x00\xde\x4d\x41\xed\x03\x7d\xd0\x77\xd8\x8e\x5c\x45\xe5\x74\x2f\x63\x6e\xc7\xfb\x7d\x7a\xc7\x9a\x6c\xc8\x25\x9d\x03\x95\x74\x48\xbe\x64\xf3\x97\x8c\xf2\x8a\x28\xa5\x76\xe2\x9c\xd0\xc9\x63\x19\xab\x13\xdc\x1f\xd2\x98\xa3\xa8\x05\x77\xe3\x7d\x61\xdc\x90\x6b\x78\xfc\x7e\xc1\xf1\xc8\x1d\xec\x7b\x80\x7c\x4a\xf6\xa0\x3d\x59\xd2\x98\x40\x77\x9a\xee\xfb\x2e\x0e\x8c\x25\xc6\x06\x63\x16\x32\xca\xf6\x21\xe3\x48\xdc\x9c\x00\x8d\x23\xda\x2c\x36\x8e\x4e\x7c\xef\x80\xe3\x88\xae\xa3\xd0\xf1\xb0\x65\xe7\x82\xc7\x03\x56\x31\x3e\x06\x51\x70\x59\x80\xdc\x5f\x52\x78\x2d\x5a\x57\x19\x01\x5f\xa0\x28\x20\x01\x42\x2d\xd5\x0f\x51\xbb\xe6\x7b\x28\x02\xc2\x98\xfe\xf7\x3b\xf0\xa0\x5d\x27\x39\xf0\xa0\x36\x76\xe0\x91\x85\x99\x3d\x07\x1e\xd4\x75\xa4\x03\x1f\xb2\xec\x7c\x0e\x3c\x6a\x55\x4b\xf0\x17\x9d\x55\x19\x5a\xf1\xfa\x0a\x8a\x8f\x08\x62\x51\x46\xa2\x54\xcd\x5a\x8a\x8f\x88\x16\x41\xf1\x3a\xa1\xf3\x22\x24\x18\x05\x6d\x06\xa0\xbc\x88\xe0\xd5\x7a\xa5\xa2\x48\x68\x67\x50\xb4\x22\x7a\x47\x39\x87\xb2\x32\x42\x29\x16\x53\x59\x0a\xe8\x46\xb9\x08\x2a\x8d\x41\x7f\x1e\x95\x96\xb6\x0d\x49\x29\x01\xe8\x4a\x33\x84\xdb\x72\x0c\x14\x14\xd1\x5c\x62\xac\xa9\xfc\x04\x55\xa1\x0f\xa9\x47\x54\x9b\x71\x3a\x81\xd4\x02\xcf\xc1\x16\x50\x11\x68\x07\xfd\xb4\xe5\x2e\x27\xc9\xb6\x1f\x92\x28\x12\xb4\x0a\xaa\x42\x49\x08\xba\x8d\x41\x91\x09\xd9\x8f\xff\x15\x52\x17\x8f\xe6\x60\x41\xd1\xa0\x51\xd0\x6e\xce\xd1\x1d\xf0\x39\xa2\x3b\xe6\xd4\x00\xb6\xe5\x6d\x79\x5c\x11\x95\x95\x39\x8d\xa5\x2c\x68\x8a\x00\xe5\x2c\x68\x0f\x63\x84\xb4\x05\xfd\xcc\x79\xce\x56\x71\x01\x00\xba\x06\x3d\x22\xfd\x02\x42\xa0\xac\xb5\x73\xd5\x11\xbd\x03\xbf\x10\xc6\x57\x44\xa7\x52\x09\xa3\x73\x9e\xef\x4d\x68\x2c\x20\x2b\x23\x9a\xff\x45\xdb\xa5\xe2\xa9\x84\x82\xe8\x1b\x7d\x05\x7d\x16\x31\xbd\x2f\xa4\x5e\x7d\x54\x0a\x6a\x8e\x7d\x9a\x2d\x43\x2a\x53\xa8\x7e\x24\x1a\xf5\xd0\x13\xb0\x68\x54\x9f\x45\xa3\x03\xab\xc0\x3b\x78\x34\xaa\xef\x28\x44\x3a\xc6\xc2\x73\x61\xd2\x41\xdb\x9e\x50\xe9\xc2\xb0\xd4\xb7\xca\xfe\x9a\xf5\xb2\x52\x94\xb5\xe2\x40\x96\x8f\x73\x3b\x03\xa5\xc7\x09\x16\x59\xb7\xf6\x29\x93\x2e\x79\x09\xa5\xdf\xad\x47\x2c\x3c\xc9\xad\x47\xf4\xb1\x5b\x8f\xee\x5c\xd8\x73\xeb\x11\x7d\x47\xba\xf5\x61\x0b\xcf\xe7\xd6\x07\x6c\x6b\xb3\x45\xef\x92\x5e\xdd\xbf\x31\xe4\xeb\xab\x69\x54\xaa\x80\xf3\x2c\xe9\xcc\x0a\x47\x54\xe5\x01\xa2\x51\x69\x55\x80\xef\x8c\xfc\x12\x74\x67\x97\xf9\x2a\x9a\xfd\x1d\xa2\xdb\xd0\xa7\x8a\x08\xd5\x6a\x9e\x10\x55\xc4\x5c\x05\x82\x2e\x2b\x9e\x19\xb6\x33\xd3\x92\x74\x83\xce\x6c\x65\xed\x53\xcc\xa4\x8a\xaa\xe8\x90\x97\x36\x33\xa6\x06\x54\x73\x76\xf9\x33\x26\xaa\x41\x9b\xa0\x5e\xd0\xb8\xa5\x56\x49\x15\x29\x28\x02\x15\xba\x9d\xf5\x4d\x29\x36\x4b\xa6\x79\xf4\xcf\xce\x55\x79\x44\x55\x21\x57\xab\x88\x39\x8c\x09\xaa\x3a\xcd\x74\xa4\x98\xe6\x40\xc5\x88\x63\xbb\x5c\xea\x53\x9f\x40\x8d\xb6\x12\x0e\xa9\x2d\xd0\x18\x62\x1e\x36\xd8\x6a\x5a\xd3\x0c\x2f\x28\xd7\xce\xae\x73\x0a\x93\x86\xf4\x4c\x92\x51\xfb\x48\x47\x30\x2e\xa8\x94\x91\xda\x80\x7a\x03\xc6\x8f\x30\x25\x8a\x46\x75\x99\x03\x1b\x42\xa2\x77\xbf\xa4\x74\x09\xf6\xa2\x82\xc7\x3d\x54\xa5\xa0\x5b\x8f\xab\x73\x60\x0e\x52\x13\xbc\x83\x20\xa0\xb4\x05\xd5\xab\x6d\xb7\x24\x7a\xb7\xfd\x8e\x28\xad\x50\x21\xe1\x10\xde\x33\xde\x3b\xc6\x14\x29\x4d\x99\x71\xf5\x1e\xd2\x0c\x36\xc6\xd7\xb6\xc9\xa9\x89\x5d\x2e\xf6\xe9\x9d\x82\xea\xa1\x27\xe2\x25\xe0\x02\x55\xb2\xa4\xf7\x19\xf3\x79\xc0\x73\x85\x48\x49\xe0\x5b\x55\x46\x69\x07\xfa\x04\xdf\x82\xae\x30\xa0\xf7\x83\x54\x0a\xe9\x17\xfa\xef\xf3\x72\xb2\x1f\xd2\xf8\x7a\xfe\x3e\x8e\x56\xbc\x0a\x81\x71\x86\x4f\xc2\xaf\x9e\x9f\x7b\xc6\xd1\x91\x98\x3a\x01\x45\x47\xb4\x59\x0c\x1d\xdd\xda\xb5\x83\xa0\x23\xba\x8e\xc2\xcf\xc3\x96\x9d\x0b\x3d\x0f\x58\xc5\xd8\x19\x26\xe1\x65\xc1\x73\x7f\xd3\xdc\x6b\xae\x00\x03\xe0\x40\xfc\x8a\xa7\xa5\x02\x9e\xc6\x1a\x5b\x09\x86\x2c\x72\x7c\xb4\x85\xc0\x86\xc3\xf7\x25\x03\x23\xb6\x9d\xe4\xc4\x83\xda\xd8\x89\x47\xb6\x1f\xee\x39\xf1\xa0\xae\x23\x9d\xf8\x90\x65\xe7\x73\xe2\x51\xab\xda\xbc\x36\xbf\xa4\x0f\xef\xee\xeb\xfc\xba\xdd\x46\x55\x44\x1e\x0c\x2f\xf5\x4a\x82\xe5\x3f\xbb\x04\x04\x1a\x4c\x79\x71\xd6\x3e\xcb\x3b\x8f\x40\x1b\x55\xca\x11\x12\xd3\x81\xea\x37\xcb\x28\xb5\x00\x55\xfb\x09\x55\x82\x88\x04\x54\x7d\xa8\x2c\x33\xde\x15\x64\x27\x8e\x0b\x8a\x0c\x9b\x7e\xf0\x22\x2b\x28\x3c\x60\xaa\xc0\xb3\x90\xa9\x5a\x5b\x7b\x76\xfe\x20\x4d\x40\x7f\xa5\x4f\x34\x1c\x66\xfd\x11\xd4\x3b\xb2\x27\xc4\x4e\xaf\x1e\x1b\x35\x03\x7b\x72\x77\xe2\xa5\x57\xfe\xa8\x48\x19\xb3\xe0\x5c\x31\x32\x68\x03\x47\x47\x9c\x5c\x36\x3a\xf6\xb6\x36\x7f\x2d\xc0\x9f\x33\x44\x76\xc9\x62\x2c\x4c\x3c\x76\xef\x6e\x98\x0c\x6d\x6e\x43\x08\xf8\xed\xfe\x07\x4d\xe1\xd1\xef\xe2\x43\xc3\x73\x92\x9f\x0f\x29\x63\x67\x1f\xde\x65\xbe\xe7\xf1\x43\x9a\x8e\x74\xfb\x03\x56\x9d\xcf\xf7\xc7\x4c\xe2\x00\x88\x2e\x5a\x1f\xbe\xd8\xbb\xff\x9a\xae\x3f\xb6\x92\xf0\x67\x18\x22\x0e\x79\xf2\x84\x73\x23\xbb\x5d\xa9\xa4\x42\x14\x07\xee\x5b\xd9\x80\x64\x71\xd8\xfe\xc4\xdc\xdf\xb0\x3f\x8f\xb2\x4b\x81\x92\xe7\x93\x0b\x5a\xb6\xed\x0b\x91\xbe\x01\x3c\x21\x38\xfa\xd4\xd8\xb0\xe8\xff\xb8\x62\x27\x20\xfa\xa4\x8f\x0a\x85\x91\xde\x9f\x2b\x08\x86\x0c\x68\xdd\xff\xa2\xf8\xbf\xfb\x81\xca\xeb\x65\x47\xc7\xf8\xff\xb1\xf0\x7f\x28\x06\x86\x7c\x5c\xf1\xba\x41\xe1\xf1\xe4\x43\x3a\xe4\xe3\x3d\xa3\x74\x92\x93\xf7\xe8\x61\x2f\xef\xfd\x50\x68\xcf\xcd\x7b\xe4\x8f\xf4\xf3\x61\x0b\xce\xe7\xe8\x03\x36\xb4\xc5\xec\x45\xeb\x80\xfd\xef\xad\xfe\x7f\xbe\x3b\x50\xd9\x73\x0d\xac\x72\xfa\xbf\xfb\xed\x41\x1b\x47\xf0\x7d\xa5\x5e\xf6\x05\xba\xad\x4d\x3e\xaf\x47\x15\x2f\x2b\x01\x3b\x61\xe7\xd1\xb3\x79\x42\xe9\x93\x8e\x69\x62\x2b\xe3\x94\xcc\xee\xc8\xe6\x03\xd5\x88\xdd\x82\xc2\x1b\xda\xb2\x84\xaa\x0f\x3b\x21\xca\xeb\x80\x9a\x9f\xcd\xa3\x67\x7d\x09\x6f\x07\x1a\xfb\xee\x20\xe5\xb5\xc3\x36\xc6\x93\x81\xc9\xfc\x81\xf7\x79\x42\x54\x0e\x68\xb2\x71\x39\xf8\x95\xde\x4e\x64\x0e\xe8\x38\x2a\x36\xc7\x2d\x39\x57\x74\x8e\x58\xd2\xd6\xe9\xde\x45\x33\xb1\xde\x6f\x1e\x5f\x73\xb6\xa9\x2f\xca\x06\xbf\x37\x88\x88\xdd\x50\x83\x87\xd5\xf0\x76\xcd\x31\xa3\x4e\x72\xd5\x61\x75\xec\xaf\x63\x1f\x8e\xee\x39\xed\xb0\xb6\x23\x3d\xf7\xa0\x75\xe7\x73\xdf\x71\xc3\xfe\x12\x5b\x37\xbb\x1f\xe5\x9e\xce\x2e\xf0\x37\xe5\xf1\x52\x49\x4e\x48\x1d\xb6\xcc\x10\x13\xea\xc3\x67\xb5\xa6\x0c\x5d\xe7\x34\x55\x5f\x6a\xda\xe9\x11\xc6\x8c\xf4\x8c\xce\x3e\x2f\xd5\xd8\x2f\xbf\x3c\xf2\x57\xe8\x82\xbc\x66\xdf\x05\x82\x4b\x4d\x7d\x03\x3a\xa3\x88\x2e\x14\xe9\xca\x79\x57\x86\xdd\x7c\xaf\x9f\x37\x35\xfa\x29\x2d\x57\x80\x79\xca\x9c\x76\x1d\xa4\xbc\xa4\x53\xf0\x87\x11\x76\xb3\x24\x2f\x79\x20\xcb\x0a\x22\xb2\x0b\x59\x5b\x1b\x67\xb0\xb5\xf0\x09\xf5\x43\x5e\x76\xea\xdb\xbd\xa0\x53\x62\x29\xe9\x53\xa6\x17\x0d\xcc\xec\xee\xbd\x85\x13\x02\x6d\x4f\x87\x8d\xae\x9e\x8f\xae\x77\x42\x6a\x4f\xee\xa8\x38\xea\x4a\xfd\x2f\x00\x00\xff\xff\x3c\x88\xbf\xb2\x00\x40\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 32768, mode: os.FileMode(436), modTime: time.Unix(1517180987, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0_create_users_table.up.sql": _0_create_users_tableUpSql,
	"0_drop_users_table.down.sql": _0_drop_users_tableDownSql,
	"1_create_events_table.up.sql": _1_create_events_tableUpSql,
	"1_drop_events_table.down.sql": _1_drop_events_tableDownSql,
	"2_create_matches_table.up.sql": _2_create_matches_tableUpSql,
	"2_drop_matches_table.down.sql": _2_drop_matches_tableDownSql,
	"3_create_alliances_table.up.sql": _3_create_alliances_tableUpSql,
	"3_drop_alliances_table.down.sql": _3_drop_alliances_tableDownSql,
	"4_create_reports_table.up.sql": _4_create_reports_tableUpSql,
	"4_drop_reports_table.down.sql": _4_drop_reports_tableDownSql,
	"5_add_event_type.up.sql": _5_add_event_typeUpSql,
	"5_remove_event_type.down.sql": _5_remove_event_typeDownSql,
	"6_add_bluewon.down.sql": _6_add_bluewonDownSql,
	"6_remove_bluewon.up.sql": _6_remove_bluewonUpSql,
	"7_add_photos_table.up.sql": _7_add_photos_tableUpSql,
	"7_remove_photos_table.down.sql": _7_remove_photos_tableDownSql,
	"8_add_isdmin.up.sql": _8_add_isdminUpSql,
	"8_remove_isadmin.down.sql": _8_remove_isadminDownSql,
	"9_add_reports_cascade.up.sql": _9_add_reports_cascadeUpSql,
	"9_remove_reports_cascade.down.sql": _9_remove_reports_cascadeDownSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0_create_users_table.up.sql": &bintree{_0_create_users_tableUpSql, map[string]*bintree{}},
	"0_drop_users_table.down.sql": &bintree{_0_drop_users_tableDownSql, map[string]*bintree{}},
	"1_create_events_table.up.sql": &bintree{_1_create_events_tableUpSql, map[string]*bintree{}},
	"1_drop_events_table.down.sql": &bintree{_1_drop_events_tableDownSql, map[string]*bintree{}},
	"2_create_matches_table.up.sql": &bintree{_2_create_matches_tableUpSql, map[string]*bintree{}},
	"2_drop_matches_table.down.sql": &bintree{_2_drop_matches_tableDownSql, map[string]*bintree{}},
	"3_create_alliances_table.up.sql": &bintree{_3_create_alliances_tableUpSql, map[string]*bintree{}},
	"3_drop_alliances_table.down.sql": &bintree{_3_drop_alliances_tableDownSql, map[string]*bintree{}},
	"4_create_reports_table.up.sql": &bintree{_4_create_reports_tableUpSql, map[string]*bintree{}},
	"4_drop_reports_table.down.sql": &bintree{_4_drop_reports_tableDownSql, map[string]*bintree{}},
	"5_add_event_type.up.sql": &bintree{_5_add_event_typeUpSql, map[string]*bintree{}},
	"5_remove_event_type.down.sql": &bintree{_5_remove_event_typeDownSql, map[string]*bintree{}},
	"6_add_bluewon.down.sql": &bintree{_6_add_bluewonDownSql, map[string]*bintree{}},
	"6_remove_bluewon.up.sql": &bintree{_6_remove_bluewonUpSql, map[string]*bintree{}},
	"7_add_photos_table.up.sql": &bintree{_7_add_photos_tableUpSql, map[string]*bintree{}},
	"7_remove_photos_table.down.sql": &bintree{_7_remove_photos_tableDownSql, map[string]*bintree{}},
	"8_add_isdmin.up.sql": &bintree{_8_add_isdminUpSql, map[string]*bintree{}},
	"8_remove_isadmin.down.sql": &bintree{_8_remove_isadminDownSql, map[string]*bintree{}},
	"9_add_reports_cascade.up.sql": &bintree{_9_add_reports_cascadeUpSql, map[string]*bintree{}},
	"9_remove_reports_cascade.down.sql": &bintree{_9_remove_reports_cascadeDownSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

